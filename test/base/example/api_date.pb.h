// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/base/example/api_date.proto

#ifndef PROTOBUF_INCLUDED_test_2fbase_2fexample_2fapi_5fdate_2eproto
#define PROTOBUF_INCLUDED_test_2fbase_2fexample_2fapi_5fdate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_test_2fbase_2fexample_2fapi_5fdate_2eproto 

namespace protobuf_test_2fbase_2fexample_2fapi_5fdate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_test_2fbase_2fexample_2fapi_5fdate_2eproto
namespace sea {
namespace api {
namespace seadate {
class NowRequest;
class NowRequestDefaultTypeInternal;
extern NowRequestDefaultTypeInternal _NowRequest_default_instance_;
class NowResponse;
class NowResponseDefaultTypeInternal;
extern NowResponseDefaultTypeInternal _NowResponse_default_instance_;
}  // namespace seadate
}  // namespace api
}  // namespace sea
namespace google {
namespace protobuf {
template<> ::sea::api::seadate::NowRequest* Arena::CreateMaybeMessage<::sea::api::seadate::NowRequest>(Arena*);
template<> ::sea::api::seadate::NowResponse* Arena::CreateMaybeMessage<::sea::api::seadate::NowResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sea {
namespace api {
namespace seadate {

// ===================================================================

class NowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sea.api.seadate.NowRequest) */ {
 public:
  NowRequest();
  virtual ~NowRequest();

  NowRequest(const NowRequest& from);

  inline NowRequest& operator=(const NowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NowRequest(NowRequest&& from) noexcept
    : NowRequest() {
    *this = ::std::move(from);
  }

  inline NowRequest& operator=(NowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NowRequest* internal_default_instance() {
    return reinterpret_cast<const NowRequest*>(
               &_NowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NowRequest* other);
  friend void swap(NowRequest& a, NowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NowRequest* New() const final {
    return CreateMaybeMessage<NowRequest>(NULL);
  }

  NowRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NowRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NowRequest& from);
  void MergeFrom(const NowRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1[json_name = "RequestId"];
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // @@protoc_insertion_point(class_scope:sea.api.seadate.NowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fexample_2fapi_5fdate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sea.api.seadate.NowResponse) */ {
 public:
  NowResponse();
  virtual ~NowResponse();

  NowResponse(const NowResponse& from);

  inline NowResponse& operator=(const NowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NowResponse(NowResponse&& from) noexcept
    : NowResponse() {
    *this = ::std::move(from);
  }

  inline NowResponse& operator=(NowResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NowResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NowResponse* internal_default_instance() {
    return reinterpret_cast<const NowResponse*>(
               &_NowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NowResponse* other);
  friend void swap(NowResponse& a, NowResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NowResponse* New() const final {
    return CreateMaybeMessage<NowResponse>(NULL);
  }

  NowResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NowResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NowResponse& from);
  void MergeFrom(const NowResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NowResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string request_id = 1[json_name = "RequestId"];
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // string date = 2[json_name = "Date"];
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // @@protoc_insertion_point(class_scope:sea.api.seadate.NowResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fexample_2fapi_5fdate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NowRequest

// string request_id = 1[json_name = "RequestId"];
inline void NowRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NowRequest::request_id() const {
  // @@protoc_insertion_point(field_get:sea.api.seadate.NowRequest.request_id)
  return request_id_.GetNoArena();
}
inline void NowRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sea.api.seadate.NowRequest.request_id)
}
#if LANG_CXX11
inline void NowRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sea.api.seadate.NowRequest.request_id)
}
#endif
inline void NowRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sea.api.seadate.NowRequest.request_id)
}
inline void NowRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sea.api.seadate.NowRequest.request_id)
}
inline ::std::string* NowRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:sea.api.seadate.NowRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NowRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:sea.api.seadate.NowRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NowRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:sea.api.seadate.NowRequest.request_id)
}

// -------------------------------------------------------------------

// NowResponse

// string request_id = 1[json_name = "RequestId"];
inline void NowResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NowResponse::request_id() const {
  // @@protoc_insertion_point(field_get:sea.api.seadate.NowResponse.request_id)
  return request_id_.GetNoArena();
}
inline void NowResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sea.api.seadate.NowResponse.request_id)
}
#if LANG_CXX11
inline void NowResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sea.api.seadate.NowResponse.request_id)
}
#endif
inline void NowResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sea.api.seadate.NowResponse.request_id)
}
inline void NowResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sea.api.seadate.NowResponse.request_id)
}
inline ::std::string* NowResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:sea.api.seadate.NowResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NowResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:sea.api.seadate.NowResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NowResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:sea.api.seadate.NowResponse.request_id)
}

// string date = 2[json_name = "Date"];
inline void NowResponse::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NowResponse::date() const {
  // @@protoc_insertion_point(field_get:sea.api.seadate.NowResponse.date)
  return date_.GetNoArena();
}
inline void NowResponse::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sea.api.seadate.NowResponse.date)
}
#if LANG_CXX11
inline void NowResponse::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sea.api.seadate.NowResponse.date)
}
#endif
inline void NowResponse::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sea.api.seadate.NowResponse.date)
}
inline void NowResponse::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sea.api.seadate.NowResponse.date)
}
inline ::std::string* NowResponse::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:sea.api.seadate.NowResponse.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NowResponse::release_date() {
  // @@protoc_insertion_point(field_release:sea.api.seadate.NowResponse.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NowResponse::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:sea.api.seadate.NowResponse.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace seadate
}  // namespace api
}  // namespace sea

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_test_2fbase_2fexample_2fapi_5fdate_2eproto
