// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/base/webserver.proto

#ifndef PROTOBUF_INCLUDED_test_2fbase_2fwebserver_2eproto
#define PROTOBUF_INCLUDED_test_2fbase_2fwebserver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_test_2fbase_2fwebserver_2eproto 

namespace protobuf_test_2fbase_2fwebserver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_test_2fbase_2fwebserver_2eproto
namespace go {
namespace pkg {
namespace webserver {
class Web;
class WebDefaultTypeInternal;
extern WebDefaultTypeInternal _Web_default_instance_;
class WebConfig;
class WebConfigDefaultTypeInternal;
extern WebConfigDefaultTypeInternal _WebConfig_default_instance_;
class Web_Debug;
class Web_DebugDefaultTypeInternal;
extern Web_DebugDefaultTypeInternal _Web_Debug_default_instance_;
class Web_Debug_TestMapEntry_DoNotUse;
class Web_Debug_TestMapEntry_DoNotUseDefaultTypeInternal;
extern Web_Debug_TestMapEntry_DoNotUseDefaultTypeInternal _Web_Debug_TestMapEntry_DoNotUse_default_instance_;
class Web_Grpc;
class Web_GrpcDefaultTypeInternal;
extern Web_GrpcDefaultTypeInternal _Web_Grpc_default_instance_;
class Web_Http;
class Web_HttpDefaultTypeInternal;
extern Web_HttpDefaultTypeInternal _Web_Http_default_instance_;
class Web_Monitor;
class Web_MonitorDefaultTypeInternal;
extern Web_MonitorDefaultTypeInternal _Web_Monitor_default_instance_;
class Web_Monitor_Prometheus;
class Web_Monitor_PrometheusDefaultTypeInternal;
extern Web_Monitor_PrometheusDefaultTypeInternal _Web_Monitor_Prometheus_default_instance_;
class Web_Net;
class Web_NetDefaultTypeInternal;
extern Web_NetDefaultTypeInternal _Web_Net_default_instance_;
}  // namespace webserver
}  // namespace pkg
}  // namespace go
namespace google {
namespace protobuf {
template<> ::go::pkg::webserver::Web* Arena::CreateMaybeMessage<::go::pkg::webserver::Web>(Arena*);
template<> ::go::pkg::webserver::WebConfig* Arena::CreateMaybeMessage<::go::pkg::webserver::WebConfig>(Arena*);
template<> ::go::pkg::webserver::Web_Debug* Arena::CreateMaybeMessage<::go::pkg::webserver::Web_Debug>(Arena*);
template<> ::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage<::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse>(Arena*);
template<> ::go::pkg::webserver::Web_Grpc* Arena::CreateMaybeMessage<::go::pkg::webserver::Web_Grpc>(Arena*);
template<> ::go::pkg::webserver::Web_Http* Arena::CreateMaybeMessage<::go::pkg::webserver::Web_Http>(Arena*);
template<> ::go::pkg::webserver::Web_Monitor* Arena::CreateMaybeMessage<::go::pkg::webserver::Web_Monitor>(Arena*);
template<> ::go::pkg::webserver::Web_Monitor_Prometheus* Arena::CreateMaybeMessage<::go::pkg::webserver::Web_Monitor_Prometheus>(Arena*);
template<> ::go::pkg::webserver::Web_Net* Arena::CreateMaybeMessage<::go::pkg::webserver::Web_Net>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace go {
namespace pkg {
namespace webserver {

enum Web_Http_ApiFormatter {
  Web_Http_ApiFormatter_api_noop = 0,
  Web_Http_ApiFormatter_tcloud_api_v30 = 1,
  Web_Http_ApiFormatter_trivial_api_v10 = 2,
  Web_Http_ApiFormatter_trivial_api_v20 = 3,
  Web_Http_ApiFormatter_Web_Http_ApiFormatter_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Web_Http_ApiFormatter_Web_Http_ApiFormatter_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Web_Http_ApiFormatter_IsValid(int value);
const Web_Http_ApiFormatter Web_Http_ApiFormatter_ApiFormatter_MIN = Web_Http_ApiFormatter_api_noop;
const Web_Http_ApiFormatter Web_Http_ApiFormatter_ApiFormatter_MAX = Web_Http_ApiFormatter_trivial_api_v20;
const int Web_Http_ApiFormatter_ApiFormatter_ARRAYSIZE = Web_Http_ApiFormatter_ApiFormatter_MAX + 1;

const ::google::protobuf::EnumDescriptor* Web_Http_ApiFormatter_descriptor();
inline const ::std::string& Web_Http_ApiFormatter_Name(Web_Http_ApiFormatter value) {
  return ::google::protobuf::internal::NameOfEnum(
    Web_Http_ApiFormatter_descriptor(), value);
}
inline bool Web_Http_ApiFormatter_Parse(
    const ::std::string& name, Web_Http_ApiFormatter* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Web_Http_ApiFormatter>(
    Web_Http_ApiFormatter_descriptor(), name, value);
}
// ===================================================================

class WebConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.webserver.WebConfig) */ {
 public:
  WebConfig();
  virtual ~WebConfig();

  WebConfig(const WebConfig& from);

  inline WebConfig& operator=(const WebConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WebConfig(WebConfig&& from) noexcept
    : WebConfig() {
    *this = ::std::move(from);
  }

  inline WebConfig& operator=(WebConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WebConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebConfig* internal_default_instance() {
    return reinterpret_cast<const WebConfig*>(
               &_WebConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WebConfig* other);
  friend void swap(WebConfig& a, WebConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WebConfig* New() const final {
    return CreateMaybeMessage<WebConfig>(NULL);
  }

  WebConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WebConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WebConfig& from);
  void MergeFrom(const WebConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .go.pkg.webserver.Web web = 1;
  bool has_web() const;
  void clear_web();
  static const int kWebFieldNumber = 1;
  private:
  const ::go::pkg::webserver::Web& _internal_web() const;
  public:
  const ::go::pkg::webserver::Web& web() const;
  ::go::pkg::webserver::Web* release_web();
  ::go::pkg::webserver::Web* mutable_web();
  void set_allocated_web(::go::pkg::webserver::Web* web);

  // @@protoc_insertion_point(class_scope:go.pkg.webserver.WebConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::go::pkg::webserver::Web* web_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fwebserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Web_Net : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.webserver.Web.Net) */ {
 public:
  Web_Net();
  virtual ~Web_Net();

  Web_Net(const Web_Net& from);

  inline Web_Net& operator=(const Web_Net& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Web_Net(Web_Net&& from) noexcept
    : Web_Net() {
    *this = ::std::move(from);
  }

  inline Web_Net& operator=(Web_Net&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Web_Net& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Web_Net* internal_default_instance() {
    return reinterpret_cast<const Web_Net*>(
               &_Web_Net_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Web_Net* other);
  friend void swap(Web_Net& a, Web_Net& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Web_Net* New() const final {
    return CreateMaybeMessage<Web_Net>(NULL);
  }

  Web_Net* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Web_Net>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Web_Net& from);
  void MergeFrom(const Web_Net& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Web_Net* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.pkg.webserver.Web.Net)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fwebserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Web_Grpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.webserver.Web.Grpc) */ {
 public:
  Web_Grpc();
  virtual ~Web_Grpc();

  Web_Grpc(const Web_Grpc& from);

  inline Web_Grpc& operator=(const Web_Grpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Web_Grpc(Web_Grpc&& from) noexcept
    : Web_Grpc() {
    *this = ::std::move(from);
  }

  inline Web_Grpc& operator=(Web_Grpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Web_Grpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Web_Grpc* internal_default_instance() {
    return reinterpret_cast<const Web_Grpc*>(
               &_Web_Grpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Web_Grpc* other);
  friend void swap(Web_Grpc& a, Web_Grpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Web_Grpc* New() const final {
    return CreateMaybeMessage<Web_Grpc>(NULL);
  }

  Web_Grpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Web_Grpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Web_Grpc& from);
  void MergeFrom(const Web_Grpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Web_Grpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration timeout = 5;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 5;
  private:
  const ::google::protobuf::Duration& _internal_timeout() const;
  public:
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // int32 max_concurrency_unary = 1;
  void clear_max_concurrency_unary();
  static const int kMaxConcurrencyUnaryFieldNumber = 1;
  ::google::protobuf::int32 max_concurrency_unary() const;
  void set_max_concurrency_unary(::google::protobuf::int32 value);

  // int32 max_concurrency_stream = 2;
  void clear_max_concurrency_stream();
  static const int kMaxConcurrencyStreamFieldNumber = 2;
  ::google::protobuf::int32 max_concurrency_stream() const;
  void set_max_concurrency_stream(::google::protobuf::int32 value);

  // int32 max_receive_message_size = 3;
  void clear_max_receive_message_size();
  static const int kMaxReceiveMessageSizeFieldNumber = 3;
  ::google::protobuf::int32 max_receive_message_size() const;
  void set_max_receive_message_size(::google::protobuf::int32 value);

  // int32 max_send_message_size = 4;
  void clear_max_send_message_size();
  static const int kMaxSendMessageSizeFieldNumber = 4;
  ::google::protobuf::int32 max_send_message_size() const;
  void set_max_send_message_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.pkg.webserver.Web.Grpc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* timeout_;
  ::google::protobuf::int32 max_concurrency_unary_;
  ::google::protobuf::int32 max_concurrency_stream_;
  ::google::protobuf::int32 max_receive_message_size_;
  ::google::protobuf::int32 max_send_message_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fwebserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Web_Http : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.webserver.Web.Http) */ {
 public:
  Web_Http();
  virtual ~Web_Http();

  Web_Http(const Web_Http& from);

  inline Web_Http& operator=(const Web_Http& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Web_Http(Web_Http&& from) noexcept
    : Web_Http() {
    *this = ::std::move(from);
  }

  inline Web_Http& operator=(Web_Http&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Web_Http& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Web_Http* internal_default_instance() {
    return reinterpret_cast<const Web_Http*>(
               &_Web_Http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Web_Http* other);
  friend void swap(Web_Http& a, Web_Http& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Web_Http* New() const final {
    return CreateMaybeMessage<Web_Http>(NULL);
  }

  Web_Http* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Web_Http>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Web_Http& from);
  void MergeFrom(const Web_Http& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Web_Http* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Web_Http_ApiFormatter ApiFormatter;
  static const ApiFormatter api_noop =
    Web_Http_ApiFormatter_api_noop;
  static const ApiFormatter tcloud_api_v30 =
    Web_Http_ApiFormatter_tcloud_api_v30;
  static const ApiFormatter trivial_api_v10 =
    Web_Http_ApiFormatter_trivial_api_v10;
  static const ApiFormatter trivial_api_v20 =
    Web_Http_ApiFormatter_trivial_api_v20;
  static inline bool ApiFormatter_IsValid(int value) {
    return Web_Http_ApiFormatter_IsValid(value);
  }
  static const ApiFormatter ApiFormatter_MIN =
    Web_Http_ApiFormatter_ApiFormatter_MIN;
  static const ApiFormatter ApiFormatter_MAX =
    Web_Http_ApiFormatter_ApiFormatter_MAX;
  static const int ApiFormatter_ARRAYSIZE =
    Web_Http_ApiFormatter_ApiFormatter_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ApiFormatter_descriptor() {
    return Web_Http_ApiFormatter_descriptor();
  }
  static inline const ::std::string& ApiFormatter_Name(ApiFormatter value) {
    return Web_Http_ApiFormatter_Name(value);
  }
  static inline bool ApiFormatter_Parse(const ::std::string& name,
      ApiFormatter* value) {
    return Web_Http_ApiFormatter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.protobuf.Duration timeout = 3;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  private:
  const ::google::protobuf::Duration& _internal_timeout() const;
  public:
  const ::google::protobuf::Duration& timeout() const;
  ::google::protobuf::Duration* release_timeout();
  ::google::protobuf::Duration* mutable_timeout();
  void set_allocated_timeout(::google::protobuf::Duration* timeout);

  // .go.pkg.webserver.Web.Http.ApiFormatter api_formatter = 1;
  void clear_api_formatter();
  static const int kApiFormatterFieldNumber = 1;
  ::go::pkg::webserver::Web_Http_ApiFormatter api_formatter() const;
  void set_api_formatter(::go::pkg::webserver::Web_Http_ApiFormatter value);

  // int32 max_concurrency = 2;
  void clear_max_concurrency();
  static const int kMaxConcurrencyFieldNumber = 2;
  ::google::protobuf::int32 max_concurrency() const;
  void set_max_concurrency(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:go.pkg.webserver.Web.Http)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Duration* timeout_;
  int api_formatter_;
  ::google::protobuf::int32 max_concurrency_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fwebserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Web_Debug_TestMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Web_Debug_TestMapEntry_DoNotUse, 
    ::google::protobuf::int32, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Web_Debug_TestMapEntry_DoNotUse, 
    ::google::protobuf::int32, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  Web_Debug_TestMapEntry_DoNotUse();
  Web_Debug_TestMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Web_Debug_TestMapEntry_DoNotUse& other);
  static const Web_Debug_TestMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Web_Debug_TestMapEntry_DoNotUse*>(&_Web_Debug_TestMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Web_Debug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.webserver.Web.Debug) */ {
 public:
  Web_Debug();
  virtual ~Web_Debug();

  Web_Debug(const Web_Debug& from);

  inline Web_Debug& operator=(const Web_Debug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Web_Debug(Web_Debug&& from) noexcept
    : Web_Debug() {
    *this = ::std::move(from);
  }

  inline Web_Debug& operator=(Web_Debug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Web_Debug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Web_Debug* internal_default_instance() {
    return reinterpret_cast<const Web_Debug*>(
               &_Web_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Web_Debug* other);
  friend void swap(Web_Debug& a, Web_Debug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Web_Debug* New() const final {
    return CreateMaybeMessage<Web_Debug>(NULL);
  }

  Web_Debug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Web_Debug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Web_Debug& from);
  void MergeFrom(const Web_Debug& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Web_Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string disable_print_inoutput_methods = 2;
  int disable_print_inoutput_methods_size() const;
  void clear_disable_print_inoutput_methods();
  static const int kDisablePrintInoutputMethodsFieldNumber = 2;
  const ::std::string& disable_print_inoutput_methods(int index) const;
  ::std::string* mutable_disable_print_inoutput_methods(int index);
  void set_disable_print_inoutput_methods(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_disable_print_inoutput_methods(int index, ::std::string&& value);
  #endif
  void set_disable_print_inoutput_methods(int index, const char* value);
  void set_disable_print_inoutput_methods(int index, const char* value, size_t size);
  ::std::string* add_disable_print_inoutput_methods();
  void add_disable_print_inoutput_methods(const ::std::string& value);
  #if LANG_CXX11
  void add_disable_print_inoutput_methods(::std::string&& value);
  #endif
  void add_disable_print_inoutput_methods(const char* value);
  void add_disable_print_inoutput_methods(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& disable_print_inoutput_methods() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_disable_print_inoutput_methods();

  // map<int32, int32> test_map = 3;
  int test_map_size() const;
  void clear_test_map();
  static const int kTestMapFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
      test_map() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
      mutable_test_map();

  // bool enable_profiling = 1;
  void clear_enable_profiling();
  static const int kEnableProfilingFieldNumber = 1;
  bool enable_profiling() const;
  void set_enable_profiling(bool value);

  // @@protoc_insertion_point(class_scope:go.pkg.webserver.Web.Debug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> disable_print_inoutput_methods_;
  ::google::protobuf::internal::MapField<
      Web_Debug_TestMapEntry_DoNotUse,
      ::google::protobuf::int32, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > test_map_;
  bool enable_profiling_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fwebserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Web_Monitor_Prometheus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.webserver.Web.Monitor.Prometheus) */ {
 public:
  Web_Monitor_Prometheus();
  virtual ~Web_Monitor_Prometheus();

  Web_Monitor_Prometheus(const Web_Monitor_Prometheus& from);

  inline Web_Monitor_Prometheus& operator=(const Web_Monitor_Prometheus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Web_Monitor_Prometheus(Web_Monitor_Prometheus&& from) noexcept
    : Web_Monitor_Prometheus() {
    *this = ::std::move(from);
  }

  inline Web_Monitor_Prometheus& operator=(Web_Monitor_Prometheus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Web_Monitor_Prometheus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Web_Monitor_Prometheus* internal_default_instance() {
    return reinterpret_cast<const Web_Monitor_Prometheus*>(
               &_Web_Monitor_Prometheus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Web_Monitor_Prometheus* other);
  friend void swap(Web_Monitor_Prometheus& a, Web_Monitor_Prometheus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Web_Monitor_Prometheus* New() const final {
    return CreateMaybeMessage<Web_Monitor_Prometheus>(NULL);
  }

  Web_Monitor_Prometheus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Web_Monitor_Prometheus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Web_Monitor_Prometheus& from);
  void MergeFrom(const Web_Monitor_Prometheus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Web_Monitor_Prometheus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled_metric_timer_cost = 1;
  void clear_enabled_metric_timer_cost();
  static const int kEnabledMetricTimerCostFieldNumber = 1;
  bool enabled_metric_timer_cost() const;
  void set_enabled_metric_timer_cost(bool value);

  // bool enabled_metric_code_message = 2;
  void clear_enabled_metric_code_message();
  static const int kEnabledMetricCodeMessageFieldNumber = 2;
  bool enabled_metric_code_message() const;
  void set_enabled_metric_code_message(bool value);

  // @@protoc_insertion_point(class_scope:go.pkg.webserver.Web.Monitor.Prometheus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_metric_timer_cost_;
  bool enabled_metric_code_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fwebserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Web_Monitor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.webserver.Web.Monitor) */ {
 public:
  Web_Monitor();
  virtual ~Web_Monitor();

  Web_Monitor(const Web_Monitor& from);

  inline Web_Monitor& operator=(const Web_Monitor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Web_Monitor(Web_Monitor&& from) noexcept
    : Web_Monitor() {
    *this = ::std::move(from);
  }

  inline Web_Monitor& operator=(Web_Monitor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Web_Monitor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Web_Monitor* internal_default_instance() {
    return reinterpret_cast<const Web_Monitor*>(
               &_Web_Monitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Web_Monitor* other);
  friend void swap(Web_Monitor& a, Web_Monitor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Web_Monitor* New() const final {
    return CreateMaybeMessage<Web_Monitor>(NULL);
  }

  Web_Monitor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Web_Monitor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Web_Monitor& from);
  void MergeFrom(const Web_Monitor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Web_Monitor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Web_Monitor_Prometheus Prometheus;

  // accessors -------------------------------------------------------

  // .go.pkg.webserver.Web.Monitor.Prometheus prometheus = 1;
  bool has_prometheus() const;
  void clear_prometheus();
  static const int kPrometheusFieldNumber = 1;
  private:
  const ::go::pkg::webserver::Web_Monitor_Prometheus& _internal_prometheus() const;
  public:
  const ::go::pkg::webserver::Web_Monitor_Prometheus& prometheus() const;
  ::go::pkg::webserver::Web_Monitor_Prometheus* release_prometheus();
  ::go::pkg::webserver::Web_Monitor_Prometheus* mutable_prometheus();
  void set_allocated_prometheus(::go::pkg::webserver::Web_Monitor_Prometheus* prometheus);

  // @@protoc_insertion_point(class_scope:go.pkg.webserver.Web.Monitor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::go::pkg::webserver::Web_Monitor_Prometheus* prometheus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fwebserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Web : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.webserver.Web) */ {
 public:
  Web();
  virtual ~Web();

  Web(const Web& from);

  inline Web& operator=(const Web& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Web(Web&& from) noexcept
    : Web() {
    *this = ::std::move(from);
  }

  inline Web& operator=(Web&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Web& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Web* internal_default_instance() {
    return reinterpret_cast<const Web*>(
               &_Web_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Web* other);
  friend void swap(Web& a, Web& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Web* New() const final {
    return CreateMaybeMessage<Web>(NULL);
  }

  Web* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Web>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Web& from);
  void MergeFrom(const Web& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Web* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Web_Net Net;
  typedef Web_Grpc Grpc;
  typedef Web_Http Http;
  typedef Web_Debug Debug;
  typedef Web_Monitor Monitor;

  // accessors -------------------------------------------------------

  // .go.pkg.webserver.Web.Net bind_address = 1;
  bool has_bind_address() const;
  void clear_bind_address();
  static const int kBindAddressFieldNumber = 1;
  private:
  const ::go::pkg::webserver::Web_Net& _internal_bind_address() const;
  public:
  const ::go::pkg::webserver::Web_Net& bind_address() const;
  ::go::pkg::webserver::Web_Net* release_bind_address();
  ::go::pkg::webserver::Web_Net* mutable_bind_address();
  void set_allocated_bind_address(::go::pkg::webserver::Web_Net* bind_address);

  // .go.pkg.webserver.Web.Grpc grpc = 3;
  bool has_grpc() const;
  void clear_grpc();
  static const int kGrpcFieldNumber = 3;
  private:
  const ::go::pkg::webserver::Web_Grpc& _internal_grpc() const;
  public:
  const ::go::pkg::webserver::Web_Grpc& grpc() const;
  ::go::pkg::webserver::Web_Grpc* release_grpc();
  ::go::pkg::webserver::Web_Grpc* mutable_grpc();
  void set_allocated_grpc(::go::pkg::webserver::Web_Grpc* grpc);

  // .go.pkg.webserver.Web.Http http = 4;
  bool has_http() const;
  void clear_http();
  static const int kHttpFieldNumber = 4;
  private:
  const ::go::pkg::webserver::Web_Http& _internal_http() const;
  public:
  const ::go::pkg::webserver::Web_Http& http() const;
  ::go::pkg::webserver::Web_Http* release_http();
  ::go::pkg::webserver::Web_Http* mutable_http();
  void set_allocated_http(::go::pkg::webserver::Web_Http* http);

  // .go.pkg.webserver.Web.Debug debug = 10;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 10;
  private:
  const ::go::pkg::webserver::Web_Debug& _internal_debug() const;
  public:
  const ::go::pkg::webserver::Web_Debug& debug() const;
  ::go::pkg::webserver::Web_Debug* release_debug();
  ::go::pkg::webserver::Web_Debug* mutable_debug();
  void set_allocated_debug(::go::pkg::webserver::Web_Debug* debug);

  // .go.pkg.webserver.Web.Monitor monitor = 11;
  bool has_monitor() const;
  void clear_monitor();
  static const int kMonitorFieldNumber = 11;
  private:
  const ::go::pkg::webserver::Web_Monitor& _internal_monitor() const;
  public:
  const ::go::pkg::webserver::Web_Monitor& monitor() const;
  ::go::pkg::webserver::Web_Monitor* release_monitor();
  ::go::pkg::webserver::Web_Monitor* mutable_monitor();
  void set_allocated_monitor(::go::pkg::webserver::Web_Monitor* monitor);

  // @@protoc_insertion_point(class_scope:go.pkg.webserver.Web)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::go::pkg::webserver::Web_Net* bind_address_;
  ::go::pkg::webserver::Web_Grpc* grpc_;
  ::go::pkg::webserver::Web_Http* http_;
  ::go::pkg::webserver::Web_Debug* debug_;
  ::go::pkg::webserver::Web_Monitor* monitor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2fbase_2fwebserver_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebConfig

// .go.pkg.webserver.Web web = 1;
inline bool WebConfig::has_web() const {
  return this != internal_default_instance() && web_ != NULL;
}
inline void WebConfig::clear_web() {
  if (GetArenaNoVirtual() == NULL && web_ != NULL) {
    delete web_;
  }
  web_ = NULL;
}
inline const ::go::pkg::webserver::Web& WebConfig::_internal_web() const {
  return *web_;
}
inline const ::go::pkg::webserver::Web& WebConfig::web() const {
  const ::go::pkg::webserver::Web* p = web_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.WebConfig.web)
  return p != NULL ? *p : *reinterpret_cast<const ::go::pkg::webserver::Web*>(
      &::go::pkg::webserver::_Web_default_instance_);
}
inline ::go::pkg::webserver::Web* WebConfig::release_web() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.WebConfig.web)
  
  ::go::pkg::webserver::Web* temp = web_;
  web_ = NULL;
  return temp;
}
inline ::go::pkg::webserver::Web* WebConfig::mutable_web() {
  
  if (web_ == NULL) {
    auto* p = CreateMaybeMessage<::go::pkg::webserver::Web>(GetArenaNoVirtual());
    web_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.WebConfig.web)
  return web_;
}
inline void WebConfig::set_allocated_web(::go::pkg::webserver::Web* web) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete web_;
  }
  if (web) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      web = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, web, submessage_arena);
    }
    
  } else {
    
  }
  web_ = web;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.WebConfig.web)
}

// -------------------------------------------------------------------

// Web_Net

// string host = 1;
inline void Web_Net::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Web_Net::host() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Net.host)
  return host_.GetNoArena();
}
inline void Web_Net::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Net.host)
}
#if LANG_CXX11
inline void Web_Net::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.pkg.webserver.Web.Net.host)
}
#endif
inline void Web_Net::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.pkg.webserver.Web.Net.host)
}
inline void Web_Net::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.pkg.webserver.Web.Net.host)
}
inline ::std::string* Web_Net::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.Net.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Web_Net::release_host() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.Net.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Web_Net::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.Net.host)
}

// int32 port = 2;
inline void Web_Net::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Web_Net::port() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Net.port)
  return port_;
}
inline void Web_Net::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Net.port)
}

// -------------------------------------------------------------------

// Web_Grpc

// int32 max_concurrency_unary = 1;
inline void Web_Grpc::clear_max_concurrency_unary() {
  max_concurrency_unary_ = 0;
}
inline ::google::protobuf::int32 Web_Grpc::max_concurrency_unary() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Grpc.max_concurrency_unary)
  return max_concurrency_unary_;
}
inline void Web_Grpc::set_max_concurrency_unary(::google::protobuf::int32 value) {
  
  max_concurrency_unary_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Grpc.max_concurrency_unary)
}

// int32 max_concurrency_stream = 2;
inline void Web_Grpc::clear_max_concurrency_stream() {
  max_concurrency_stream_ = 0;
}
inline ::google::protobuf::int32 Web_Grpc::max_concurrency_stream() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Grpc.max_concurrency_stream)
  return max_concurrency_stream_;
}
inline void Web_Grpc::set_max_concurrency_stream(::google::protobuf::int32 value) {
  
  max_concurrency_stream_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Grpc.max_concurrency_stream)
}

// int32 max_receive_message_size = 3;
inline void Web_Grpc::clear_max_receive_message_size() {
  max_receive_message_size_ = 0;
}
inline ::google::protobuf::int32 Web_Grpc::max_receive_message_size() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Grpc.max_receive_message_size)
  return max_receive_message_size_;
}
inline void Web_Grpc::set_max_receive_message_size(::google::protobuf::int32 value) {
  
  max_receive_message_size_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Grpc.max_receive_message_size)
}

// int32 max_send_message_size = 4;
inline void Web_Grpc::clear_max_send_message_size() {
  max_send_message_size_ = 0;
}
inline ::google::protobuf::int32 Web_Grpc::max_send_message_size() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Grpc.max_send_message_size)
  return max_send_message_size_;
}
inline void Web_Grpc::set_max_send_message_size(::google::protobuf::int32 value) {
  
  max_send_message_size_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Grpc.max_send_message_size)
}

// .google.protobuf.Duration timeout = 5;
inline bool Web_Grpc::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Duration& Web_Grpc::_internal_timeout() const {
  return *timeout_;
}
inline const ::google::protobuf::Duration& Web_Grpc::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Grpc.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Web_Grpc::release_timeout() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.Grpc.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Web_Grpc::mutable_timeout() {
  
  if (timeout_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.Grpc.timeout)
  return timeout_;
}
inline void Web_Grpc::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.Grpc.timeout)
}

// -------------------------------------------------------------------

// Web_Http

// .go.pkg.webserver.Web.Http.ApiFormatter api_formatter = 1;
inline void Web_Http::clear_api_formatter() {
  api_formatter_ = 0;
}
inline ::go::pkg::webserver::Web_Http_ApiFormatter Web_Http::api_formatter() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Http.api_formatter)
  return static_cast< ::go::pkg::webserver::Web_Http_ApiFormatter >(api_formatter_);
}
inline void Web_Http::set_api_formatter(::go::pkg::webserver::Web_Http_ApiFormatter value) {
  
  api_formatter_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Http.api_formatter)
}

// int32 max_concurrency = 2;
inline void Web_Http::clear_max_concurrency() {
  max_concurrency_ = 0;
}
inline ::google::protobuf::int32 Web_Http::max_concurrency() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Http.max_concurrency)
  return max_concurrency_;
}
inline void Web_Http::set_max_concurrency(::google::protobuf::int32 value) {
  
  max_concurrency_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Http.max_concurrency)
}

// .google.protobuf.Duration timeout = 3;
inline bool Web_Http::has_timeout() const {
  return this != internal_default_instance() && timeout_ != NULL;
}
inline const ::google::protobuf::Duration& Web_Http::_internal_timeout() const {
  return *timeout_;
}
inline const ::google::protobuf::Duration& Web_Http::timeout() const {
  const ::google::protobuf::Duration* p = timeout_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Http.timeout)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Web_Http::release_timeout() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.Http.timeout)
  
  ::google::protobuf::Duration* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Web_Http::mutable_timeout() {
  
  if (timeout_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.Http.timeout)
  return timeout_;
}
inline void Web_Http::set_allocated_timeout(::google::protobuf::Duration* timeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.Http.timeout)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Web_Debug

// bool enable_profiling = 1;
inline void Web_Debug::clear_enable_profiling() {
  enable_profiling_ = false;
}
inline bool Web_Debug::enable_profiling() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Debug.enable_profiling)
  return enable_profiling_;
}
inline void Web_Debug::set_enable_profiling(bool value) {
  
  enable_profiling_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Debug.enable_profiling)
}

// repeated string disable_print_inoutput_methods = 2;
inline int Web_Debug::disable_print_inoutput_methods_size() const {
  return disable_print_inoutput_methods_.size();
}
inline void Web_Debug::clear_disable_print_inoutput_methods() {
  disable_print_inoutput_methods_.Clear();
}
inline const ::std::string& Web_Debug::disable_print_inoutput_methods(int index) const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
  return disable_print_inoutput_methods_.Get(index);
}
inline ::std::string* Web_Debug::mutable_disable_print_inoutput_methods(int index) {
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
  return disable_print_inoutput_methods_.Mutable(index);
}
inline void Web_Debug::set_disable_print_inoutput_methods(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
  disable_print_inoutput_methods_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Web_Debug::set_disable_print_inoutput_methods(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
  disable_print_inoutput_methods_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Web_Debug::set_disable_print_inoutput_methods(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  disable_print_inoutput_methods_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
}
inline void Web_Debug::set_disable_print_inoutput_methods(int index, const char* value, size_t size) {
  disable_print_inoutput_methods_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
}
inline ::std::string* Web_Debug::add_disable_print_inoutput_methods() {
  // @@protoc_insertion_point(field_add_mutable:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
  return disable_print_inoutput_methods_.Add();
}
inline void Web_Debug::add_disable_print_inoutput_methods(const ::std::string& value) {
  disable_print_inoutput_methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
}
#if LANG_CXX11
inline void Web_Debug::add_disable_print_inoutput_methods(::std::string&& value) {
  disable_print_inoutput_methods_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
}
#endif
inline void Web_Debug::add_disable_print_inoutput_methods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  disable_print_inoutput_methods_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
}
inline void Web_Debug::add_disable_print_inoutput_methods(const char* value, size_t size) {
  disable_print_inoutput_methods_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Web_Debug::disable_print_inoutput_methods() const {
  // @@protoc_insertion_point(field_list:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
  return disable_print_inoutput_methods_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Web_Debug::mutable_disable_print_inoutput_methods() {
  // @@protoc_insertion_point(field_mutable_list:go.pkg.webserver.Web.Debug.disable_print_inoutput_methods)
  return &disable_print_inoutput_methods_;
}

// map<int32, int32> test_map = 3;
inline int Web_Debug::test_map_size() const {
  return test_map_.size();
}
inline void Web_Debug::clear_test_map() {
  test_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
Web_Debug::test_map() const {
  // @@protoc_insertion_point(field_map:go.pkg.webserver.Web.Debug.test_map)
  return test_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
Web_Debug::mutable_test_map() {
  // @@protoc_insertion_point(field_mutable_map:go.pkg.webserver.Web.Debug.test_map)
  return test_map_.MutableMap();
}

// -------------------------------------------------------------------

// Web_Monitor_Prometheus

// bool enabled_metric_timer_cost = 1;
inline void Web_Monitor_Prometheus::clear_enabled_metric_timer_cost() {
  enabled_metric_timer_cost_ = false;
}
inline bool Web_Monitor_Prometheus::enabled_metric_timer_cost() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Monitor.Prometheus.enabled_metric_timer_cost)
  return enabled_metric_timer_cost_;
}
inline void Web_Monitor_Prometheus::set_enabled_metric_timer_cost(bool value) {
  
  enabled_metric_timer_cost_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Monitor.Prometheus.enabled_metric_timer_cost)
}

// bool enabled_metric_code_message = 2;
inline void Web_Monitor_Prometheus::clear_enabled_metric_code_message() {
  enabled_metric_code_message_ = false;
}
inline bool Web_Monitor_Prometheus::enabled_metric_code_message() const {
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Monitor.Prometheus.enabled_metric_code_message)
  return enabled_metric_code_message_;
}
inline void Web_Monitor_Prometheus::set_enabled_metric_code_message(bool value) {
  
  enabled_metric_code_message_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.webserver.Web.Monitor.Prometheus.enabled_metric_code_message)
}

// -------------------------------------------------------------------

// Web_Monitor

// .go.pkg.webserver.Web.Monitor.Prometheus prometheus = 1;
inline bool Web_Monitor::has_prometheus() const {
  return this != internal_default_instance() && prometheus_ != NULL;
}
inline void Web_Monitor::clear_prometheus() {
  if (GetArenaNoVirtual() == NULL && prometheus_ != NULL) {
    delete prometheus_;
  }
  prometheus_ = NULL;
}
inline const ::go::pkg::webserver::Web_Monitor_Prometheus& Web_Monitor::_internal_prometheus() const {
  return *prometheus_;
}
inline const ::go::pkg::webserver::Web_Monitor_Prometheus& Web_Monitor::prometheus() const {
  const ::go::pkg::webserver::Web_Monitor_Prometheus* p = prometheus_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.Monitor.prometheus)
  return p != NULL ? *p : *reinterpret_cast<const ::go::pkg::webserver::Web_Monitor_Prometheus*>(
      &::go::pkg::webserver::_Web_Monitor_Prometheus_default_instance_);
}
inline ::go::pkg::webserver::Web_Monitor_Prometheus* Web_Monitor::release_prometheus() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.Monitor.prometheus)
  
  ::go::pkg::webserver::Web_Monitor_Prometheus* temp = prometheus_;
  prometheus_ = NULL;
  return temp;
}
inline ::go::pkg::webserver::Web_Monitor_Prometheus* Web_Monitor::mutable_prometheus() {
  
  if (prometheus_ == NULL) {
    auto* p = CreateMaybeMessage<::go::pkg::webserver::Web_Monitor_Prometheus>(GetArenaNoVirtual());
    prometheus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.Monitor.prometheus)
  return prometheus_;
}
inline void Web_Monitor::set_allocated_prometheus(::go::pkg::webserver::Web_Monitor_Prometheus* prometheus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prometheus_;
  }
  if (prometheus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prometheus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prometheus, submessage_arena);
    }
    
  } else {
    
  }
  prometheus_ = prometheus;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.Monitor.prometheus)
}

// -------------------------------------------------------------------

// Web

// .go.pkg.webserver.Web.Net bind_address = 1;
inline bool Web::has_bind_address() const {
  return this != internal_default_instance() && bind_address_ != NULL;
}
inline void Web::clear_bind_address() {
  if (GetArenaNoVirtual() == NULL && bind_address_ != NULL) {
    delete bind_address_;
  }
  bind_address_ = NULL;
}
inline const ::go::pkg::webserver::Web_Net& Web::_internal_bind_address() const {
  return *bind_address_;
}
inline const ::go::pkg::webserver::Web_Net& Web::bind_address() const {
  const ::go::pkg::webserver::Web_Net* p = bind_address_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.bind_address)
  return p != NULL ? *p : *reinterpret_cast<const ::go::pkg::webserver::Web_Net*>(
      &::go::pkg::webserver::_Web_Net_default_instance_);
}
inline ::go::pkg::webserver::Web_Net* Web::release_bind_address() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.bind_address)
  
  ::go::pkg::webserver::Web_Net* temp = bind_address_;
  bind_address_ = NULL;
  return temp;
}
inline ::go::pkg::webserver::Web_Net* Web::mutable_bind_address() {
  
  if (bind_address_ == NULL) {
    auto* p = CreateMaybeMessage<::go::pkg::webserver::Web_Net>(GetArenaNoVirtual());
    bind_address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.bind_address)
  return bind_address_;
}
inline void Web::set_allocated_bind_address(::go::pkg::webserver::Web_Net* bind_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bind_address_;
  }
  if (bind_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bind_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bind_address, submessage_arena);
    }
    
  } else {
    
  }
  bind_address_ = bind_address;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.bind_address)
}

// .go.pkg.webserver.Web.Grpc grpc = 3;
inline bool Web::has_grpc() const {
  return this != internal_default_instance() && grpc_ != NULL;
}
inline void Web::clear_grpc() {
  if (GetArenaNoVirtual() == NULL && grpc_ != NULL) {
    delete grpc_;
  }
  grpc_ = NULL;
}
inline const ::go::pkg::webserver::Web_Grpc& Web::_internal_grpc() const {
  return *grpc_;
}
inline const ::go::pkg::webserver::Web_Grpc& Web::grpc() const {
  const ::go::pkg::webserver::Web_Grpc* p = grpc_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.grpc)
  return p != NULL ? *p : *reinterpret_cast<const ::go::pkg::webserver::Web_Grpc*>(
      &::go::pkg::webserver::_Web_Grpc_default_instance_);
}
inline ::go::pkg::webserver::Web_Grpc* Web::release_grpc() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.grpc)
  
  ::go::pkg::webserver::Web_Grpc* temp = grpc_;
  grpc_ = NULL;
  return temp;
}
inline ::go::pkg::webserver::Web_Grpc* Web::mutable_grpc() {
  
  if (grpc_ == NULL) {
    auto* p = CreateMaybeMessage<::go::pkg::webserver::Web_Grpc>(GetArenaNoVirtual());
    grpc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.grpc)
  return grpc_;
}
inline void Web::set_allocated_grpc(::go::pkg::webserver::Web_Grpc* grpc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete grpc_;
  }
  if (grpc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      grpc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, grpc, submessage_arena);
    }
    
  } else {
    
  }
  grpc_ = grpc;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.grpc)
}

// .go.pkg.webserver.Web.Http http = 4;
inline bool Web::has_http() const {
  return this != internal_default_instance() && http_ != NULL;
}
inline void Web::clear_http() {
  if (GetArenaNoVirtual() == NULL && http_ != NULL) {
    delete http_;
  }
  http_ = NULL;
}
inline const ::go::pkg::webserver::Web_Http& Web::_internal_http() const {
  return *http_;
}
inline const ::go::pkg::webserver::Web_Http& Web::http() const {
  const ::go::pkg::webserver::Web_Http* p = http_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.http)
  return p != NULL ? *p : *reinterpret_cast<const ::go::pkg::webserver::Web_Http*>(
      &::go::pkg::webserver::_Web_Http_default_instance_);
}
inline ::go::pkg::webserver::Web_Http* Web::release_http() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.http)
  
  ::go::pkg::webserver::Web_Http* temp = http_;
  http_ = NULL;
  return temp;
}
inline ::go::pkg::webserver::Web_Http* Web::mutable_http() {
  
  if (http_ == NULL) {
    auto* p = CreateMaybeMessage<::go::pkg::webserver::Web_Http>(GetArenaNoVirtual());
    http_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.http)
  return http_;
}
inline void Web::set_allocated_http(::go::pkg::webserver::Web_Http* http) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete http_;
  }
  if (http) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      http = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http, submessage_arena);
    }
    
  } else {
    
  }
  http_ = http;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.http)
}

// .go.pkg.webserver.Web.Debug debug = 10;
inline bool Web::has_debug() const {
  return this != internal_default_instance() && debug_ != NULL;
}
inline void Web::clear_debug() {
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) {
    delete debug_;
  }
  debug_ = NULL;
}
inline const ::go::pkg::webserver::Web_Debug& Web::_internal_debug() const {
  return *debug_;
}
inline const ::go::pkg::webserver::Web_Debug& Web::debug() const {
  const ::go::pkg::webserver::Web_Debug* p = debug_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.debug)
  return p != NULL ? *p : *reinterpret_cast<const ::go::pkg::webserver::Web_Debug*>(
      &::go::pkg::webserver::_Web_Debug_default_instance_);
}
inline ::go::pkg::webserver::Web_Debug* Web::release_debug() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.debug)
  
  ::go::pkg::webserver::Web_Debug* temp = debug_;
  debug_ = NULL;
  return temp;
}
inline ::go::pkg::webserver::Web_Debug* Web::mutable_debug() {
  
  if (debug_ == NULL) {
    auto* p = CreateMaybeMessage<::go::pkg::webserver::Web_Debug>(GetArenaNoVirtual());
    debug_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.debug)
  return debug_;
}
inline void Web::set_allocated_debug(::go::pkg::webserver::Web_Debug* debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_;
  }
  if (debug) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.debug)
}

// .go.pkg.webserver.Web.Monitor monitor = 11;
inline bool Web::has_monitor() const {
  return this != internal_default_instance() && monitor_ != NULL;
}
inline void Web::clear_monitor() {
  if (GetArenaNoVirtual() == NULL && monitor_ != NULL) {
    delete monitor_;
  }
  monitor_ = NULL;
}
inline const ::go::pkg::webserver::Web_Monitor& Web::_internal_monitor() const {
  return *monitor_;
}
inline const ::go::pkg::webserver::Web_Monitor& Web::monitor() const {
  const ::go::pkg::webserver::Web_Monitor* p = monitor_;
  // @@protoc_insertion_point(field_get:go.pkg.webserver.Web.monitor)
  return p != NULL ? *p : *reinterpret_cast<const ::go::pkg::webserver::Web_Monitor*>(
      &::go::pkg::webserver::_Web_Monitor_default_instance_);
}
inline ::go::pkg::webserver::Web_Monitor* Web::release_monitor() {
  // @@protoc_insertion_point(field_release:go.pkg.webserver.Web.monitor)
  
  ::go::pkg::webserver::Web_Monitor* temp = monitor_;
  monitor_ = NULL;
  return temp;
}
inline ::go::pkg::webserver::Web_Monitor* Web::mutable_monitor() {
  
  if (monitor_ == NULL) {
    auto* p = CreateMaybeMessage<::go::pkg::webserver::Web_Monitor>(GetArenaNoVirtual());
    monitor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.webserver.Web.monitor)
  return monitor_;
}
inline void Web::set_allocated_monitor(::go::pkg::webserver::Web_Monitor* monitor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete monitor_;
  }
  if (monitor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      monitor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, monitor, submessage_arena);
    }
    
  } else {
    
  }
  monitor_ = monitor;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.webserver.Web.monitor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace webserver
}  // namespace pkg
}  // namespace go

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::go::pkg::webserver::Web_Http_ApiFormatter> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::go::pkg::webserver::Web_Http_ApiFormatter>() {
  return ::go::pkg::webserver::Web_Http_ApiFormatter_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_test_2fbase_2fwebserver_2eproto
