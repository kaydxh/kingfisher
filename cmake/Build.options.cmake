option(ENABLE_GRAPHICS_MAGICK "ENABLE_GRAPHICS_MAGICK" ON)
if (ENABLE_GRAPHICS_MAGICK)
  message(STATUS " > build with graphics magick lib")
  add_definitions(-DENABLE_GRAPHICS_MAGICK)
  set(MAGICK_DEPS z bz2 gomp GraphicsMagickWand GraphicsMagick++ GraphicsMagick tiff)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/graphicsMagick_v1.3.35/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/graphicsMagick_v1.3.35/lib)
  # link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/png/lib)
endif()

option(ENABLE_OPENCV "ENABLE_OPENCV" ON)
if (ENABLE_OPENCV)
  set(OPENCV_VERSION "2")
  message(STATUS " > build with opencv${OPENCV_VERSION} lib")
  add_definitions(-DENABLE_OPENCV)
  if (OPENCV_VERSION STREQUAL "2")
    set(OPENCV_DEPS opencv_calib3d opencv_video opencv_imgproc opencv_highgui opencv_core opencv_contrib)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/opencv2/include)
    link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/opencv2/lib)
  else()
    set(OPENCV_DEPS opencv_imgproc opencv_highgui opencv_core opencv_imgcodecs)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/opencv4)
  endif()
endif()

# cmake -DENABLE_CRYPTO_OPENSSL=ON ..
option(ENABLE_CRYPTO_OPENSSL "ENABLE_CRYPTO_OPENSSL" ON)
if (ENABLE_CRYPTO_OPENSSL)
  message(STATUS "> build with openssl lib")
  add_definitions(-DENABLE_CRYPTO_OPENSSL)
  set(OPENSSL_DEPS crypto ssl)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/openssl/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/openssl/lib)
endif()

# cmake -DENABLE_PROTOBUF=ON ..
option(ENABLE_PROTOBUF "ENABLE_PROTOBUF" ON)
if (ENABLE_PROTOBUF)
  message(STATUS "> build with protobuf lib")
  add_definitions(-DENABLE_PROTOBUF)
  #include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/protobuf-v3.6.1/include)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/grpc/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/grpc/lib64)
  #link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/protobuf-v3.6.1/lib)
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/pkg/cmake/")
  message(STATUS "CMAKE_MODULE_PATH = " ${CMAKE_MODULE_PATH})
  set(PROTOBUF_DEPS protobuf)
endif()

# cmake -DENABLE_MYSQL=ON ..
option(ENABLE_MYSQL "ENABLE_MYSQL" ON)
if (ENABLE_MYSQL)
  message(STATUS "> build with mysql lib")
  add_definitions(-DENABLE_MYSQL)
  set(MYSQL_DEPS mysqlclient)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/mysql/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/mysql/lib)
endif()

option(ENABLE_YAML "ENABLE_YAML" ON)
if (ENABLE_YAML)
  message(STATUS "> build with yaml lib")
  add_definitions(-DENABLE_YAML)
  set(YAML_DEPS yaml-cpp)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/yaml-cpp-v0.0.8/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/yaml-cpp-v0.0.8/lib64)
endif()

option(ENABLE_GLOG "ENABLE_GLOG" ON)
if (ENABLE_GLOG)
  message(STATUS "> build with glog lib")
  add_definitions(-DENABLE_GLOG)
  set(GLOG_DEPS glog)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/glog/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/glog/lib64)
endif()

option(ENABLE_BRPC "ENABLE_BRPC" ON)
if (ENABLE_BRPC)
  message(STATUS "> build with brpc lib")
  add_definitions(-DENABLE_BRPC)
  set(BRPC_DEPS brpc)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/brpc/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/brpc/lib)
endif()

option(ENABLE_GFLAGS "ENABLE_GFLAGS" ON)
if (ENABLE_GFLAGS)
  message(STATUS "> build with gflags lib")
  add_definitions(-DENABLE_GFLAGS)
  set(GFLAGS_DEPS gflags)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/gflags/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/gflags/lib)
endif()

option(ENABLE_LEVELDB "ENABLE_LEVELDB" ON)
if (ENABLE_LEVELDB)
  message(STATUS "> build with leveldb lib")
  add_definitions(-DENABLE_GFLAGS)
  set(LEVELDB_DEPS leveldb)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/leveldb/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/leveldb/lib)
endif()

option(ENABLE_OPENTELEMETRY "ENABLE_OPENTELEMETRY" ON)
if (ENABLE_OPENTELEMETRY)
  message(STATUS "> build with opentelemetry lib")
  add_definitions(-DENABLE_OPENTELEMETRY)
  set(OPENTELEMETRY_DEPS opentelemetry_common)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/opentelemetry/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/opentelemetry/lib64)
endif()

option(ENABLE_CURL "ENABLE_CURL" ON)
if (ENABLE_CURL)
  message(STATUS "> build with curl lib")
  add_definitions(-DENABLE_CURL)
  set(CURL_DEPS curl)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/curl/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/curl/lib)
endif()

option(ENABLE_GRPC "ENABLE_GRPC" ON)
if (ENABLE_GRPC)
  message(STATUS "> build with grpc lib")
  add_definitions(-DENABLE_GRPC)
  set(GRPC_DEPS grpc++ grpc grpc++_reflection)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/grpc/include)
  link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/grpc/lib)
endif()
