// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/file-transfer/ft.proto

#include "pkg/file-transfer/ft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pkg_2ffile_2dtransfer_2fft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ft_pkg_2ffile_2dtransfer_2fft_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pkg_2ffile_2dtransfer_2fft_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ft_Proxy_pkg_2ffile_2dtransfer_2fft_2eproto;
namespace go {
namespace pkg {
namespace filetransfer {
class FtConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FtConfig> _instance;
} _FtConfig_default_instance_;
class Ft_ProxyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ft_Proxy> _instance;
} _Ft_Proxy_default_instance_;
class FtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ft> _instance;
} _Ft_default_instance_;
}  // namespace filetransfer
}  // namespace pkg
}  // namespace go
static void InitDefaultsscc_info_Ft_pkg_2ffile_2dtransfer_2fft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::filetransfer::_Ft_default_instance_;
    new (ptr) ::go::pkg::filetransfer::Ft();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::filetransfer::Ft::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Ft_pkg_2ffile_2dtransfer_2fft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Ft_pkg_2ffile_2dtransfer_2fft_2eproto}, {
      &scc_info_Ft_Proxy_pkg_2ffile_2dtransfer_2fft_2eproto.base,}};

static void InitDefaultsscc_info_Ft_Proxy_pkg_2ffile_2dtransfer_2fft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::filetransfer::_Ft_Proxy_default_instance_;
    new (ptr) ::go::pkg::filetransfer::Ft_Proxy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::filetransfer::Ft_Proxy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ft_Proxy_pkg_2ffile_2dtransfer_2fft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ft_Proxy_pkg_2ffile_2dtransfer_2fft_2eproto}, {}};

static void InitDefaultsscc_info_FtConfig_pkg_2ffile_2dtransfer_2fft_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::filetransfer::_FtConfig_default_instance_;
    new (ptr) ::go::pkg::filetransfer::FtConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::filetransfer::FtConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FtConfig_pkg_2ffile_2dtransfer_2fft_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FtConfig_pkg_2ffile_2dtransfer_2fft_2eproto}, {
      &scc_info_Ft_pkg_2ffile_2dtransfer_2fft_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pkg_2ffile_2dtransfer_2fft_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pkg_2ffile_2dtransfer_2fft_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pkg_2ffile_2dtransfer_2fft_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pkg_2ffile_2dtransfer_2fft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::FtConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::FtConfig, filetransfer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft_Proxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft_Proxy, target_host_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft_Proxy, proxy_url_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft_Proxy, proxy_host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft, enabled_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft, download_timeout_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft, upload_timeout_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft, retry_times_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft, retry_interval_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft, load_balance_mode_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::filetransfer::Ft, proxies_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::pkg::filetransfer::FtConfig)},
  { 6, -1, sizeof(::go::pkg::filetransfer::Ft_Proxy)},
  { 14, -1, sizeof(::go::pkg::filetransfer::Ft)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::filetransfer::_FtConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::filetransfer::_Ft_Proxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::filetransfer::_Ft_default_instance_),
};

const char descriptor_table_protodef_pkg_2ffile_2dtransfer_2fft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032pkg/file-transfer/ft.proto\022\023go.pkg.fil"
  "etransfer\032\036google/protobuf/duration.prot"
  "o\"9\n\010FtConfig\022-\n\014filetransfer\030\001 \001(\0132\027.go"
  ".pkg.filetransfer.Ft\"\373\002\n\002Ft\022\017\n\007enabled\030\001"
  " \001(\010\022\030\n\020download_timeout\030\002 \001(\003\022\026\n\016upload"
  "_timeout\030\003 \001(\003\022\023\n\013retry_times\030\004 \001(\r\022\026\n\016r"
  "etry_interval\030\005 \001(\003\022B\n\021load_balance_mode"
  "\030\n \001(\0162\'.go.pkg.filetransfer.Ft.LoadBala"
  "nceMode\022.\n\007proxies\030\013 \003(\0132\035.go.pkg.filetr"
  "ansfer.Ft.Proxy\032C\n\005Proxy\022\023\n\013target_host\030"
  "\001 \001(\t\022\021\n\tproxy_url\030\002 \001(\t\022\022\n\nproxy_host\030\003"
  " \001(\t\"L\n\017LoadBalanceMode\022\033\n\027load_balance_"
  "mode_first\020\000\022\034\n\030load_balance_mode_random"
  "\020\001B4Z2github.com/kaydxh/go.pkg.filetrans"
  "fer;filetransferb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto_sccs[3] = {
  &scc_info_Ft_pkg_2ffile_2dtransfer_2fft_2eproto.base,
  &scc_info_Ft_Proxy_pkg_2ffile_2dtransfer_2fft_2eproto.base,
  &scc_info_FtConfig_pkg_2ffile_2dtransfer_2fft_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto = {
  false, false, descriptor_table_protodef_pkg_2ffile_2dtransfer_2fft_2eproto, "pkg/file-transfer/ft.proto", 584,
  &descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto_once, descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto_sccs, descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_pkg_2ffile_2dtransfer_2fft_2eproto::offsets,
  file_level_metadata_pkg_2ffile_2dtransfer_2fft_2eproto, 3, file_level_enum_descriptors_pkg_2ffile_2dtransfer_2fft_2eproto, file_level_service_descriptors_pkg_2ffile_2dtransfer_2fft_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pkg_2ffile_2dtransfer_2fft_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto)), true);
namespace go {
namespace pkg {
namespace filetransfer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ft_LoadBalanceMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto);
  return file_level_enum_descriptors_pkg_2ffile_2dtransfer_2fft_2eproto[0];
}
bool Ft_LoadBalanceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Ft_LoadBalanceMode Ft::load_balance_mode_first;
constexpr Ft_LoadBalanceMode Ft::load_balance_mode_random;
constexpr Ft_LoadBalanceMode Ft::LoadBalanceMode_MIN;
constexpr Ft_LoadBalanceMode Ft::LoadBalanceMode_MAX;
constexpr int Ft::LoadBalanceMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FtConfig::InitAsDefaultInstance() {
  ::go::pkg::filetransfer::_FtConfig_default_instance_._instance.get_mutable()->filetransfer_ = const_cast< ::go::pkg::filetransfer::Ft*>(
      ::go::pkg::filetransfer::Ft::internal_default_instance());
}
class FtConfig::_Internal {
 public:
  static const ::go::pkg::filetransfer::Ft& filetransfer(const FtConfig* msg);
};

const ::go::pkg::filetransfer::Ft&
FtConfig::_Internal::filetransfer(const FtConfig* msg) {
  return *msg->filetransfer_;
}
FtConfig::FtConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.filetransfer.FtConfig)
}
FtConfig::FtConfig(const FtConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filetransfer()) {
    filetransfer_ = new ::go::pkg::filetransfer::Ft(*from.filetransfer_);
  } else {
    filetransfer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:go.pkg.filetransfer.FtConfig)
}

void FtConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FtConfig_pkg_2ffile_2dtransfer_2fft_2eproto.base);
  filetransfer_ = nullptr;
}

FtConfig::~FtConfig() {
  // @@protoc_insertion_point(destructor:go.pkg.filetransfer.FtConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FtConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filetransfer_;
}

void FtConfig::ArenaDtor(void* object) {
  FtConfig* _this = reinterpret_cast< FtConfig* >(object);
  (void)_this;
}
void FtConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FtConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FtConfig& FtConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FtConfig_pkg_2ffile_2dtransfer_2fft_2eproto.base);
  return *internal_default_instance();
}


void FtConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.filetransfer.FtConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && filetransfer_ != nullptr) {
    delete filetransfer_;
  }
  filetransfer_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .go.pkg.filetransfer.Ft filetransfer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filetransfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FtConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.filetransfer.FtConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.pkg.filetransfer.Ft filetransfer = 1;
  if (this->has_filetransfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::filetransfer(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.filetransfer.FtConfig)
  return target;
}

size_t FtConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.filetransfer.FtConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .go.pkg.filetransfer.Ft filetransfer = 1;
  if (this->has_filetransfer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filetransfer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.filetransfer.FtConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FtConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FtConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.filetransfer.FtConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.filetransfer.FtConfig)
    MergeFrom(*source);
  }
}

void FtConfig::MergeFrom(const FtConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.filetransfer.FtConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filetransfer()) {
    _internal_mutable_filetransfer()->::go::pkg::filetransfer::Ft::MergeFrom(from._internal_filetransfer());
  }
}

void FtConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.filetransfer.FtConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FtConfig::CopyFrom(const FtConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.filetransfer.FtConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtConfig::IsInitialized() const {
  return true;
}

void FtConfig::InternalSwap(FtConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(filetransfer_, other->filetransfer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FtConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ft_Proxy::InitAsDefaultInstance() {
}
class Ft_Proxy::_Internal {
 public:
};

Ft_Proxy::Ft_Proxy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.filetransfer.Ft.Proxy)
}
Ft_Proxy::Ft_Proxy(const Ft_Proxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_host().empty()) {
    target_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_host(),
      GetArena());
  }
  proxy_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proxy_url().empty()) {
    proxy_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proxy_url(),
      GetArena());
  }
  proxy_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proxy_host().empty()) {
    proxy_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proxy_host(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:go.pkg.filetransfer.Ft.Proxy)
}

void Ft_Proxy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ft_Proxy_pkg_2ffile_2dtransfer_2fft_2eproto.base);
  target_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Ft_Proxy::~Ft_Proxy() {
  // @@protoc_insertion_point(destructor:go.pkg.filetransfer.Ft.Proxy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ft_Proxy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proxy_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ft_Proxy::ArenaDtor(void* object) {
  Ft_Proxy* _this = reinterpret_cast< Ft_Proxy* >(object);
  (void)_this;
}
void Ft_Proxy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ft_Proxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ft_Proxy& Ft_Proxy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ft_Proxy_pkg_2ffile_2dtransfer_2fft_2eproto.base);
  return *internal_default_instance();
}


void Ft_Proxy::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.filetransfer.Ft.Proxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proxy_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proxy_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ft_Proxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target_host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "go.pkg.filetransfer.Ft.Proxy.target_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proxy_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proxy_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "go.pkg.filetransfer.Ft.Proxy.proxy_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proxy_host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_proxy_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "go.pkg.filetransfer.Ft.Proxy.proxy_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ft_Proxy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.filetransfer.Ft.Proxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_host = 1;
  if (this->target_host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_host().data(), static_cast<int>(this->_internal_target_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.target_host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target_host(), target);
  }

  // string proxy_url = 2;
  if (this->proxy_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxy_url().data(), static_cast<int>(this->_internal_proxy_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.proxy_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proxy_url(), target);
  }

  // string proxy_host = 3;
  if (this->proxy_host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxy_host().data(), static_cast<int>(this->_internal_proxy_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.proxy_host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proxy_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.filetransfer.Ft.Proxy)
  return target;
}

size_t Ft_Proxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.filetransfer.Ft.Proxy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_host = 1;
  if (this->target_host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_host());
  }

  // string proxy_url = 2;
  if (this->proxy_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxy_url());
  }

  // string proxy_host = 3;
  if (this->proxy_host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxy_host());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ft_Proxy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.filetransfer.Ft.Proxy)
  GOOGLE_DCHECK_NE(&from, this);
  const Ft_Proxy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ft_Proxy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.filetransfer.Ft.Proxy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.filetransfer.Ft.Proxy)
    MergeFrom(*source);
  }
}

void Ft_Proxy::MergeFrom(const Ft_Proxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.filetransfer.Ft.Proxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_host().size() > 0) {
    _internal_set_target_host(from._internal_target_host());
  }
  if (from.proxy_url().size() > 0) {
    _internal_set_proxy_url(from._internal_proxy_url());
  }
  if (from.proxy_host().size() > 0) {
    _internal_set_proxy_host(from._internal_proxy_host());
  }
}

void Ft_Proxy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.filetransfer.Ft.Proxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ft_Proxy::CopyFrom(const Ft_Proxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.filetransfer.Ft.Proxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ft_Proxy::IsInitialized() const {
  return true;
}

void Ft_Proxy::InternalSwap(Ft_Proxy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_host_.Swap(&other->target_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proxy_url_.Swap(&other->proxy_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proxy_host_.Swap(&other->proxy_host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Ft_Proxy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ft::InitAsDefaultInstance() {
}
class Ft::_Internal {
 public:
};

Ft::Ft(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proxies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.filetransfer.Ft)
}
Ft::Ft(const Ft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proxies_(from.proxies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&download_timeout_, &from.download_timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&load_balance_mode_) -
    reinterpret_cast<char*>(&download_timeout_)) + sizeof(load_balance_mode_));
  // @@protoc_insertion_point(copy_constructor:go.pkg.filetransfer.Ft)
}

void Ft::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ft_pkg_2ffile_2dtransfer_2fft_2eproto.base);
  ::memset(&download_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_balance_mode_) -
      reinterpret_cast<char*>(&download_timeout_)) + sizeof(load_balance_mode_));
}

Ft::~Ft() {
  // @@protoc_insertion_point(destructor:go.pkg.filetransfer.Ft)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ft::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ft::ArenaDtor(void* object) {
  Ft* _this = reinterpret_cast< Ft* >(object);
  (void)_this;
}
void Ft::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ft& Ft::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ft_pkg_2ffile_2dtransfer_2fft_2eproto.base);
  return *internal_default_instance();
}


void Ft::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.filetransfer.Ft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proxies_.Clear();
  ::memset(&download_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_balance_mode_) -
      reinterpret_cast<char*>(&download_timeout_)) + sizeof(load_balance_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ft::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 download_timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          download_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 upload_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          upload_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 retry_times = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          retry_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 retry_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          retry_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_load_balance_mode(static_cast<::go::pkg::filetransfer::Ft_LoadBalanceMode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proxies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ft::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.filetransfer.Ft)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // int64 download_timeout = 2;
  if (this->download_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_download_timeout(), target);
  }

  // int64 upload_timeout = 3;
  if (this->upload_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_upload_timeout(), target);
  }

  // uint32 retry_times = 4;
  if (this->retry_times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_retry_times(), target);
  }

  // int64 retry_interval = 5;
  if (this->retry_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_retry_interval(), target);
  }

  // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
  if (this->load_balance_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_load_balance_mode(), target);
  }

  // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proxies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_proxies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.filetransfer.Ft)
  return target;
}

size_t Ft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.filetransfer.Ft)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
  total_size += 1UL * this->_internal_proxies_size();
  for (const auto& msg : this->proxies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 download_timeout = 2;
  if (this->download_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_download_timeout());
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 retry_times = 4;
  if (this->retry_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retry_times());
  }

  // int64 upload_timeout = 3;
  if (this->upload_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upload_timeout());
  }

  // int64 retry_interval = 5;
  if (this->retry_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_retry_interval());
  }

  // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
  if (this->load_balance_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_load_balance_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ft::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.filetransfer.Ft)
  GOOGLE_DCHECK_NE(&from, this);
  const Ft* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ft>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.filetransfer.Ft)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.filetransfer.Ft)
    MergeFrom(*source);
  }
}

void Ft::MergeFrom(const Ft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.filetransfer.Ft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proxies_.MergeFrom(from.proxies_);
  if (from.download_timeout() != 0) {
    _internal_set_download_timeout(from._internal_download_timeout());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.retry_times() != 0) {
    _internal_set_retry_times(from._internal_retry_times());
  }
  if (from.upload_timeout() != 0) {
    _internal_set_upload_timeout(from._internal_upload_timeout());
  }
  if (from.retry_interval() != 0) {
    _internal_set_retry_interval(from._internal_retry_interval());
  }
  if (from.load_balance_mode() != 0) {
    _internal_set_load_balance_mode(from._internal_load_balance_mode());
  }
}

void Ft::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.filetransfer.Ft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ft::CopyFrom(const Ft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.filetransfer.Ft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ft::IsInitialized() const {
  return true;
}

void Ft::InternalSwap(Ft* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proxies_.InternalSwap(&other->proxies_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ft, load_balance_mode_)
      + sizeof(Ft::load_balance_mode_)
      - PROTOBUF_FIELD_OFFSET(Ft, download_timeout_)>(
          reinterpret_cast<char*>(&download_timeout_),
          reinterpret_cast<char*>(&other->download_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ft::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace filetransfer
}  // namespace pkg
}  // namespace go
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::go::pkg::filetransfer::FtConfig* Arena::CreateMaybeMessage< ::go::pkg::filetransfer::FtConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::filetransfer::FtConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::filetransfer::Ft_Proxy* Arena::CreateMaybeMessage< ::go::pkg::filetransfer::Ft_Proxy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::filetransfer::Ft_Proxy >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::filetransfer::Ft* Arena::CreateMaybeMessage< ::go::pkg::filetransfer::Ft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::filetransfer::Ft >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
