// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/file-transfer/ft.proto

#include "pkg/file-transfer/ft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_pkg_2ffile_2dtransfer_2fft_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pkg_2ffile_2dtransfer_2fft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ft_Proxy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_pkg_2ffile_2dtransfer_2fft_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Ft;
}  // namespace protobuf_pkg_2ffile_2dtransfer_2fft_2eproto
namespace go {
namespace pkg {
namespace filetransfer {
class FtConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FtConfig>
      _instance;
} _FtConfig_default_instance_;
class Ft_ProxyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ft_Proxy>
      _instance;
} _Ft_Proxy_default_instance_;
class FtDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ft>
      _instance;
} _Ft_default_instance_;
}  // namespace filetransfer
}  // namespace pkg
}  // namespace go
namespace protobuf_pkg_2ffile_2dtransfer_2fft_2eproto {
static void InitDefaultsFtConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::filetransfer::_FtConfig_default_instance_;
    new (ptr) ::go::pkg::filetransfer::FtConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::filetransfer::FtConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FtConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFtConfig}, {
      &protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::scc_info_Ft.base,}};

static void InitDefaultsFt_Proxy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::filetransfer::_Ft_Proxy_default_instance_;
    new (ptr) ::go::pkg::filetransfer::Ft_Proxy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::filetransfer::Ft_Proxy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ft_Proxy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFt_Proxy}, {}};

static void InitDefaultsFt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::filetransfer::_Ft_default_instance_;
    new (ptr) ::go::pkg::filetransfer::Ft();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::filetransfer::Ft::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Ft =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFt}, {
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::scc_info_Ft_Proxy.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FtConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ft_Proxy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ft.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::FtConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::FtConfig, ft_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft_Proxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft_Proxy, target_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft_Proxy, proxy_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft_Proxy, proxy_host_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft, download_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft, upload_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft, retry_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft, retry_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft, load_balance_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::go::pkg::filetransfer::Ft, proxies_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::pkg::filetransfer::FtConfig)},
  { 6, -1, sizeof(::go::pkg::filetransfer::Ft_Proxy)},
  { 14, -1, sizeof(::go::pkg::filetransfer::Ft)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::pkg::filetransfer::_FtConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::pkg::filetransfer::_Ft_Proxy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::go::pkg::filetransfer::_Ft_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "pkg/file-transfer/ft.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032pkg/file-transfer/ft.proto\022\023go.pkg.fil"
      "etransfer\032\036google/protobuf/duration.prot"
      "o\"/\n\010FtConfig\022#\n\002ft\030\001 \001(\0132\027.go.pkg.filet"
      "ransfer.Ft\"\314\003\n\002Ft\022\017\n\007enabled\030\001 \001(\010\0223\n\020do"
      "wnload_timeout\030\002 \001(\0132\031.google.protobuf.D"
      "uration\0221\n\016upload_timeout\030\003 \001(\0132\031.google"
      ".protobuf.Duration\022\023\n\013retry_times\030\004 \001(\r\022"
      "1\n\016retry_interval\030\005 \001(\0132\031.google.protobu"
      "f.Duration\022B\n\021load_balance_mode\030\n \001(\0162\'."
      "go.pkg.filetransfer.Ft.LoadBalanceMode\022."
      "\n\007proxies\030\013 \003(\0132\035.go.pkg.filetransfer.Ft"
      ".Proxy\032C\n\005Proxy\022\023\n\013target_host\030\001 \001(\t\022\021\n\t"
      "proxy_url\030\002 \001(\t\022\022\n\nproxy_host\030\003 \001(\t\"L\n\017L"
      "oadBalanceMode\022\033\n\027load_balance_mode_firs"
      "t\020\000\022\034\n\030load_balance_mode_random\020\001B4Z2git"
      "hub.com/kaydxh/go.pkg.filetransfer;filet"
      "ransferb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pkg/file-transfer/ft.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pkg_2ffile_2dtransfer_2fft_2eproto
namespace go {
namespace pkg {
namespace filetransfer {
const ::google::protobuf::EnumDescriptor* Ft_LoadBalanceMode_descriptor() {
  protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::file_level_enum_descriptors[0];
}
bool Ft_LoadBalanceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ft_LoadBalanceMode Ft::load_balance_mode_first;
const Ft_LoadBalanceMode Ft::load_balance_mode_random;
const Ft_LoadBalanceMode Ft::LoadBalanceMode_MIN;
const Ft_LoadBalanceMode Ft::LoadBalanceMode_MAX;
const int Ft::LoadBalanceMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void FtConfig::InitAsDefaultInstance() {
  ::go::pkg::filetransfer::_FtConfig_default_instance_._instance.get_mutable()->ft_ = const_cast< ::go::pkg::filetransfer::Ft*>(
      ::go::pkg::filetransfer::Ft::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FtConfig::kFtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FtConfig::FtConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::scc_info_FtConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.pkg.filetransfer.FtConfig)
}
FtConfig::FtConfig(const FtConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ft()) {
    ft_ = new ::go::pkg::filetransfer::Ft(*from.ft_);
  } else {
    ft_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:go.pkg.filetransfer.FtConfig)
}

void FtConfig::SharedCtor() {
  ft_ = NULL;
}

FtConfig::~FtConfig() {
  // @@protoc_insertion_point(destructor:go.pkg.filetransfer.FtConfig)
  SharedDtor();
}

void FtConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ft_;
}

void FtConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FtConfig::descriptor() {
  ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FtConfig& FtConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::scc_info_FtConfig.base);
  return *internal_default_instance();
}


void FtConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.filetransfer.FtConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ft_ != NULL) {
    delete ft_;
  }
  ft_ = NULL;
  _internal_metadata_.Clear();
}

bool FtConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.pkg.filetransfer.FtConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .go.pkg.filetransfer.Ft ft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.pkg.filetransfer.FtConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.pkg.filetransfer.FtConfig)
  return false;
#undef DO_
}

void FtConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.pkg.filetransfer.FtConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.pkg.filetransfer.Ft ft = 1;
  if (this->has_ft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_ft(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:go.pkg.filetransfer.FtConfig)
}

::google::protobuf::uint8* FtConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.filetransfer.FtConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.pkg.filetransfer.Ft ft = 1;
  if (this->has_ft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_ft(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.filetransfer.FtConfig)
  return target;
}

size_t FtConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.filetransfer.FtConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .go.pkg.filetransfer.Ft ft = 1;
  if (this->has_ft()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ft_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FtConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.filetransfer.FtConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FtConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FtConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.filetransfer.FtConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.filetransfer.FtConfig)
    MergeFrom(*source);
  }
}

void FtConfig::MergeFrom(const FtConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.filetransfer.FtConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ft()) {
    mutable_ft()->::go::pkg::filetransfer::Ft::MergeFrom(from.ft());
  }
}

void FtConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.filetransfer.FtConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FtConfig::CopyFrom(const FtConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.filetransfer.FtConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtConfig::IsInitialized() const {
  return true;
}

void FtConfig::Swap(FtConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FtConfig::InternalSwap(FtConfig* other) {
  using std::swap;
  swap(ft_, other->ft_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FtConfig::GetMetadata() const {
  protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ft_Proxy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ft_Proxy::kTargetHostFieldNumber;
const int Ft_Proxy::kProxyUrlFieldNumber;
const int Ft_Proxy::kProxyHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ft_Proxy::Ft_Proxy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::scc_info_Ft_Proxy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.pkg.filetransfer.Ft.Proxy)
}
Ft_Proxy::Ft_Proxy(const Ft_Proxy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target_host().size() > 0) {
    target_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_host_);
  }
  proxy_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_url().size() > 0) {
    proxy_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_url_);
  }
  proxy_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proxy_host().size() > 0) {
    proxy_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_host_);
  }
  // @@protoc_insertion_point(copy_constructor:go.pkg.filetransfer.Ft.Proxy)
}

void Ft_Proxy::SharedCtor() {
  target_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Ft_Proxy::~Ft_Proxy() {
  // @@protoc_insertion_point(destructor:go.pkg.filetransfer.Ft.Proxy)
  SharedDtor();
}

void Ft_Proxy::SharedDtor() {
  target_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ft_Proxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ft_Proxy::descriptor() {
  ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ft_Proxy& Ft_Proxy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::scc_info_Ft_Proxy.base);
  return *internal_default_instance();
}


void Ft_Proxy::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.filetransfer.Ft.Proxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Ft_Proxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.pkg.filetransfer.Ft.Proxy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string target_host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_host().data(), static_cast<int>(this->target_host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.pkg.filetransfer.Ft.Proxy.target_host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_url().data(), static_cast<int>(this->proxy_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.pkg.filetransfer.Ft.Proxy.proxy_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proxy_host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proxy_host().data(), static_cast<int>(this->proxy_host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "go.pkg.filetransfer.Ft.Proxy.proxy_host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.pkg.filetransfer.Ft.Proxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.pkg.filetransfer.Ft.Proxy)
  return false;
#undef DO_
}

void Ft_Proxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.pkg.filetransfer.Ft.Proxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_host = 1;
  if (this->target_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_host().data(), static_cast<int>(this->target_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.target_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_host(), output);
  }

  // string proxy_url = 2;
  if (this->proxy_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_url().data(), static_cast<int>(this->proxy_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.proxy_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proxy_url(), output);
  }

  // string proxy_host = 3;
  if (this->proxy_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_host().data(), static_cast<int>(this->proxy_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.proxy_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proxy_host(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:go.pkg.filetransfer.Ft.Proxy)
}

::google::protobuf::uint8* Ft_Proxy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.filetransfer.Ft.Proxy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_host = 1;
  if (this->target_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_host().data(), static_cast<int>(this->target_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.target_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_host(), target);
  }

  // string proxy_url = 2;
  if (this->proxy_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_url().data(), static_cast<int>(this->proxy_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.proxy_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proxy_url(), target);
  }

  // string proxy_host = 3;
  if (this->proxy_host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proxy_host().data(), static_cast<int>(this->proxy_host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "go.pkg.filetransfer.Ft.Proxy.proxy_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proxy_host(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.filetransfer.Ft.Proxy)
  return target;
}

size_t Ft_Proxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.filetransfer.Ft.Proxy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string target_host = 1;
  if (this->target_host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_host());
  }

  // string proxy_url = 2;
  if (this->proxy_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_url());
  }

  // string proxy_host = 3;
  if (this->proxy_host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ft_Proxy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.filetransfer.Ft.Proxy)
  GOOGLE_DCHECK_NE(&from, this);
  const Ft_Proxy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ft_Proxy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.filetransfer.Ft.Proxy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.filetransfer.Ft.Proxy)
    MergeFrom(*source);
  }
}

void Ft_Proxy::MergeFrom(const Ft_Proxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.filetransfer.Ft.Proxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_host().size() > 0) {

    target_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_host_);
  }
  if (from.proxy_url().size() > 0) {

    proxy_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_url_);
  }
  if (from.proxy_host().size() > 0) {

    proxy_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_host_);
  }
}

void Ft_Proxy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.filetransfer.Ft.Proxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ft_Proxy::CopyFrom(const Ft_Proxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.filetransfer.Ft.Proxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ft_Proxy::IsInitialized() const {
  return true;
}

void Ft_Proxy::Swap(Ft_Proxy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ft_Proxy::InternalSwap(Ft_Proxy* other) {
  using std::swap;
  target_host_.Swap(&other->target_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_url_.Swap(&other->proxy_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proxy_host_.Swap(&other->proxy_host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ft_Proxy::GetMetadata() const {
  protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ft::InitAsDefaultInstance() {
  ::go::pkg::filetransfer::_Ft_default_instance_._instance.get_mutable()->download_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::go::pkg::filetransfer::_Ft_default_instance_._instance.get_mutable()->upload_timeout_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::go::pkg::filetransfer::_Ft_default_instance_._instance.get_mutable()->retry_interval_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void Ft::clear_download_timeout() {
  if (GetArenaNoVirtual() == NULL && download_timeout_ != NULL) {
    delete download_timeout_;
  }
  download_timeout_ = NULL;
}
void Ft::clear_upload_timeout() {
  if (GetArenaNoVirtual() == NULL && upload_timeout_ != NULL) {
    delete upload_timeout_;
  }
  upload_timeout_ = NULL;
}
void Ft::clear_retry_interval() {
  if (GetArenaNoVirtual() == NULL && retry_interval_ != NULL) {
    delete retry_interval_;
  }
  retry_interval_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ft::kEnabledFieldNumber;
const int Ft::kDownloadTimeoutFieldNumber;
const int Ft::kUploadTimeoutFieldNumber;
const int Ft::kRetryTimesFieldNumber;
const int Ft::kRetryIntervalFieldNumber;
const int Ft::kLoadBalanceModeFieldNumber;
const int Ft::kProxiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ft::Ft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::scc_info_Ft.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:go.pkg.filetransfer.Ft)
}
Ft::Ft(const Ft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      proxies_(from.proxies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_download_timeout()) {
    download_timeout_ = new ::google::protobuf::Duration(*from.download_timeout_);
  } else {
    download_timeout_ = NULL;
  }
  if (from.has_upload_timeout()) {
    upload_timeout_ = new ::google::protobuf::Duration(*from.upload_timeout_);
  } else {
    upload_timeout_ = NULL;
  }
  if (from.has_retry_interval()) {
    retry_interval_ = new ::google::protobuf::Duration(*from.retry_interval_);
  } else {
    retry_interval_ = NULL;
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&load_balance_mode_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(load_balance_mode_));
  // @@protoc_insertion_point(copy_constructor:go.pkg.filetransfer.Ft)
}

void Ft::SharedCtor() {
  ::memset(&download_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_balance_mode_) -
      reinterpret_cast<char*>(&download_timeout_)) + sizeof(load_balance_mode_));
}

Ft::~Ft() {
  // @@protoc_insertion_point(destructor:go.pkg.filetransfer.Ft)
  SharedDtor();
}

void Ft::SharedDtor() {
  if (this != internal_default_instance()) delete download_timeout_;
  if (this != internal_default_instance()) delete upload_timeout_;
  if (this != internal_default_instance()) delete retry_interval_;
}

void Ft::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ft::descriptor() {
  ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ft& Ft::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::scc_info_Ft.base);
  return *internal_default_instance();
}


void Ft::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.filetransfer.Ft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proxies_.Clear();
  if (GetArenaNoVirtual() == NULL && download_timeout_ != NULL) {
    delete download_timeout_;
  }
  download_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && upload_timeout_ != NULL) {
    delete upload_timeout_;
  }
  upload_timeout_ = NULL;
  if (GetArenaNoVirtual() == NULL && retry_interval_ != NULL) {
    delete retry_interval_;
  }
  retry_interval_ = NULL;
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_balance_mode_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(load_balance_mode_));
  _internal_metadata_.Clear();
}

bool Ft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:go.pkg.filetransfer.Ft)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration download_timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_download_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration upload_timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upload_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 retry_times = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retry_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration retry_interval = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_retry_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_load_balance_mode(static_cast< ::go::pkg::filetransfer::Ft_LoadBalanceMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_proxies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:go.pkg.filetransfer.Ft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:go.pkg.filetransfer.Ft)
  return false;
#undef DO_
}

void Ft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:go.pkg.filetransfer.Ft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // .google.protobuf.Duration download_timeout = 2;
  if (this->has_download_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_download_timeout(), output);
  }

  // .google.protobuf.Duration upload_timeout = 3;
  if (this->has_upload_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_upload_timeout(), output);
  }

  // uint32 retry_times = 4;
  if (this->retry_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retry_times(), output);
  }

  // .google.protobuf.Duration retry_interval = 5;
  if (this->has_retry_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_retry_interval(), output);
  }

  // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
  if (this->load_balance_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->load_balance_mode(), output);
  }

  // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proxies_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->proxies(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:go.pkg.filetransfer.Ft)
}

::google::protobuf::uint8* Ft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.filetransfer.Ft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // .google.protobuf.Duration download_timeout = 2;
  if (this->has_download_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_download_timeout(), deterministic, target);
  }

  // .google.protobuf.Duration upload_timeout = 3;
  if (this->has_upload_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_upload_timeout(), deterministic, target);
  }

  // uint32 retry_times = 4;
  if (this->retry_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retry_times(), target);
  }

  // .google.protobuf.Duration retry_interval = 5;
  if (this->has_retry_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_retry_interval(), deterministic, target);
  }

  // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
  if (this->load_balance_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->load_balance_mode(), target);
  }

  // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proxies_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->proxies(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.filetransfer.Ft)
  return target;
}

size_t Ft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.filetransfer.Ft)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->proxies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->proxies(static_cast<int>(i)));
    }
  }

  // .google.protobuf.Duration download_timeout = 2;
  if (this->has_download_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *download_timeout_);
  }

  // .google.protobuf.Duration upload_timeout = 3;
  if (this->has_upload_timeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upload_timeout_);
  }

  // .google.protobuf.Duration retry_interval = 5;
  if (this->has_retry_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *retry_interval_);
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 retry_times = 4;
  if (this->retry_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->retry_times());
  }

  // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
  if (this->load_balance_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->load_balance_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.filetransfer.Ft)
  GOOGLE_DCHECK_NE(&from, this);
  const Ft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.filetransfer.Ft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.filetransfer.Ft)
    MergeFrom(*source);
  }
}

void Ft::MergeFrom(const Ft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.filetransfer.Ft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proxies_.MergeFrom(from.proxies_);
  if (from.has_download_timeout()) {
    mutable_download_timeout()->::google::protobuf::Duration::MergeFrom(from.download_timeout());
  }
  if (from.has_upload_timeout()) {
    mutable_upload_timeout()->::google::protobuf::Duration::MergeFrom(from.upload_timeout());
  }
  if (from.has_retry_interval()) {
    mutable_retry_interval()->::google::protobuf::Duration::MergeFrom(from.retry_interval());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.retry_times() != 0) {
    set_retry_times(from.retry_times());
  }
  if (from.load_balance_mode() != 0) {
    set_load_balance_mode(from.load_balance_mode());
  }
}

void Ft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.filetransfer.Ft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ft::CopyFrom(const Ft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.filetransfer.Ft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ft::IsInitialized() const {
  return true;
}

void Ft::Swap(Ft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ft::InternalSwap(Ft* other) {
  using std::swap;
  CastToBase(&proxies_)->InternalSwap(CastToBase(&other->proxies_));
  swap(download_timeout_, other->download_timeout_);
  swap(upload_timeout_, other->upload_timeout_);
  swap(retry_interval_, other->retry_interval_);
  swap(enabled_, other->enabled_);
  swap(retry_times_, other->retry_times_);
  swap(load_balance_mode_, other->load_balance_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ft::GetMetadata() const {
  protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace filetransfer
}  // namespace pkg
}  // namespace go
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::go::pkg::filetransfer::FtConfig* Arena::CreateMaybeMessage< ::go::pkg::filetransfer::FtConfig >(Arena* arena) {
  return Arena::CreateInternal< ::go::pkg::filetransfer::FtConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::go::pkg::filetransfer::Ft_Proxy* Arena::CreateMaybeMessage< ::go::pkg::filetransfer::Ft_Proxy >(Arena* arena) {
  return Arena::CreateInternal< ::go::pkg::filetransfer::Ft_Proxy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::go::pkg::filetransfer::Ft* Arena::CreateMaybeMessage< ::go::pkg::filetransfer::Ft >(Arena* arena) {
  return Arena::CreateInternal< ::go::pkg::filetransfer::Ft >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
