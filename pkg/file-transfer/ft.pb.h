// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/file-transfer/ft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pkg_2ffile_2dtransfer_2fft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pkg_2ffile_2dtransfer_2fft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pkg_2ffile_2dtransfer_2fft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pkg_2ffile_2dtransfer_2fft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto;
namespace go {
namespace pkg {
namespace filetransfer {
class Ft;
class FtDefaultTypeInternal;
extern FtDefaultTypeInternal _Ft_default_instance_;
class FtConfig;
class FtConfigDefaultTypeInternal;
extern FtConfigDefaultTypeInternal _FtConfig_default_instance_;
class Ft_Proxy;
class Ft_ProxyDefaultTypeInternal;
extern Ft_ProxyDefaultTypeInternal _Ft_Proxy_default_instance_;
}  // namespace filetransfer
}  // namespace pkg
}  // namespace go
PROTOBUF_NAMESPACE_OPEN
template<> ::go::pkg::filetransfer::Ft* Arena::CreateMaybeMessage<::go::pkg::filetransfer::Ft>(Arena*);
template<> ::go::pkg::filetransfer::FtConfig* Arena::CreateMaybeMessage<::go::pkg::filetransfer::FtConfig>(Arena*);
template<> ::go::pkg::filetransfer::Ft_Proxy* Arena::CreateMaybeMessage<::go::pkg::filetransfer::Ft_Proxy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace go {
namespace pkg {
namespace filetransfer {

enum Ft_LoadBalanceMode : int {
  Ft_LoadBalanceMode_load_balance_mode_first = 0,
  Ft_LoadBalanceMode_load_balance_mode_random = 1,
  Ft_LoadBalanceMode_Ft_LoadBalanceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Ft_LoadBalanceMode_Ft_LoadBalanceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Ft_LoadBalanceMode_IsValid(int value);
constexpr Ft_LoadBalanceMode Ft_LoadBalanceMode_LoadBalanceMode_MIN = Ft_LoadBalanceMode_load_balance_mode_first;
constexpr Ft_LoadBalanceMode Ft_LoadBalanceMode_LoadBalanceMode_MAX = Ft_LoadBalanceMode_load_balance_mode_random;
constexpr int Ft_LoadBalanceMode_LoadBalanceMode_ARRAYSIZE = Ft_LoadBalanceMode_LoadBalanceMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ft_LoadBalanceMode_descriptor();
template<typename T>
inline const std::string& Ft_LoadBalanceMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ft_LoadBalanceMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ft_LoadBalanceMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ft_LoadBalanceMode_descriptor(), enum_t_value);
}
inline bool Ft_LoadBalanceMode_Parse(
    const std::string& name, Ft_LoadBalanceMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ft_LoadBalanceMode>(
    Ft_LoadBalanceMode_descriptor(), name, value);
}
// ===================================================================

class FtConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:go.pkg.filetransfer.FtConfig) */ {
 public:
  inline FtConfig() : FtConfig(nullptr) {};
  virtual ~FtConfig();

  FtConfig(const FtConfig& from);
  FtConfig(FtConfig&& from) noexcept
    : FtConfig() {
    *this = ::std::move(from);
  }

  inline FtConfig& operator=(const FtConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtConfig& operator=(FtConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FtConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtConfig* internal_default_instance() {
    return reinterpret_cast<const FtConfig*>(
               &_FtConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FtConfig& a, FtConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FtConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FtConfig* New() const final {
    return CreateMaybeMessage<FtConfig>(nullptr);
  }

  FtConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FtConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FtConfig& from);
  void MergeFrom(const FtConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "go.pkg.filetransfer.FtConfig";
  }
  protected:
  explicit FtConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto);
    return ::descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiletransferFieldNumber = 1,
  };
  // .go.pkg.filetransfer.Ft filetransfer = 1;
  bool has_filetransfer() const;
  private:
  bool _internal_has_filetransfer() const;
  public:
  void clear_filetransfer();
  const ::go::pkg::filetransfer::Ft& filetransfer() const;
  ::go::pkg::filetransfer::Ft* release_filetransfer();
  ::go::pkg::filetransfer::Ft* mutable_filetransfer();
  void set_allocated_filetransfer(::go::pkg::filetransfer::Ft* filetransfer);
  private:
  const ::go::pkg::filetransfer::Ft& _internal_filetransfer() const;
  ::go::pkg::filetransfer::Ft* _internal_mutable_filetransfer();
  public:
  void unsafe_arena_set_allocated_filetransfer(
      ::go::pkg::filetransfer::Ft* filetransfer);
  ::go::pkg::filetransfer::Ft* unsafe_arena_release_filetransfer();

  // @@protoc_insertion_point(class_scope:go.pkg.filetransfer.FtConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::go::pkg::filetransfer::Ft* filetransfer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2ffile_2dtransfer_2fft_2eproto;
};
// -------------------------------------------------------------------

class Ft_Proxy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:go.pkg.filetransfer.Ft.Proxy) */ {
 public:
  inline Ft_Proxy() : Ft_Proxy(nullptr) {};
  virtual ~Ft_Proxy();

  Ft_Proxy(const Ft_Proxy& from);
  Ft_Proxy(Ft_Proxy&& from) noexcept
    : Ft_Proxy() {
    *this = ::std::move(from);
  }

  inline Ft_Proxy& operator=(const Ft_Proxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ft_Proxy& operator=(Ft_Proxy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ft_Proxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ft_Proxy* internal_default_instance() {
    return reinterpret_cast<const Ft_Proxy*>(
               &_Ft_Proxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ft_Proxy& a, Ft_Proxy& b) {
    a.Swap(&b);
  }
  inline void Swap(Ft_Proxy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ft_Proxy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ft_Proxy* New() const final {
    return CreateMaybeMessage<Ft_Proxy>(nullptr);
  }

  Ft_Proxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ft_Proxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ft_Proxy& from);
  void MergeFrom(const Ft_Proxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ft_Proxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "go.pkg.filetransfer.Ft.Proxy";
  }
  protected:
  explicit Ft_Proxy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto);
    return ::descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetHostFieldNumber = 1,
    kProxyUrlFieldNumber = 2,
    kProxyHostFieldNumber = 3,
  };
  // string target_host = 1;
  void clear_target_host();
  const std::string& target_host() const;
  void set_target_host(const std::string& value);
  void set_target_host(std::string&& value);
  void set_target_host(const char* value);
  void set_target_host(const char* value, size_t size);
  std::string* mutable_target_host();
  std::string* release_target_host();
  void set_allocated_target_host(std::string* target_host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_host(
      std::string* target_host);
  private:
  const std::string& _internal_target_host() const;
  void _internal_set_target_host(const std::string& value);
  std::string* _internal_mutable_target_host();
  public:

  // string proxy_url = 2;
  void clear_proxy_url();
  const std::string& proxy_url() const;
  void set_proxy_url(const std::string& value);
  void set_proxy_url(std::string&& value);
  void set_proxy_url(const char* value);
  void set_proxy_url(const char* value, size_t size);
  std::string* mutable_proxy_url();
  std::string* release_proxy_url();
  void set_allocated_proxy_url(std::string* proxy_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proxy_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proxy_url(
      std::string* proxy_url);
  private:
  const std::string& _internal_proxy_url() const;
  void _internal_set_proxy_url(const std::string& value);
  std::string* _internal_mutable_proxy_url();
  public:

  // string proxy_host = 3;
  void clear_proxy_host();
  const std::string& proxy_host() const;
  void set_proxy_host(const std::string& value);
  void set_proxy_host(std::string&& value);
  void set_proxy_host(const char* value);
  void set_proxy_host(const char* value, size_t size);
  std::string* mutable_proxy_host();
  std::string* release_proxy_host();
  void set_allocated_proxy_host(std::string* proxy_host);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proxy_host();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proxy_host(
      std::string* proxy_host);
  private:
  const std::string& _internal_proxy_host() const;
  void _internal_set_proxy_host(const std::string& value);
  std::string* _internal_mutable_proxy_host();
  public:

  // @@protoc_insertion_point(class_scope:go.pkg.filetransfer.Ft.Proxy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2ffile_2dtransfer_2fft_2eproto;
};
// -------------------------------------------------------------------

class Ft PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:go.pkg.filetransfer.Ft) */ {
 public:
  inline Ft() : Ft(nullptr) {};
  virtual ~Ft();

  Ft(const Ft& from);
  Ft(Ft&& from) noexcept
    : Ft() {
    *this = ::std::move(from);
  }

  inline Ft& operator=(const Ft& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ft& operator=(Ft&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ft* internal_default_instance() {
    return reinterpret_cast<const Ft*>(
               &_Ft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ft& a, Ft& b) {
    a.Swap(&b);
  }
  inline void Swap(Ft* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ft* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ft* New() const final {
    return CreateMaybeMessage<Ft>(nullptr);
  }

  Ft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ft>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ft& from);
  void MergeFrom(const Ft& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "go.pkg.filetransfer.Ft";
  }
  protected:
  explicit Ft(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto);
    return ::descriptor_table_pkg_2ffile_2dtransfer_2fft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Ft_Proxy Proxy;

  typedef Ft_LoadBalanceMode LoadBalanceMode;
  static constexpr LoadBalanceMode load_balance_mode_first =
    Ft_LoadBalanceMode_load_balance_mode_first;
  static constexpr LoadBalanceMode load_balance_mode_random =
    Ft_LoadBalanceMode_load_balance_mode_random;
  static inline bool LoadBalanceMode_IsValid(int value) {
    return Ft_LoadBalanceMode_IsValid(value);
  }
  static constexpr LoadBalanceMode LoadBalanceMode_MIN =
    Ft_LoadBalanceMode_LoadBalanceMode_MIN;
  static constexpr LoadBalanceMode LoadBalanceMode_MAX =
    Ft_LoadBalanceMode_LoadBalanceMode_MAX;
  static constexpr int LoadBalanceMode_ARRAYSIZE =
    Ft_LoadBalanceMode_LoadBalanceMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoadBalanceMode_descriptor() {
    return Ft_LoadBalanceMode_descriptor();
  }
  template<typename T>
  static inline const std::string& LoadBalanceMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoadBalanceMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoadBalanceMode_Name.");
    return Ft_LoadBalanceMode_Name(enum_t_value);
  }
  static inline bool LoadBalanceMode_Parse(const std::string& name,
      LoadBalanceMode* value) {
    return Ft_LoadBalanceMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProxiesFieldNumber = 11,
    kDownloadTimeoutFieldNumber = 2,
    kEnabledFieldNumber = 1,
    kRetryTimesFieldNumber = 4,
    kUploadTimeoutFieldNumber = 3,
    kRetryIntervalFieldNumber = 5,
    kLoadBalanceModeFieldNumber = 10,
  };
  // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
  int proxies_size() const;
  private:
  int _internal_proxies_size() const;
  public:
  void clear_proxies();
  ::go::pkg::filetransfer::Ft_Proxy* mutable_proxies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy >*
      mutable_proxies();
  private:
  const ::go::pkg::filetransfer::Ft_Proxy& _internal_proxies(int index) const;
  ::go::pkg::filetransfer::Ft_Proxy* _internal_add_proxies();
  public:
  const ::go::pkg::filetransfer::Ft_Proxy& proxies(int index) const;
  ::go::pkg::filetransfer::Ft_Proxy* add_proxies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy >&
      proxies() const;

  // int64 download_timeout = 2;
  void clear_download_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 download_timeout() const;
  void set_download_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_download_timeout() const;
  void _internal_set_download_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 retry_times = 4;
  void clear_retry_times();
  ::PROTOBUF_NAMESPACE_ID::uint32 retry_times() const;
  void set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retry_times() const;
  void _internal_set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 upload_timeout = 3;
  void clear_upload_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 upload_timeout() const;
  void set_upload_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upload_timeout() const;
  void _internal_set_upload_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 retry_interval = 5;
  void clear_retry_interval();
  ::PROTOBUF_NAMESPACE_ID::int64 retry_interval() const;
  void set_retry_interval(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_retry_interval() const;
  void _internal_set_retry_interval(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
  void clear_load_balance_mode();
  ::go::pkg::filetransfer::Ft_LoadBalanceMode load_balance_mode() const;
  void set_load_balance_mode(::go::pkg::filetransfer::Ft_LoadBalanceMode value);
  private:
  ::go::pkg::filetransfer::Ft_LoadBalanceMode _internal_load_balance_mode() const;
  void _internal_set_load_balance_mode(::go::pkg::filetransfer::Ft_LoadBalanceMode value);
  public:

  // @@protoc_insertion_point(class_scope:go.pkg.filetransfer.Ft)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy > proxies_;
  ::PROTOBUF_NAMESPACE_ID::int64 download_timeout_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retry_times_;
  ::PROTOBUF_NAMESPACE_ID::int64 upload_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int64 retry_interval_;
  int load_balance_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2ffile_2dtransfer_2fft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FtConfig

// .go.pkg.filetransfer.Ft filetransfer = 1;
inline bool FtConfig::_internal_has_filetransfer() const {
  return this != internal_default_instance() && filetransfer_ != nullptr;
}
inline bool FtConfig::has_filetransfer() const {
  return _internal_has_filetransfer();
}
inline void FtConfig::clear_filetransfer() {
  if (GetArena() == nullptr && filetransfer_ != nullptr) {
    delete filetransfer_;
  }
  filetransfer_ = nullptr;
}
inline const ::go::pkg::filetransfer::Ft& FtConfig::_internal_filetransfer() const {
  const ::go::pkg::filetransfer::Ft* p = filetransfer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::go::pkg::filetransfer::Ft*>(
      &::go::pkg::filetransfer::_Ft_default_instance_);
}
inline const ::go::pkg::filetransfer::Ft& FtConfig::filetransfer() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.FtConfig.filetransfer)
  return _internal_filetransfer();
}
inline void FtConfig::unsafe_arena_set_allocated_filetransfer(
    ::go::pkg::filetransfer::Ft* filetransfer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filetransfer_);
  }
  filetransfer_ = filetransfer;
  if (filetransfer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:go.pkg.filetransfer.FtConfig.filetransfer)
}
inline ::go::pkg::filetransfer::Ft* FtConfig::release_filetransfer() {
  auto temp = unsafe_arena_release_filetransfer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::go::pkg::filetransfer::Ft* FtConfig::unsafe_arena_release_filetransfer() {
  // @@protoc_insertion_point(field_release:go.pkg.filetransfer.FtConfig.filetransfer)
  
  ::go::pkg::filetransfer::Ft* temp = filetransfer_;
  filetransfer_ = nullptr;
  return temp;
}
inline ::go::pkg::filetransfer::Ft* FtConfig::_internal_mutable_filetransfer() {
  
  if (filetransfer_ == nullptr) {
    auto* p = CreateMaybeMessage<::go::pkg::filetransfer::Ft>(GetArena());
    filetransfer_ = p;
  }
  return filetransfer_;
}
inline ::go::pkg::filetransfer::Ft* FtConfig::mutable_filetransfer() {
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.FtConfig.filetransfer)
  return _internal_mutable_filetransfer();
}
inline void FtConfig::set_allocated_filetransfer(::go::pkg::filetransfer::Ft* filetransfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filetransfer_;
  }
  if (filetransfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filetransfer);
    if (message_arena != submessage_arena) {
      filetransfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filetransfer, submessage_arena);
    }
    
  } else {
    
  }
  filetransfer_ = filetransfer;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.filetransfer.FtConfig.filetransfer)
}

// -------------------------------------------------------------------

// Ft_Proxy

// string target_host = 1;
inline void Ft_Proxy::clear_target_host() {
  target_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ft_Proxy::target_host() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.Proxy.target_host)
  return _internal_target_host();
}
inline void Ft_Proxy::set_target_host(const std::string& value) {
  _internal_set_target_host(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.Proxy.target_host)
}
inline std::string* Ft_Proxy::mutable_target_host() {
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.Ft.Proxy.target_host)
  return _internal_mutable_target_host();
}
inline const std::string& Ft_Proxy::_internal_target_host() const {
  return target_host_.Get();
}
inline void Ft_Proxy::_internal_set_target_host(const std::string& value) {
  
  target_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ft_Proxy::set_target_host(std::string&& value) {
  
  target_host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:go.pkg.filetransfer.Ft.Proxy.target_host)
}
inline void Ft_Proxy::set_target_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:go.pkg.filetransfer.Ft.Proxy.target_host)
}
inline void Ft_Proxy::set_target_host(const char* value,
    size_t size) {
  
  target_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:go.pkg.filetransfer.Ft.Proxy.target_host)
}
inline std::string* Ft_Proxy::_internal_mutable_target_host() {
  
  return target_host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ft_Proxy::release_target_host() {
  // @@protoc_insertion_point(field_release:go.pkg.filetransfer.Ft.Proxy.target_host)
  return target_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ft_Proxy::set_allocated_target_host(std::string* target_host) {
  if (target_host != nullptr) {
    
  } else {
    
  }
  target_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:go.pkg.filetransfer.Ft.Proxy.target_host)
}
inline std::string* Ft_Proxy::unsafe_arena_release_target_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:go.pkg.filetransfer.Ft.Proxy.target_host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ft_Proxy::unsafe_arena_set_allocated_target_host(
    std::string* target_host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_host != nullptr) {
    
  } else {
    
  }
  target_host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:go.pkg.filetransfer.Ft.Proxy.target_host)
}

// string proxy_url = 2;
inline void Ft_Proxy::clear_proxy_url() {
  proxy_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ft_Proxy::proxy_url() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.Proxy.proxy_url)
  return _internal_proxy_url();
}
inline void Ft_Proxy::set_proxy_url(const std::string& value) {
  _internal_set_proxy_url(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
inline std::string* Ft_Proxy::mutable_proxy_url() {
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.Ft.Proxy.proxy_url)
  return _internal_mutable_proxy_url();
}
inline const std::string& Ft_Proxy::_internal_proxy_url() const {
  return proxy_url_.Get();
}
inline void Ft_Proxy::_internal_set_proxy_url(const std::string& value) {
  
  proxy_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ft_Proxy::set_proxy_url(std::string&& value) {
  
  proxy_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
inline void Ft_Proxy::set_proxy_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proxy_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
inline void Ft_Proxy::set_proxy_url(const char* value,
    size_t size) {
  
  proxy_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
inline std::string* Ft_Proxy::_internal_mutable_proxy_url() {
  
  return proxy_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ft_Proxy::release_proxy_url() {
  // @@protoc_insertion_point(field_release:go.pkg.filetransfer.Ft.Proxy.proxy_url)
  return proxy_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ft_Proxy::set_allocated_proxy_url(std::string* proxy_url) {
  if (proxy_url != nullptr) {
    
  } else {
    
  }
  proxy_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxy_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
inline std::string* Ft_Proxy::unsafe_arena_release_proxy_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:go.pkg.filetransfer.Ft.Proxy.proxy_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proxy_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ft_Proxy::unsafe_arena_set_allocated_proxy_url(
    std::string* proxy_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proxy_url != nullptr) {
    
  } else {
    
  }
  proxy_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proxy_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}

// string proxy_host = 3;
inline void Ft_Proxy::clear_proxy_host() {
  proxy_host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ft_Proxy::proxy_host() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.Proxy.proxy_host)
  return _internal_proxy_host();
}
inline void Ft_Proxy::set_proxy_host(const std::string& value) {
  _internal_set_proxy_host(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
inline std::string* Ft_Proxy::mutable_proxy_host() {
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.Ft.Proxy.proxy_host)
  return _internal_mutable_proxy_host();
}
inline const std::string& Ft_Proxy::_internal_proxy_host() const {
  return proxy_host_.Get();
}
inline void Ft_Proxy::_internal_set_proxy_host(const std::string& value) {
  
  proxy_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ft_Proxy::set_proxy_host(std::string&& value) {
  
  proxy_host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
inline void Ft_Proxy::set_proxy_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proxy_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
inline void Ft_Proxy::set_proxy_host(const char* value,
    size_t size) {
  
  proxy_host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
inline std::string* Ft_Proxy::_internal_mutable_proxy_host() {
  
  return proxy_host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ft_Proxy::release_proxy_host() {
  // @@protoc_insertion_point(field_release:go.pkg.filetransfer.Ft.Proxy.proxy_host)
  return proxy_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ft_Proxy::set_allocated_proxy_host(std::string* proxy_host) {
  if (proxy_host != nullptr) {
    
  } else {
    
  }
  proxy_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proxy_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
inline std::string* Ft_Proxy::unsafe_arena_release_proxy_host() {
  // @@protoc_insertion_point(field_unsafe_arena_release:go.pkg.filetransfer.Ft.Proxy.proxy_host)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proxy_host_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ft_Proxy::unsafe_arena_set_allocated_proxy_host(
    std::string* proxy_host) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proxy_host != nullptr) {
    
  } else {
    
  }
  proxy_host_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proxy_host, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}

// -------------------------------------------------------------------

// Ft

// bool enabled = 1;
inline void Ft::clear_enabled() {
  enabled_ = false;
}
inline bool Ft::_internal_enabled() const {
  return enabled_;
}
inline bool Ft::enabled() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.enabled)
  return _internal_enabled();
}
inline void Ft::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Ft::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.enabled)
}

// int64 download_timeout = 2;
inline void Ft::clear_download_timeout() {
  download_timeout_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ft::_internal_download_timeout() const {
  return download_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ft::download_timeout() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.download_timeout)
  return _internal_download_timeout();
}
inline void Ft::_internal_set_download_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  download_timeout_ = value;
}
inline void Ft::set_download_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_download_timeout(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.download_timeout)
}

// int64 upload_timeout = 3;
inline void Ft::clear_upload_timeout() {
  upload_timeout_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ft::_internal_upload_timeout() const {
  return upload_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ft::upload_timeout() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.upload_timeout)
  return _internal_upload_timeout();
}
inline void Ft::_internal_set_upload_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upload_timeout_ = value;
}
inline void Ft::set_upload_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upload_timeout(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.upload_timeout)
}

// uint32 retry_times = 4;
inline void Ft::clear_retry_times() {
  retry_times_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ft::_internal_retry_times() const {
  return retry_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ft::retry_times() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.retry_times)
  return _internal_retry_times();
}
inline void Ft::_internal_set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  retry_times_ = value;
}
inline void Ft::set_retry_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retry_times(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.retry_times)
}

// int64 retry_interval = 5;
inline void Ft::clear_retry_interval() {
  retry_interval_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ft::_internal_retry_interval() const {
  return retry_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ft::retry_interval() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.retry_interval)
  return _internal_retry_interval();
}
inline void Ft::_internal_set_retry_interval(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  retry_interval_ = value;
}
inline void Ft::set_retry_interval(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_retry_interval(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.retry_interval)
}

// .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
inline void Ft::clear_load_balance_mode() {
  load_balance_mode_ = 0;
}
inline ::go::pkg::filetransfer::Ft_LoadBalanceMode Ft::_internal_load_balance_mode() const {
  return static_cast< ::go::pkg::filetransfer::Ft_LoadBalanceMode >(load_balance_mode_);
}
inline ::go::pkg::filetransfer::Ft_LoadBalanceMode Ft::load_balance_mode() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.load_balance_mode)
  return _internal_load_balance_mode();
}
inline void Ft::_internal_set_load_balance_mode(::go::pkg::filetransfer::Ft_LoadBalanceMode value) {
  
  load_balance_mode_ = value;
}
inline void Ft::set_load_balance_mode(::go::pkg::filetransfer::Ft_LoadBalanceMode value) {
  _internal_set_load_balance_mode(value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.load_balance_mode)
}

// repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
inline int Ft::_internal_proxies_size() const {
  return proxies_.size();
}
inline int Ft::proxies_size() const {
  return _internal_proxies_size();
}
inline void Ft::clear_proxies() {
  proxies_.Clear();
}
inline ::go::pkg::filetransfer::Ft_Proxy* Ft::mutable_proxies(int index) {
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.Ft.proxies)
  return proxies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy >*
Ft::mutable_proxies() {
  // @@protoc_insertion_point(field_mutable_list:go.pkg.filetransfer.Ft.proxies)
  return &proxies_;
}
inline const ::go::pkg::filetransfer::Ft_Proxy& Ft::_internal_proxies(int index) const {
  return proxies_.Get(index);
}
inline const ::go::pkg::filetransfer::Ft_Proxy& Ft::proxies(int index) const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.proxies)
  return _internal_proxies(index);
}
inline ::go::pkg::filetransfer::Ft_Proxy* Ft::_internal_add_proxies() {
  return proxies_.Add();
}
inline ::go::pkg::filetransfer::Ft_Proxy* Ft::add_proxies() {
  // @@protoc_insertion_point(field_add:go.pkg.filetransfer.Ft.proxies)
  return _internal_add_proxies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy >&
Ft::proxies() const {
  // @@protoc_insertion_point(field_list:go.pkg.filetransfer.Ft.proxies)
  return proxies_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace filetransfer
}  // namespace pkg
}  // namespace go

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::go::pkg::filetransfer::Ft_LoadBalanceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::go::pkg::filetransfer::Ft_LoadBalanceMode>() {
  return ::go::pkg::filetransfer::Ft_LoadBalanceMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pkg_2ffile_2dtransfer_2fft_2eproto
