// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/file-transfer/ft.proto

#ifndef PROTOBUF_INCLUDED_pkg_2ffile_2dtransfer_2fft_2eproto
#define PROTOBUF_INCLUDED_pkg_2ffile_2dtransfer_2fft_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pkg_2ffile_2dtransfer_2fft_2eproto 

namespace protobuf_pkg_2ffile_2dtransfer_2fft_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pkg_2ffile_2dtransfer_2fft_2eproto
namespace go {
namespace pkg {
namespace filetransfer {
class Ft;
class FtDefaultTypeInternal;
extern FtDefaultTypeInternal _Ft_default_instance_;
class FtConfig;
class FtConfigDefaultTypeInternal;
extern FtConfigDefaultTypeInternal _FtConfig_default_instance_;
class Ft_Proxy;
class Ft_ProxyDefaultTypeInternal;
extern Ft_ProxyDefaultTypeInternal _Ft_Proxy_default_instance_;
}  // namespace filetransfer
}  // namespace pkg
}  // namespace go
namespace google {
namespace protobuf {
template<> ::go::pkg::filetransfer::Ft* Arena::CreateMaybeMessage<::go::pkg::filetransfer::Ft>(Arena*);
template<> ::go::pkg::filetransfer::FtConfig* Arena::CreateMaybeMessage<::go::pkg::filetransfer::FtConfig>(Arena*);
template<> ::go::pkg::filetransfer::Ft_Proxy* Arena::CreateMaybeMessage<::go::pkg::filetransfer::Ft_Proxy>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace go {
namespace pkg {
namespace filetransfer {

enum Ft_LoadBalanceMode {
  Ft_LoadBalanceMode_load_balance_mode_first = 0,
  Ft_LoadBalanceMode_load_balance_mode_random = 1,
  Ft_LoadBalanceMode_Ft_LoadBalanceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Ft_LoadBalanceMode_Ft_LoadBalanceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Ft_LoadBalanceMode_IsValid(int value);
const Ft_LoadBalanceMode Ft_LoadBalanceMode_LoadBalanceMode_MIN = Ft_LoadBalanceMode_load_balance_mode_first;
const Ft_LoadBalanceMode Ft_LoadBalanceMode_LoadBalanceMode_MAX = Ft_LoadBalanceMode_load_balance_mode_random;
const int Ft_LoadBalanceMode_LoadBalanceMode_ARRAYSIZE = Ft_LoadBalanceMode_LoadBalanceMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Ft_LoadBalanceMode_descriptor();
inline const ::std::string& Ft_LoadBalanceMode_Name(Ft_LoadBalanceMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Ft_LoadBalanceMode_descriptor(), value);
}
inline bool Ft_LoadBalanceMode_Parse(
    const ::std::string& name, Ft_LoadBalanceMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Ft_LoadBalanceMode>(
    Ft_LoadBalanceMode_descriptor(), name, value);
}
// ===================================================================

class FtConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.filetransfer.FtConfig) */ {
 public:
  FtConfig();
  virtual ~FtConfig();

  FtConfig(const FtConfig& from);

  inline FtConfig& operator=(const FtConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FtConfig(FtConfig&& from) noexcept
    : FtConfig() {
    *this = ::std::move(from);
  }

  inline FtConfig& operator=(FtConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FtConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FtConfig* internal_default_instance() {
    return reinterpret_cast<const FtConfig*>(
               &_FtConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FtConfig* other);
  friend void swap(FtConfig& a, FtConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FtConfig* New() const final {
    return CreateMaybeMessage<FtConfig>(NULL);
  }

  FtConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FtConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FtConfig& from);
  void MergeFrom(const FtConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .go.pkg.filetransfer.Ft filetransfer = 1;
  bool has_filetransfer() const;
  void clear_filetransfer();
  static const int kFiletransferFieldNumber = 1;
  private:
  const ::go::pkg::filetransfer::Ft& _internal_filetransfer() const;
  public:
  const ::go::pkg::filetransfer::Ft& filetransfer() const;
  ::go::pkg::filetransfer::Ft* release_filetransfer();
  ::go::pkg::filetransfer::Ft* mutable_filetransfer();
  void set_allocated_filetransfer(::go::pkg::filetransfer::Ft* filetransfer);

  // @@protoc_insertion_point(class_scope:go.pkg.filetransfer.FtConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::go::pkg::filetransfer::Ft* filetransfer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ft_Proxy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.filetransfer.Ft.Proxy) */ {
 public:
  Ft_Proxy();
  virtual ~Ft_Proxy();

  Ft_Proxy(const Ft_Proxy& from);

  inline Ft_Proxy& operator=(const Ft_Proxy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ft_Proxy(Ft_Proxy&& from) noexcept
    : Ft_Proxy() {
    *this = ::std::move(from);
  }

  inline Ft_Proxy& operator=(Ft_Proxy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ft_Proxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ft_Proxy* internal_default_instance() {
    return reinterpret_cast<const Ft_Proxy*>(
               &_Ft_Proxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Ft_Proxy* other);
  friend void swap(Ft_Proxy& a, Ft_Proxy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ft_Proxy* New() const final {
    return CreateMaybeMessage<Ft_Proxy>(NULL);
  }

  Ft_Proxy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ft_Proxy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ft_Proxy& from);
  void MergeFrom(const Ft_Proxy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ft_Proxy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string target_host = 1;
  void clear_target_host();
  static const int kTargetHostFieldNumber = 1;
  const ::std::string& target_host() const;
  void set_target_host(const ::std::string& value);
  #if LANG_CXX11
  void set_target_host(::std::string&& value);
  #endif
  void set_target_host(const char* value);
  void set_target_host(const char* value, size_t size);
  ::std::string* mutable_target_host();
  ::std::string* release_target_host();
  void set_allocated_target_host(::std::string* target_host);

  // string proxy_url = 2;
  void clear_proxy_url();
  static const int kProxyUrlFieldNumber = 2;
  const ::std::string& proxy_url() const;
  void set_proxy_url(const ::std::string& value);
  #if LANG_CXX11
  void set_proxy_url(::std::string&& value);
  #endif
  void set_proxy_url(const char* value);
  void set_proxy_url(const char* value, size_t size);
  ::std::string* mutable_proxy_url();
  ::std::string* release_proxy_url();
  void set_allocated_proxy_url(::std::string* proxy_url);

  // string proxy_host = 3;
  void clear_proxy_host();
  static const int kProxyHostFieldNumber = 3;
  const ::std::string& proxy_host() const;
  void set_proxy_host(const ::std::string& value);
  #if LANG_CXX11
  void set_proxy_host(::std::string&& value);
  #endif
  void set_proxy_host(const char* value);
  void set_proxy_host(const char* value, size_t size);
  ::std::string* mutable_proxy_host();
  ::std::string* release_proxy_host();
  void set_allocated_proxy_host(::std::string* proxy_host);

  // @@protoc_insertion_point(class_scope:go.pkg.filetransfer.Ft.Proxy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr target_host_;
  ::google::protobuf::internal::ArenaStringPtr proxy_url_;
  ::google::protobuf::internal::ArenaStringPtr proxy_host_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:go.pkg.filetransfer.Ft) */ {
 public:
  Ft();
  virtual ~Ft();

  Ft(const Ft& from);

  inline Ft& operator=(const Ft& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ft(Ft&& from) noexcept
    : Ft() {
    *this = ::std::move(from);
  }

  inline Ft& operator=(Ft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ft* internal_default_instance() {
    return reinterpret_cast<const Ft*>(
               &_Ft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Ft* other);
  friend void swap(Ft& a, Ft& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ft* New() const final {
    return CreateMaybeMessage<Ft>(NULL);
  }

  Ft* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ft>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ft& from);
  void MergeFrom(const Ft& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Ft_Proxy Proxy;

  typedef Ft_LoadBalanceMode LoadBalanceMode;
  static const LoadBalanceMode load_balance_mode_first =
    Ft_LoadBalanceMode_load_balance_mode_first;
  static const LoadBalanceMode load_balance_mode_random =
    Ft_LoadBalanceMode_load_balance_mode_random;
  static inline bool LoadBalanceMode_IsValid(int value) {
    return Ft_LoadBalanceMode_IsValid(value);
  }
  static const LoadBalanceMode LoadBalanceMode_MIN =
    Ft_LoadBalanceMode_LoadBalanceMode_MIN;
  static const LoadBalanceMode LoadBalanceMode_MAX =
    Ft_LoadBalanceMode_LoadBalanceMode_MAX;
  static const int LoadBalanceMode_ARRAYSIZE =
    Ft_LoadBalanceMode_LoadBalanceMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LoadBalanceMode_descriptor() {
    return Ft_LoadBalanceMode_descriptor();
  }
  static inline const ::std::string& LoadBalanceMode_Name(LoadBalanceMode value) {
    return Ft_LoadBalanceMode_Name(value);
  }
  static inline bool LoadBalanceMode_Parse(const ::std::string& name,
      LoadBalanceMode* value) {
    return Ft_LoadBalanceMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
  int proxies_size() const;
  void clear_proxies();
  static const int kProxiesFieldNumber = 11;
  ::go::pkg::filetransfer::Ft_Proxy* mutable_proxies(int index);
  ::google::protobuf::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy >*
      mutable_proxies();
  const ::go::pkg::filetransfer::Ft_Proxy& proxies(int index) const;
  ::go::pkg::filetransfer::Ft_Proxy* add_proxies();
  const ::google::protobuf::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy >&
      proxies() const;

  // int64 download_timeout = 2;
  void clear_download_timeout();
  static const int kDownloadTimeoutFieldNumber = 2;
  ::google::protobuf::int64 download_timeout() const;
  void set_download_timeout(::google::protobuf::int64 value);

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // uint32 retry_times = 4;
  void clear_retry_times();
  static const int kRetryTimesFieldNumber = 4;
  ::google::protobuf::uint32 retry_times() const;
  void set_retry_times(::google::protobuf::uint32 value);

  // int64 upload_timeout = 3;
  void clear_upload_timeout();
  static const int kUploadTimeoutFieldNumber = 3;
  ::google::protobuf::int64 upload_timeout() const;
  void set_upload_timeout(::google::protobuf::int64 value);

  // int64 retry_interval = 5;
  void clear_retry_interval();
  static const int kRetryIntervalFieldNumber = 5;
  ::google::protobuf::int64 retry_interval() const;
  void set_retry_interval(::google::protobuf::int64 value);

  // .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
  void clear_load_balance_mode();
  static const int kLoadBalanceModeFieldNumber = 10;
  ::go::pkg::filetransfer::Ft_LoadBalanceMode load_balance_mode() const;
  void set_load_balance_mode(::go::pkg::filetransfer::Ft_LoadBalanceMode value);

  // @@protoc_insertion_point(class_scope:go.pkg.filetransfer.Ft)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy > proxies_;
  ::google::protobuf::int64 download_timeout_;
  bool enabled_;
  ::google::protobuf::uint32 retry_times_;
  ::google::protobuf::int64 upload_timeout_;
  ::google::protobuf::int64 retry_interval_;
  int load_balance_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pkg_2ffile_2dtransfer_2fft_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FtConfig

// .go.pkg.filetransfer.Ft filetransfer = 1;
inline bool FtConfig::has_filetransfer() const {
  return this != internal_default_instance() && filetransfer_ != NULL;
}
inline void FtConfig::clear_filetransfer() {
  if (GetArenaNoVirtual() == NULL && filetransfer_ != NULL) {
    delete filetransfer_;
  }
  filetransfer_ = NULL;
}
inline const ::go::pkg::filetransfer::Ft& FtConfig::_internal_filetransfer() const {
  return *filetransfer_;
}
inline const ::go::pkg::filetransfer::Ft& FtConfig::filetransfer() const {
  const ::go::pkg::filetransfer::Ft* p = filetransfer_;
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.FtConfig.filetransfer)
  return p != NULL ? *p : *reinterpret_cast<const ::go::pkg::filetransfer::Ft*>(
      &::go::pkg::filetransfer::_Ft_default_instance_);
}
inline ::go::pkg::filetransfer::Ft* FtConfig::release_filetransfer() {
  // @@protoc_insertion_point(field_release:go.pkg.filetransfer.FtConfig.filetransfer)
  
  ::go::pkg::filetransfer::Ft* temp = filetransfer_;
  filetransfer_ = NULL;
  return temp;
}
inline ::go::pkg::filetransfer::Ft* FtConfig::mutable_filetransfer() {
  
  if (filetransfer_ == NULL) {
    auto* p = CreateMaybeMessage<::go::pkg::filetransfer::Ft>(GetArenaNoVirtual());
    filetransfer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.FtConfig.filetransfer)
  return filetransfer_;
}
inline void FtConfig::set_allocated_filetransfer(::go::pkg::filetransfer::Ft* filetransfer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete filetransfer_;
  }
  if (filetransfer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      filetransfer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filetransfer, submessage_arena);
    }
    
  } else {
    
  }
  filetransfer_ = filetransfer;
  // @@protoc_insertion_point(field_set_allocated:go.pkg.filetransfer.FtConfig.filetransfer)
}

// -------------------------------------------------------------------

// Ft_Proxy

// string target_host = 1;
inline void Ft_Proxy::clear_target_host() {
  target_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ft_Proxy::target_host() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.Proxy.target_host)
  return target_host_.GetNoArena();
}
inline void Ft_Proxy::set_target_host(const ::std::string& value) {
  
  target_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.Proxy.target_host)
}
#if LANG_CXX11
inline void Ft_Proxy::set_target_host(::std::string&& value) {
  
  target_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.pkg.filetransfer.Ft.Proxy.target_host)
}
#endif
inline void Ft_Proxy::set_target_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.pkg.filetransfer.Ft.Proxy.target_host)
}
inline void Ft_Proxy::set_target_host(const char* value, size_t size) {
  
  target_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.pkg.filetransfer.Ft.Proxy.target_host)
}
inline ::std::string* Ft_Proxy::mutable_target_host() {
  
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.Ft.Proxy.target_host)
  return target_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ft_Proxy::release_target_host() {
  // @@protoc_insertion_point(field_release:go.pkg.filetransfer.Ft.Proxy.target_host)
  
  return target_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ft_Proxy::set_allocated_target_host(::std::string* target_host) {
  if (target_host != NULL) {
    
  } else {
    
  }
  target_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_host);
  // @@protoc_insertion_point(field_set_allocated:go.pkg.filetransfer.Ft.Proxy.target_host)
}

// string proxy_url = 2;
inline void Ft_Proxy::clear_proxy_url() {
  proxy_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ft_Proxy::proxy_url() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.Proxy.proxy_url)
  return proxy_url_.GetNoArena();
}
inline void Ft_Proxy::set_proxy_url(const ::std::string& value) {
  
  proxy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
#if LANG_CXX11
inline void Ft_Proxy::set_proxy_url(::std::string&& value) {
  
  proxy_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
#endif
inline void Ft_Proxy::set_proxy_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proxy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
inline void Ft_Proxy::set_proxy_url(const char* value, size_t size) {
  
  proxy_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}
inline ::std::string* Ft_Proxy::mutable_proxy_url() {
  
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.Ft.Proxy.proxy_url)
  return proxy_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ft_Proxy::release_proxy_url() {
  // @@protoc_insertion_point(field_release:go.pkg.filetransfer.Ft.Proxy.proxy_url)
  
  return proxy_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ft_Proxy::set_allocated_proxy_url(::std::string* proxy_url) {
  if (proxy_url != NULL) {
    
  } else {
    
  }
  proxy_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_url);
  // @@protoc_insertion_point(field_set_allocated:go.pkg.filetransfer.Ft.Proxy.proxy_url)
}

// string proxy_host = 3;
inline void Ft_Proxy::clear_proxy_host() {
  proxy_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ft_Proxy::proxy_host() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.Proxy.proxy_host)
  return proxy_host_.GetNoArena();
}
inline void Ft_Proxy::set_proxy_host(const ::std::string& value) {
  
  proxy_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
#if LANG_CXX11
inline void Ft_Proxy::set_proxy_host(::std::string&& value) {
  
  proxy_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
#endif
inline void Ft_Proxy::set_proxy_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proxy_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
inline void Ft_Proxy::set_proxy_host(const char* value, size_t size) {
  
  proxy_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}
inline ::std::string* Ft_Proxy::mutable_proxy_host() {
  
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.Ft.Proxy.proxy_host)
  return proxy_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ft_Proxy::release_proxy_host() {
  // @@protoc_insertion_point(field_release:go.pkg.filetransfer.Ft.Proxy.proxy_host)
  
  return proxy_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ft_Proxy::set_allocated_proxy_host(::std::string* proxy_host) {
  if (proxy_host != NULL) {
    
  } else {
    
  }
  proxy_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_host);
  // @@protoc_insertion_point(field_set_allocated:go.pkg.filetransfer.Ft.Proxy.proxy_host)
}

// -------------------------------------------------------------------

// Ft

// bool enabled = 1;
inline void Ft::clear_enabled() {
  enabled_ = false;
}
inline bool Ft::enabled() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.enabled)
  return enabled_;
}
inline void Ft::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.enabled)
}

// int64 download_timeout = 2;
inline void Ft::clear_download_timeout() {
  download_timeout_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ft::download_timeout() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.download_timeout)
  return download_timeout_;
}
inline void Ft::set_download_timeout(::google::protobuf::int64 value) {
  
  download_timeout_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.download_timeout)
}

// int64 upload_timeout = 3;
inline void Ft::clear_upload_timeout() {
  upload_timeout_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ft::upload_timeout() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.upload_timeout)
  return upload_timeout_;
}
inline void Ft::set_upload_timeout(::google::protobuf::int64 value) {
  
  upload_timeout_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.upload_timeout)
}

// uint32 retry_times = 4;
inline void Ft::clear_retry_times() {
  retry_times_ = 0u;
}
inline ::google::protobuf::uint32 Ft::retry_times() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.retry_times)
  return retry_times_;
}
inline void Ft::set_retry_times(::google::protobuf::uint32 value) {
  
  retry_times_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.retry_times)
}

// int64 retry_interval = 5;
inline void Ft::clear_retry_interval() {
  retry_interval_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ft::retry_interval() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.retry_interval)
  return retry_interval_;
}
inline void Ft::set_retry_interval(::google::protobuf::int64 value) {
  
  retry_interval_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.retry_interval)
}

// .go.pkg.filetransfer.Ft.LoadBalanceMode load_balance_mode = 10;
inline void Ft::clear_load_balance_mode() {
  load_balance_mode_ = 0;
}
inline ::go::pkg::filetransfer::Ft_LoadBalanceMode Ft::load_balance_mode() const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.load_balance_mode)
  return static_cast< ::go::pkg::filetransfer::Ft_LoadBalanceMode >(load_balance_mode_);
}
inline void Ft::set_load_balance_mode(::go::pkg::filetransfer::Ft_LoadBalanceMode value) {
  
  load_balance_mode_ = value;
  // @@protoc_insertion_point(field_set:go.pkg.filetransfer.Ft.load_balance_mode)
}

// repeated .go.pkg.filetransfer.Ft.Proxy proxies = 11;
inline int Ft::proxies_size() const {
  return proxies_.size();
}
inline void Ft::clear_proxies() {
  proxies_.Clear();
}
inline ::go::pkg::filetransfer::Ft_Proxy* Ft::mutable_proxies(int index) {
  // @@protoc_insertion_point(field_mutable:go.pkg.filetransfer.Ft.proxies)
  return proxies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy >*
Ft::mutable_proxies() {
  // @@protoc_insertion_point(field_mutable_list:go.pkg.filetransfer.Ft.proxies)
  return &proxies_;
}
inline const ::go::pkg::filetransfer::Ft_Proxy& Ft::proxies(int index) const {
  // @@protoc_insertion_point(field_get:go.pkg.filetransfer.Ft.proxies)
  return proxies_.Get(index);
}
inline ::go::pkg::filetransfer::Ft_Proxy* Ft::add_proxies() {
  // @@protoc_insertion_point(field_add:go.pkg.filetransfer.Ft.proxies)
  return proxies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::go::pkg::filetransfer::Ft_Proxy >&
Ft::proxies() const {
  // @@protoc_insertion_point(field_list:go.pkg.filetransfer.Ft.proxies)
  return proxies_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace filetransfer
}  // namespace pkg
}  // namespace go

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::go::pkg::filetransfer::Ft_LoadBalanceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::go::pkg::filetransfer::Ft_LoadBalanceMode>() {
  return ::go::pkg::filetransfer::Ft_LoadBalanceMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pkg_2ffile_2dtransfer_2fft_2eproto
