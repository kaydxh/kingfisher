// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/webserver/webserver.proto

#include "pkg/webserver/webserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pkg_2fwebserver_2fwebserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Web_pkg_2fwebserver_2fwebserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pkg_2fwebserver_2fwebserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Web_Debug_pkg_2fwebserver_2fwebserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pkg_2fwebserver_2fwebserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Web_Debug_TestMapEntry_DoNotUse_pkg_2fwebserver_2fwebserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pkg_2fwebserver_2fwebserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Web_Grpc_pkg_2fwebserver_2fwebserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pkg_2fwebserver_2fwebserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Web_Http_pkg_2fwebserver_2fwebserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pkg_2fwebserver_2fwebserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Web_Monitor_pkg_2fwebserver_2fwebserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pkg_2fwebserver_2fwebserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Web_Monitor_Prometheus_pkg_2fwebserver_2fwebserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pkg_2fwebserver_2fwebserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Web_Net_pkg_2fwebserver_2fwebserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
namespace go {
namespace pkg {
namespace webserver {
class WebConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebConfig> _instance;
} _WebConfig_default_instance_;
class Web_NetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Web_Net> _instance;
} _Web_Net_default_instance_;
class Web_GrpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Web_Grpc> _instance;
} _Web_Grpc_default_instance_;
class Web_HttpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Web_Http> _instance;
} _Web_Http_default_instance_;
class Web_Debug_TestMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Web_Debug_TestMapEntry_DoNotUse> _instance;
} _Web_Debug_TestMapEntry_DoNotUse_default_instance_;
class Web_DebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Web_Debug> _instance;
} _Web_Debug_default_instance_;
class Web_Monitor_PrometheusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Web_Monitor_Prometheus> _instance;
} _Web_Monitor_Prometheus_default_instance_;
class Web_MonitorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Web_Monitor> _instance;
} _Web_Monitor_default_instance_;
class WebDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Web> _instance;
} _Web_default_instance_;
}  // namespace webserver
}  // namespace pkg
}  // namespace go
static void InitDefaultsscc_info_Web_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_Web_default_instance_;
    new (ptr) ::go::pkg::webserver::Web();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::webserver::Web::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Web_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Web_pkg_2fwebserver_2fwebserver_2eproto}, {
      &scc_info_Web_Net_pkg_2fwebserver_2fwebserver_2eproto.base,
      &scc_info_Web_Grpc_pkg_2fwebserver_2fwebserver_2eproto.base,
      &scc_info_Web_Http_pkg_2fwebserver_2fwebserver_2eproto.base,
      &scc_info_Web_Debug_pkg_2fwebserver_2fwebserver_2eproto.base,
      &scc_info_Web_Monitor_pkg_2fwebserver_2fwebserver_2eproto.base,}};

static void InitDefaultsscc_info_Web_Debug_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_Web_Debug_default_instance_;
    new (ptr) ::go::pkg::webserver::Web_Debug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::webserver::Web_Debug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Web_Debug_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Web_Debug_pkg_2fwebserver_2fwebserver_2eproto}, {
      &scc_info_Web_Debug_TestMapEntry_DoNotUse_pkg_2fwebserver_2fwebserver_2eproto.base,}};

static void InitDefaultsscc_info_Web_Debug_TestMapEntry_DoNotUse_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_Web_Debug_TestMapEntry_DoNotUse_default_instance_;
    new (ptr) ::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse();
  }
  ::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Web_Debug_TestMapEntry_DoNotUse_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Web_Debug_TestMapEntry_DoNotUse_pkg_2fwebserver_2fwebserver_2eproto}, {}};

static void InitDefaultsscc_info_Web_Grpc_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_Web_Grpc_default_instance_;
    new (ptr) ::go::pkg::webserver::Web_Grpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::webserver::Web_Grpc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Web_Grpc_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Web_Grpc_pkg_2fwebserver_2fwebserver_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_Web_Http_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_Web_Http_default_instance_;
    new (ptr) ::go::pkg::webserver::Web_Http();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::webserver::Web_Http::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Web_Http_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Web_Http_pkg_2fwebserver_2fwebserver_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_Web_Monitor_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_Web_Monitor_default_instance_;
    new (ptr) ::go::pkg::webserver::Web_Monitor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::webserver::Web_Monitor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Web_Monitor_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Web_Monitor_pkg_2fwebserver_2fwebserver_2eproto}, {
      &scc_info_Web_Monitor_Prometheus_pkg_2fwebserver_2fwebserver_2eproto.base,}};

static void InitDefaultsscc_info_Web_Monitor_Prometheus_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_Web_Monitor_Prometheus_default_instance_;
    new (ptr) ::go::pkg::webserver::Web_Monitor_Prometheus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::webserver::Web_Monitor_Prometheus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Web_Monitor_Prometheus_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Web_Monitor_Prometheus_pkg_2fwebserver_2fwebserver_2eproto}, {}};

static void InitDefaultsscc_info_Web_Net_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_Web_Net_default_instance_;
    new (ptr) ::go::pkg::webserver::Web_Net();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::webserver::Web_Net::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Web_Net_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Web_Net_pkg_2fwebserver_2fwebserver_2eproto}, {}};

static void InitDefaultsscc_info_WebConfig_pkg_2fwebserver_2fwebserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::go::pkg::webserver::_WebConfig_default_instance_;
    new (ptr) ::go::pkg::webserver::WebConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::go::pkg::webserver::WebConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WebConfig_pkg_2fwebserver_2fwebserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WebConfig_pkg_2fwebserver_2fwebserver_2eproto}, {
      &scc_info_Web_pkg_2fwebserver_2fwebserver_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pkg_2fwebserver_2fwebserver_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pkg_2fwebserver_2fwebserver_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pkg_2fwebserver_2fwebserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pkg_2fwebserver_2fwebserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::WebConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::WebConfig, web_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Net, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Net, host_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Net, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Grpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Grpc, max_concurrency_unary_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Grpc, max_concurrency_stream_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Grpc, max_receive_message_size_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Grpc, max_send_message_size_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Grpc, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Http, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Http, api_formatter_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Http, max_concurrency_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Http, timeout_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Debug, enable_profiling_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Debug, disable_print_inoutput_methods_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Debug, test_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Monitor_Prometheus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Monitor_Prometheus, enabled_metric_timer_cost_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Monitor_Prometheus, enabled_metric_code_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Monitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web_Monitor, prometheus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web, bind_address_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web, grpc_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web, http_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web, debug_),
  PROTOBUF_FIELD_OFFSET(::go::pkg::webserver::Web, monitor_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::go::pkg::webserver::WebConfig)},
  { 6, -1, sizeof(::go::pkg::webserver::Web_Net)},
  { 13, -1, sizeof(::go::pkg::webserver::Web_Grpc)},
  { 23, -1, sizeof(::go::pkg::webserver::Web_Http)},
  { 31, 38, sizeof(::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse)},
  { 40, -1, sizeof(::go::pkg::webserver::Web_Debug)},
  { 48, -1, sizeof(::go::pkg::webserver::Web_Monitor_Prometheus)},
  { 55, -1, sizeof(::go::pkg::webserver::Web_Monitor)},
  { 61, -1, sizeof(::go::pkg::webserver::Web)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_WebConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_Web_Net_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_Web_Grpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_Web_Http_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_Web_Debug_TestMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_Web_Debug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_Web_Monitor_Prometheus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_Web_Monitor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::go::pkg::webserver::_Web_default_instance_),
};

const char descriptor_table_protodef_pkg_2fwebserver_2fwebserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035pkg/webserver/webserver.proto\022\020go.pkg."
  "webserver\032\036google/protobuf/duration.prot"
  "o\"/\n\tWebConfig\022\"\n\003web\030\001 \001(\0132\025.go.pkg.web"
  "server.Web\"\200\010\n\003Web\022/\n\014bind_address\030\001 \001(\013"
  "2\031.go.pkg.webserver.Web.Net\022(\n\004grpc\030\003 \001("
  "\0132\032.go.pkg.webserver.Web.Grpc\022(\n\004http\030\004 "
  "\001(\0132\032.go.pkg.webserver.Web.Http\022*\n\005debug"
  "\030\n \001(\0132\033.go.pkg.webserver.Web.Debug\022.\n\007m"
  "onitor\030\013 \001(\0132\035.go.pkg.webserver.Web.Moni"
  "tor\032!\n\003Net\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\032\262"
  "\001\n\004Grpc\022\035\n\025max_concurrency_unary\030\001 \001(\005\022\036"
  "\n\026max_concurrency_stream\030\002 \001(\005\022 \n\030max_re"
  "ceive_message_size\030\003 \001(\005\022\035\n\025max_send_mes"
  "sage_size\030\004 \001(\005\022*\n\007timeout\030\005 \001(\0132\031.googl"
  "e.protobuf.Duration\032\347\001\n\004Http\022>\n\rapi_form"
  "atter\030\001 \001(\0162\'.go.pkg.webserver.Web.Http."
  "ApiFormatter\022\027\n\017max_concurrency\030\002 \001(\005\022*\n"
  "\007timeout\030\003 \001(\0132\031.google.protobuf.Duratio"
  "n\"Z\n\014ApiFormatter\022\014\n\010api_noop\020\000\022\022\n\016tclou"
  "d_api_v30\020\001\022\023\n\017trivial_api_v10\020\002\022\023\n\017triv"
  "ial_api_v20\020\003\032\265\001\n\005Debug\022\030\n\020enable_profil"
  "ing\030\001 \001(\010\022&\n\036disable_print_inoutput_meth"
  "ods\030\002 \003(\t\022:\n\010test_map\030\003 \003(\0132(.go.pkg.web"
  "server.Web.Debug.TestMapEntry\032.\n\014TestMap"
  "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\032\235\001"
  "\n\007Monitor\022<\n\nprometheus\030\001 \001(\0132(.go.pkg.w"
  "ebserver.Web.Monitor.Prometheus\032T\n\nProme"
  "theus\022!\n\031enabled_metric_timer_cost\030\001 \001(\010"
  "\022#\n\033enabled_metric_code_message\030\002 \001(\010B2Z"
  "0github.com/kaydxh/golang/pkg/webserver;"
  "webserverb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pkg_2fwebserver_2fwebserver_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pkg_2fwebserver_2fwebserver_2eproto_sccs[9] = {
  &scc_info_Web_pkg_2fwebserver_2fwebserver_2eproto.base,
  &scc_info_Web_Debug_pkg_2fwebserver_2fwebserver_2eproto.base,
  &scc_info_Web_Debug_TestMapEntry_DoNotUse_pkg_2fwebserver_2fwebserver_2eproto.base,
  &scc_info_Web_Grpc_pkg_2fwebserver_2fwebserver_2eproto.base,
  &scc_info_Web_Http_pkg_2fwebserver_2fwebserver_2eproto.base,
  &scc_info_Web_Monitor_pkg_2fwebserver_2fwebserver_2eproto.base,
  &scc_info_Web_Monitor_Prometheus_pkg_2fwebserver_2fwebserver_2eproto.base,
  &scc_info_Web_Net_pkg_2fwebserver_2fwebserver_2eproto.base,
  &scc_info_WebConfig_pkg_2fwebserver_2fwebserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pkg_2fwebserver_2fwebserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fwebserver_2fwebserver_2eproto = {
  false, false, descriptor_table_protodef_pkg_2fwebserver_2fwebserver_2eproto, "pkg/webserver/webserver.proto", 1217,
  &descriptor_table_pkg_2fwebserver_2fwebserver_2eproto_once, descriptor_table_pkg_2fwebserver_2fwebserver_2eproto_sccs, descriptor_table_pkg_2fwebserver_2fwebserver_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_pkg_2fwebserver_2fwebserver_2eproto::offsets,
  file_level_metadata_pkg_2fwebserver_2fwebserver_2eproto, 9, file_level_enum_descriptors_pkg_2fwebserver_2fwebserver_2eproto, file_level_service_descriptors_pkg_2fwebserver_2fwebserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pkg_2fwebserver_2fwebserver_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pkg_2fwebserver_2fwebserver_2eproto)), true);
namespace go {
namespace pkg {
namespace webserver {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Web_Http_ApiFormatter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pkg_2fwebserver_2fwebserver_2eproto);
  return file_level_enum_descriptors_pkg_2fwebserver_2fwebserver_2eproto[0];
}
bool Web_Http_ApiFormatter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Web_Http_ApiFormatter Web_Http::api_noop;
constexpr Web_Http_ApiFormatter Web_Http::tcloud_api_v30;
constexpr Web_Http_ApiFormatter Web_Http::trivial_api_v10;
constexpr Web_Http_ApiFormatter Web_Http::trivial_api_v20;
constexpr Web_Http_ApiFormatter Web_Http::ApiFormatter_MIN;
constexpr Web_Http_ApiFormatter Web_Http::ApiFormatter_MAX;
constexpr int Web_Http::ApiFormatter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void WebConfig::InitAsDefaultInstance() {
  ::go::pkg::webserver::_WebConfig_default_instance_._instance.get_mutable()->web_ = const_cast< ::go::pkg::webserver::Web*>(
      ::go::pkg::webserver::Web::internal_default_instance());
}
class WebConfig::_Internal {
 public:
  static const ::go::pkg::webserver::Web& web(const WebConfig* msg);
};

const ::go::pkg::webserver::Web&
WebConfig::_Internal::web(const WebConfig* msg) {
  return *msg->web_;
}
WebConfig::WebConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.webserver.WebConfig)
}
WebConfig::WebConfig(const WebConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_web()) {
    web_ = new ::go::pkg::webserver::Web(*from.web_);
  } else {
    web_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:go.pkg.webserver.WebConfig)
}

void WebConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebConfig_pkg_2fwebserver_2fwebserver_2eproto.base);
  web_ = nullptr;
}

WebConfig::~WebConfig() {
  // @@protoc_insertion_point(destructor:go.pkg.webserver.WebConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WebConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete web_;
}

void WebConfig::ArenaDtor(void* object) {
  WebConfig* _this = reinterpret_cast< WebConfig* >(object);
  (void)_this;
}
void WebConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WebConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebConfig& WebConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebConfig_pkg_2fwebserver_2fwebserver_2eproto.base);
  return *internal_default_instance();
}


void WebConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.webserver.WebConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && web_ != nullptr) {
    delete web_;
  }
  web_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .go.pkg.webserver.Web web = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_web(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WebConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.webserver.WebConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.pkg.webserver.Web web = 1;
  if (this->has_web()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::web(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.webserver.WebConfig)
  return target;
}

size_t WebConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.webserver.WebConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .go.pkg.webserver.Web web = 1;
  if (this->has_web()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.webserver.WebConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WebConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WebConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.webserver.WebConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.webserver.WebConfig)
    MergeFrom(*source);
  }
}

void WebConfig::MergeFrom(const WebConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.webserver.WebConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_web()) {
    _internal_mutable_web()->::go::pkg::webserver::Web::MergeFrom(from._internal_web());
  }
}

void WebConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.webserver.WebConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebConfig::CopyFrom(const WebConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.webserver.WebConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebConfig::IsInitialized() const {
  return true;
}

void WebConfig::InternalSwap(WebConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(web_, other->web_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WebConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Web_Net::InitAsDefaultInstance() {
}
class Web_Net::_Internal {
 public:
};

Web_Net::Web_Net(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.webserver.Web.Net)
}
Web_Net::Web_Net(const Web_Net& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:go.pkg.webserver.Web.Net)
}

void Web_Net::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Web_Net_pkg_2fwebserver_2fwebserver_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

Web_Net::~Web_Net() {
  // @@protoc_insertion_point(destructor:go.pkg.webserver.Web.Net)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Web_Net::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Web_Net::ArenaDtor(void* object) {
  Web_Net* _this = reinterpret_cast< Web_Net* >(object);
  (void)_this;
}
void Web_Net::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Web_Net::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Web_Net& Web_Net::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Web_Net_pkg_2fwebserver_2fwebserver_2eproto.base);
  return *internal_default_instance();
}


void Web_Net::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.webserver.Web.Net)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Web_Net::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "go.pkg.webserver.Web.Net.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Web_Net::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.webserver.Web.Net)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "go.pkg.webserver.Web.Net.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.webserver.Web.Net)
  return target;
}

size_t Web_Net::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.webserver.Web.Net)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Web_Net::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.webserver.Web.Net)
  GOOGLE_DCHECK_NE(&from, this);
  const Web_Net* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Web_Net>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.webserver.Web.Net)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.webserver.Web.Net)
    MergeFrom(*source);
  }
}

void Web_Net::MergeFrom(const Web_Net& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.webserver.Web.Net)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void Web_Net::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.webserver.Web.Net)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Web_Net::CopyFrom(const Web_Net& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.webserver.Web.Net)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Web_Net::IsInitialized() const {
  return true;
}

void Web_Net::InternalSwap(Web_Net* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Web_Net::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Web_Grpc::InitAsDefaultInstance() {
  ::go::pkg::webserver::_Web_Grpc_default_instance_._instance.get_mutable()->timeout_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class Web_Grpc::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& timeout(const Web_Grpc* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
Web_Grpc::_Internal::timeout(const Web_Grpc* msg) {
  return *msg->timeout_;
}
void Web_Grpc::clear_timeout() {
  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
Web_Grpc::Web_Grpc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.webserver.Web.Grpc)
}
Web_Grpc::Web_Grpc(const Web_Grpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timeout()) {
    timeout_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  ::memcpy(&max_concurrency_unary_, &from.max_concurrency_unary_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_send_message_size_) -
    reinterpret_cast<char*>(&max_concurrency_unary_)) + sizeof(max_send_message_size_));
  // @@protoc_insertion_point(copy_constructor:go.pkg.webserver.Web.Grpc)
}

void Web_Grpc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Web_Grpc_pkg_2fwebserver_2fwebserver_2eproto.base);
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_send_message_size_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(max_send_message_size_));
}

Web_Grpc::~Web_Grpc() {
  // @@protoc_insertion_point(destructor:go.pkg.webserver.Web.Grpc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Web_Grpc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timeout_;
}

void Web_Grpc::ArenaDtor(void* object) {
  Web_Grpc* _this = reinterpret_cast< Web_Grpc* >(object);
  (void)_this;
}
void Web_Grpc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Web_Grpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Web_Grpc& Web_Grpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Web_Grpc_pkg_2fwebserver_2fwebserver_2eproto.base);
  return *internal_default_instance();
}


void Web_Grpc::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.webserver.Web.Grpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
  ::memset(&max_concurrency_unary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_send_message_size_) -
      reinterpret_cast<char*>(&max_concurrency_unary_)) + sizeof(max_send_message_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Web_Grpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_concurrency_unary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_concurrency_unary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_concurrency_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_concurrency_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_receive_message_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_receive_message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_send_message_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_send_message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Web_Grpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.webserver.Web.Grpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_concurrency_unary = 1;
  if (this->max_concurrency_unary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_concurrency_unary(), target);
  }

  // int32 max_concurrency_stream = 2;
  if (this->max_concurrency_stream() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_concurrency_stream(), target);
  }

  // int32 max_receive_message_size = 3;
  if (this->max_receive_message_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_receive_message_size(), target);
  }

  // int32 max_send_message_size = 4;
  if (this->max_send_message_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_send_message_size(), target);
  }

  // .google.protobuf.Duration timeout = 5;
  if (this->has_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.webserver.Web.Grpc)
  return target;
}

size_t Web_Grpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.webserver.Web.Grpc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration timeout = 5;
  if (this->has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // int32 max_concurrency_unary = 1;
  if (this->max_concurrency_unary() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_concurrency_unary());
  }

  // int32 max_concurrency_stream = 2;
  if (this->max_concurrency_stream() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_concurrency_stream());
  }

  // int32 max_receive_message_size = 3;
  if (this->max_receive_message_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_receive_message_size());
  }

  // int32 max_send_message_size = 4;
  if (this->max_send_message_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_send_message_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Web_Grpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.webserver.Web.Grpc)
  GOOGLE_DCHECK_NE(&from, this);
  const Web_Grpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Web_Grpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.webserver.Web.Grpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.webserver.Web.Grpc)
    MergeFrom(*source);
  }
}

void Web_Grpc::MergeFrom(const Web_Grpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.webserver.Web.Grpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timeout()) {
    _internal_mutable_timeout()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_timeout());
  }
  if (from.max_concurrency_unary() != 0) {
    _internal_set_max_concurrency_unary(from._internal_max_concurrency_unary());
  }
  if (from.max_concurrency_stream() != 0) {
    _internal_set_max_concurrency_stream(from._internal_max_concurrency_stream());
  }
  if (from.max_receive_message_size() != 0) {
    _internal_set_max_receive_message_size(from._internal_max_receive_message_size());
  }
  if (from.max_send_message_size() != 0) {
    _internal_set_max_send_message_size(from._internal_max_send_message_size());
  }
}

void Web_Grpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.webserver.Web.Grpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Web_Grpc::CopyFrom(const Web_Grpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.webserver.Web.Grpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Web_Grpc::IsInitialized() const {
  return true;
}

void Web_Grpc::InternalSwap(Web_Grpc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Web_Grpc, max_send_message_size_)
      + sizeof(Web_Grpc::max_send_message_size_)
      - PROTOBUF_FIELD_OFFSET(Web_Grpc, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Web_Grpc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Web_Http::InitAsDefaultInstance() {
  ::go::pkg::webserver::_Web_Http_default_instance_._instance.get_mutable()->timeout_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class Web_Http::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& timeout(const Web_Http* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
Web_Http::_Internal::timeout(const Web_Http* msg) {
  return *msg->timeout_;
}
void Web_Http::clear_timeout() {
  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
Web_Http::Web_Http(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.webserver.Web.Http)
}
Web_Http::Web_Http(const Web_Http& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timeout()) {
    timeout_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  ::memcpy(&api_formatter_, &from.api_formatter_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_concurrency_) -
    reinterpret_cast<char*>(&api_formatter_)) + sizeof(max_concurrency_));
  // @@protoc_insertion_point(copy_constructor:go.pkg.webserver.Web.Http)
}

void Web_Http::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Web_Http_pkg_2fwebserver_2fwebserver_2eproto.base);
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_concurrency_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(max_concurrency_));
}

Web_Http::~Web_Http() {
  // @@protoc_insertion_point(destructor:go.pkg.webserver.Web.Http)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Web_Http::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timeout_;
}

void Web_Http::ArenaDtor(void* object) {
  Web_Http* _this = reinterpret_cast< Web_Http* >(object);
  (void)_this;
}
void Web_Http::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Web_Http::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Web_Http& Web_Http::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Web_Http_pkg_2fwebserver_2fwebserver_2eproto.base);
  return *internal_default_instance();
}


void Web_Http::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.webserver.Web.Http)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
  ::memset(&api_formatter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_concurrency_) -
      reinterpret_cast<char*>(&api_formatter_)) + sizeof(max_concurrency_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Web_Http::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .go.pkg.webserver.Web.Http.ApiFormatter api_formatter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_api_formatter(static_cast<::go::pkg::webserver::Web_Http_ApiFormatter>(val));
        } else goto handle_unusual;
        continue;
      // int32 max_concurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Web_Http::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.webserver.Web.Http)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.pkg.webserver.Web.Http.ApiFormatter api_formatter = 1;
  if (this->api_formatter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_api_formatter(), target);
  }

  // int32 max_concurrency = 2;
  if (this->max_concurrency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_concurrency(), target);
  }

  // .google.protobuf.Duration timeout = 3;
  if (this->has_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.webserver.Web.Http)
  return target;
}

size_t Web_Http::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.webserver.Web.Http)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration timeout = 3;
  if (this->has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // .go.pkg.webserver.Web.Http.ApiFormatter api_formatter = 1;
  if (this->api_formatter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_api_formatter());
  }

  // int32 max_concurrency = 2;
  if (this->max_concurrency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_concurrency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Web_Http::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.webserver.Web.Http)
  GOOGLE_DCHECK_NE(&from, this);
  const Web_Http* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Web_Http>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.webserver.Web.Http)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.webserver.Web.Http)
    MergeFrom(*source);
  }
}

void Web_Http::MergeFrom(const Web_Http& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.webserver.Web.Http)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timeout()) {
    _internal_mutable_timeout()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_timeout());
  }
  if (from.api_formatter() != 0) {
    _internal_set_api_formatter(from._internal_api_formatter());
  }
  if (from.max_concurrency() != 0) {
    _internal_set_max_concurrency(from._internal_max_concurrency());
  }
}

void Web_Http::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.webserver.Web.Http)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Web_Http::CopyFrom(const Web_Http& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.webserver.Web.Http)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Web_Http::IsInitialized() const {
  return true;
}

void Web_Http::InternalSwap(Web_Http* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Web_Http, max_concurrency_)
      + sizeof(Web_Http::max_concurrency_)
      - PROTOBUF_FIELD_OFFSET(Web_Http, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Web_Http::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Web_Debug_TestMapEntry_DoNotUse::Web_Debug_TestMapEntry_DoNotUse() {}
Web_Debug_TestMapEntry_DoNotUse::Web_Debug_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Web_Debug_TestMapEntry_DoNotUse::MergeFrom(const Web_Debug_TestMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Web_Debug_TestMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Web_Debug_TestMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Web_Debug::InitAsDefaultInstance() {
}
class Web_Debug::_Internal {
 public:
};

Web_Debug::Web_Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  disable_print_inoutput_methods_(arena),
  test_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.webserver.Web.Debug)
}
Web_Debug::Web_Debug(const Web_Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      disable_print_inoutput_methods_(from.disable_print_inoutput_methods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_map_.MergeFrom(from.test_map_);
  enable_profiling_ = from.enable_profiling_;
  // @@protoc_insertion_point(copy_constructor:go.pkg.webserver.Web.Debug)
}

void Web_Debug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Web_Debug_pkg_2fwebserver_2fwebserver_2eproto.base);
  enable_profiling_ = false;
}

Web_Debug::~Web_Debug() {
  // @@protoc_insertion_point(destructor:go.pkg.webserver.Web.Debug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Web_Debug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Web_Debug::ArenaDtor(void* object) {
  Web_Debug* _this = reinterpret_cast< Web_Debug* >(object);
  (void)_this;
}
void Web_Debug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Web_Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Web_Debug& Web_Debug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Web_Debug_pkg_2fwebserver_2fwebserver_2eproto.base);
  return *internal_default_instance();
}


void Web_Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.webserver.Web.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disable_print_inoutput_methods_.Clear();
  test_map_.Clear();
  enable_profiling_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Web_Debug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable_profiling = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_profiling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string disable_print_inoutput_methods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_disable_print_inoutput_methods();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "go.pkg.webserver.Web.Debug.disable_print_inoutput_methods"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, int32> test_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&test_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Web_Debug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.webserver.Web.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_profiling = 1;
  if (this->enable_profiling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_profiling(), target);
  }

  // repeated string disable_print_inoutput_methods = 2;
  for (int i = 0, n = this->_internal_disable_print_inoutput_methods_size(); i < n; i++) {
    const auto& s = this->_internal_disable_print_inoutput_methods(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "go.pkg.webserver.Web.Debug.disable_print_inoutput_methods");
    target = stream->WriteString(2, s, target);
  }

  // map<int32, int32> test_map = 3;
  if (!this->_internal_test_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_test_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_test_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_test_map().begin();
          it != this->_internal_test_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Web_Debug_TestMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_test_map().begin();
          it != this->_internal_test_map().end(); ++it) {
        target = Web_Debug_TestMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.webserver.Web.Debug)
  return target;
}

size_t Web_Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.webserver.Web.Debug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string disable_print_inoutput_methods = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(disable_print_inoutput_methods_.size());
  for (int i = 0, n = disable_print_inoutput_methods_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      disable_print_inoutput_methods_.Get(i));
  }

  // map<int32, int32> test_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_test_map().begin();
      it != this->_internal_test_map().end(); ++it) {
    total_size += Web_Debug_TestMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bool enable_profiling = 1;
  if (this->enable_profiling() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Web_Debug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.webserver.Web.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Web_Debug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Web_Debug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.webserver.Web.Debug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.webserver.Web.Debug)
    MergeFrom(*source);
  }
}

void Web_Debug::MergeFrom(const Web_Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.webserver.Web.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disable_print_inoutput_methods_.MergeFrom(from.disable_print_inoutput_methods_);
  test_map_.MergeFrom(from.test_map_);
  if (from.enable_profiling() != 0) {
    _internal_set_enable_profiling(from._internal_enable_profiling());
  }
}

void Web_Debug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.webserver.Web.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Web_Debug::CopyFrom(const Web_Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.webserver.Web.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Web_Debug::IsInitialized() const {
  return true;
}

void Web_Debug::InternalSwap(Web_Debug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  disable_print_inoutput_methods_.InternalSwap(&other->disable_print_inoutput_methods_);
  test_map_.Swap(&other->test_map_);
  swap(enable_profiling_, other->enable_profiling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Web_Debug::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Web_Monitor_Prometheus::InitAsDefaultInstance() {
}
class Web_Monitor_Prometheus::_Internal {
 public:
};

Web_Monitor_Prometheus::Web_Monitor_Prometheus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.webserver.Web.Monitor.Prometheus)
}
Web_Monitor_Prometheus::Web_Monitor_Prometheus(const Web_Monitor_Prometheus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&enabled_metric_timer_cost_, &from.enabled_metric_timer_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_metric_code_message_) -
    reinterpret_cast<char*>(&enabled_metric_timer_cost_)) + sizeof(enabled_metric_code_message_));
  // @@protoc_insertion_point(copy_constructor:go.pkg.webserver.Web.Monitor.Prometheus)
}

void Web_Monitor_Prometheus::SharedCtor() {
  ::memset(&enabled_metric_timer_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_metric_code_message_) -
      reinterpret_cast<char*>(&enabled_metric_timer_cost_)) + sizeof(enabled_metric_code_message_));
}

Web_Monitor_Prometheus::~Web_Monitor_Prometheus() {
  // @@protoc_insertion_point(destructor:go.pkg.webserver.Web.Monitor.Prometheus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Web_Monitor_Prometheus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Web_Monitor_Prometheus::ArenaDtor(void* object) {
  Web_Monitor_Prometheus* _this = reinterpret_cast< Web_Monitor_Prometheus* >(object);
  (void)_this;
}
void Web_Monitor_Prometheus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Web_Monitor_Prometheus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Web_Monitor_Prometheus& Web_Monitor_Prometheus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Web_Monitor_Prometheus_pkg_2fwebserver_2fwebserver_2eproto.base);
  return *internal_default_instance();
}


void Web_Monitor_Prometheus::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.webserver.Web.Monitor.Prometheus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enabled_metric_timer_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_metric_code_message_) -
      reinterpret_cast<char*>(&enabled_metric_timer_cost_)) + sizeof(enabled_metric_code_message_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Web_Monitor_Prometheus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled_metric_timer_cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_metric_timer_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled_metric_code_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enabled_metric_code_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Web_Monitor_Prometheus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.webserver.Web.Monitor.Prometheus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled_metric_timer_cost = 1;
  if (this->enabled_metric_timer_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled_metric_timer_cost(), target);
  }

  // bool enabled_metric_code_message = 2;
  if (this->enabled_metric_code_message() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled_metric_code_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.webserver.Web.Monitor.Prometheus)
  return target;
}

size_t Web_Monitor_Prometheus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.webserver.Web.Monitor.Prometheus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled_metric_timer_cost = 1;
  if (this->enabled_metric_timer_cost() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled_metric_code_message = 2;
  if (this->enabled_metric_code_message() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Web_Monitor_Prometheus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.webserver.Web.Monitor.Prometheus)
  GOOGLE_DCHECK_NE(&from, this);
  const Web_Monitor_Prometheus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Web_Monitor_Prometheus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.webserver.Web.Monitor.Prometheus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.webserver.Web.Monitor.Prometheus)
    MergeFrom(*source);
  }
}

void Web_Monitor_Prometheus::MergeFrom(const Web_Monitor_Prometheus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.webserver.Web.Monitor.Prometheus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabled_metric_timer_cost() != 0) {
    _internal_set_enabled_metric_timer_cost(from._internal_enabled_metric_timer_cost());
  }
  if (from.enabled_metric_code_message() != 0) {
    _internal_set_enabled_metric_code_message(from._internal_enabled_metric_code_message());
  }
}

void Web_Monitor_Prometheus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.webserver.Web.Monitor.Prometheus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Web_Monitor_Prometheus::CopyFrom(const Web_Monitor_Prometheus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.webserver.Web.Monitor.Prometheus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Web_Monitor_Prometheus::IsInitialized() const {
  return true;
}

void Web_Monitor_Prometheus::InternalSwap(Web_Monitor_Prometheus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Web_Monitor_Prometheus, enabled_metric_code_message_)
      + sizeof(Web_Monitor_Prometheus::enabled_metric_code_message_)
      - PROTOBUF_FIELD_OFFSET(Web_Monitor_Prometheus, enabled_metric_timer_cost_)>(
          reinterpret_cast<char*>(&enabled_metric_timer_cost_),
          reinterpret_cast<char*>(&other->enabled_metric_timer_cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Web_Monitor_Prometheus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Web_Monitor::InitAsDefaultInstance() {
  ::go::pkg::webserver::_Web_Monitor_default_instance_._instance.get_mutable()->prometheus_ = const_cast< ::go::pkg::webserver::Web_Monitor_Prometheus*>(
      ::go::pkg::webserver::Web_Monitor_Prometheus::internal_default_instance());
}
class Web_Monitor::_Internal {
 public:
  static const ::go::pkg::webserver::Web_Monitor_Prometheus& prometheus(const Web_Monitor* msg);
};

const ::go::pkg::webserver::Web_Monitor_Prometheus&
Web_Monitor::_Internal::prometheus(const Web_Monitor* msg) {
  return *msg->prometheus_;
}
Web_Monitor::Web_Monitor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.webserver.Web.Monitor)
}
Web_Monitor::Web_Monitor(const Web_Monitor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prometheus()) {
    prometheus_ = new ::go::pkg::webserver::Web_Monitor_Prometheus(*from.prometheus_);
  } else {
    prometheus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:go.pkg.webserver.Web.Monitor)
}

void Web_Monitor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Web_Monitor_pkg_2fwebserver_2fwebserver_2eproto.base);
  prometheus_ = nullptr;
}

Web_Monitor::~Web_Monitor() {
  // @@protoc_insertion_point(destructor:go.pkg.webserver.Web.Monitor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Web_Monitor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prometheus_;
}

void Web_Monitor::ArenaDtor(void* object) {
  Web_Monitor* _this = reinterpret_cast< Web_Monitor* >(object);
  (void)_this;
}
void Web_Monitor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Web_Monitor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Web_Monitor& Web_Monitor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Web_Monitor_pkg_2fwebserver_2fwebserver_2eproto.base);
  return *internal_default_instance();
}


void Web_Monitor::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.webserver.Web.Monitor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && prometheus_ != nullptr) {
    delete prometheus_;
  }
  prometheus_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Web_Monitor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .go.pkg.webserver.Web.Monitor.Prometheus prometheus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prometheus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Web_Monitor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.webserver.Web.Monitor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.pkg.webserver.Web.Monitor.Prometheus prometheus = 1;
  if (this->has_prometheus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prometheus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.webserver.Web.Monitor)
  return target;
}

size_t Web_Monitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.webserver.Web.Monitor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .go.pkg.webserver.Web.Monitor.Prometheus prometheus = 1;
  if (this->has_prometheus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prometheus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Web_Monitor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.webserver.Web.Monitor)
  GOOGLE_DCHECK_NE(&from, this);
  const Web_Monitor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Web_Monitor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.webserver.Web.Monitor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.webserver.Web.Monitor)
    MergeFrom(*source);
  }
}

void Web_Monitor::MergeFrom(const Web_Monitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.webserver.Web.Monitor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_prometheus()) {
    _internal_mutable_prometheus()->::go::pkg::webserver::Web_Monitor_Prometheus::MergeFrom(from._internal_prometheus());
  }
}

void Web_Monitor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.webserver.Web.Monitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Web_Monitor::CopyFrom(const Web_Monitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.webserver.Web.Monitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Web_Monitor::IsInitialized() const {
  return true;
}

void Web_Monitor::InternalSwap(Web_Monitor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(prometheus_, other->prometheus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Web_Monitor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Web::InitAsDefaultInstance() {
  ::go::pkg::webserver::_Web_default_instance_._instance.get_mutable()->bind_address_ = const_cast< ::go::pkg::webserver::Web_Net*>(
      ::go::pkg::webserver::Web_Net::internal_default_instance());
  ::go::pkg::webserver::_Web_default_instance_._instance.get_mutable()->grpc_ = const_cast< ::go::pkg::webserver::Web_Grpc*>(
      ::go::pkg::webserver::Web_Grpc::internal_default_instance());
  ::go::pkg::webserver::_Web_default_instance_._instance.get_mutable()->http_ = const_cast< ::go::pkg::webserver::Web_Http*>(
      ::go::pkg::webserver::Web_Http::internal_default_instance());
  ::go::pkg::webserver::_Web_default_instance_._instance.get_mutable()->debug_ = const_cast< ::go::pkg::webserver::Web_Debug*>(
      ::go::pkg::webserver::Web_Debug::internal_default_instance());
  ::go::pkg::webserver::_Web_default_instance_._instance.get_mutable()->monitor_ = const_cast< ::go::pkg::webserver::Web_Monitor*>(
      ::go::pkg::webserver::Web_Monitor::internal_default_instance());
}
class Web::_Internal {
 public:
  static const ::go::pkg::webserver::Web_Net& bind_address(const Web* msg);
  static const ::go::pkg::webserver::Web_Grpc& grpc(const Web* msg);
  static const ::go::pkg::webserver::Web_Http& http(const Web* msg);
  static const ::go::pkg::webserver::Web_Debug& debug(const Web* msg);
  static const ::go::pkg::webserver::Web_Monitor& monitor(const Web* msg);
};

const ::go::pkg::webserver::Web_Net&
Web::_Internal::bind_address(const Web* msg) {
  return *msg->bind_address_;
}
const ::go::pkg::webserver::Web_Grpc&
Web::_Internal::grpc(const Web* msg) {
  return *msg->grpc_;
}
const ::go::pkg::webserver::Web_Http&
Web::_Internal::http(const Web* msg) {
  return *msg->http_;
}
const ::go::pkg::webserver::Web_Debug&
Web::_Internal::debug(const Web* msg) {
  return *msg->debug_;
}
const ::go::pkg::webserver::Web_Monitor&
Web::_Internal::monitor(const Web* msg) {
  return *msg->monitor_;
}
Web::Web(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:go.pkg.webserver.Web)
}
Web::Web(const Web& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bind_address()) {
    bind_address_ = new ::go::pkg::webserver::Web_Net(*from.bind_address_);
  } else {
    bind_address_ = nullptr;
  }
  if (from._internal_has_grpc()) {
    grpc_ = new ::go::pkg::webserver::Web_Grpc(*from.grpc_);
  } else {
    grpc_ = nullptr;
  }
  if (from._internal_has_http()) {
    http_ = new ::go::pkg::webserver::Web_Http(*from.http_);
  } else {
    http_ = nullptr;
  }
  if (from._internal_has_debug()) {
    debug_ = new ::go::pkg::webserver::Web_Debug(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  if (from._internal_has_monitor()) {
    monitor_ = new ::go::pkg::webserver::Web_Monitor(*from.monitor_);
  } else {
    monitor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:go.pkg.webserver.Web)
}

void Web::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Web_pkg_2fwebserver_2fwebserver_2eproto.base);
  ::memset(&bind_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monitor_) -
      reinterpret_cast<char*>(&bind_address_)) + sizeof(monitor_));
}

Web::~Web() {
  // @@protoc_insertion_point(destructor:go.pkg.webserver.Web)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Web::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bind_address_;
  if (this != internal_default_instance()) delete grpc_;
  if (this != internal_default_instance()) delete http_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete monitor_;
}

void Web::ArenaDtor(void* object) {
  Web* _this = reinterpret_cast< Web* >(object);
  (void)_this;
}
void Web::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Web::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Web& Web::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Web_pkg_2fwebserver_2fwebserver_2eproto.base);
  return *internal_default_instance();
}


void Web::Clear() {
// @@protoc_insertion_point(message_clear_start:go.pkg.webserver.Web)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bind_address_ != nullptr) {
    delete bind_address_;
  }
  bind_address_ = nullptr;
  if (GetArena() == nullptr && grpc_ != nullptr) {
    delete grpc_;
  }
  grpc_ = nullptr;
  if (GetArena() == nullptr && http_ != nullptr) {
    delete http_;
  }
  http_ = nullptr;
  if (GetArena() == nullptr && debug_ != nullptr) {
    delete debug_;
  }
  debug_ = nullptr;
  if (GetArena() == nullptr && monitor_ != nullptr) {
    delete monitor_;
  }
  monitor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Web::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .go.pkg.webserver.Web.Net bind_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bind_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .go.pkg.webserver.Web.Grpc grpc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .go.pkg.webserver.Web.Http http = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .go.pkg.webserver.Web.Debug debug = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .go.pkg.webserver.Web.Monitor monitor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_monitor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Web::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:go.pkg.webserver.Web)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .go.pkg.webserver.Web.Net bind_address = 1;
  if (this->has_bind_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bind_address(this), target, stream);
  }

  // .go.pkg.webserver.Web.Grpc grpc = 3;
  if (this->has_grpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::grpc(this), target, stream);
  }

  // .go.pkg.webserver.Web.Http http = 4;
  if (this->has_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::http(this), target, stream);
  }

  // .go.pkg.webserver.Web.Debug debug = 10;
  if (this->has_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::debug(this), target, stream);
  }

  // .go.pkg.webserver.Web.Monitor monitor = 11;
  if (this->has_monitor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::monitor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:go.pkg.webserver.Web)
  return target;
}

size_t Web::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:go.pkg.webserver.Web)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .go.pkg.webserver.Web.Net bind_address = 1;
  if (this->has_bind_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bind_address_);
  }

  // .go.pkg.webserver.Web.Grpc grpc = 3;
  if (this->has_grpc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grpc_);
  }

  // .go.pkg.webserver.Web.Http http = 4;
  if (this->has_http()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *http_);
  }

  // .go.pkg.webserver.Web.Debug debug = 10;
  if (this->has_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debug_);
  }

  // .go.pkg.webserver.Web.Monitor monitor = 11;
  if (this->has_monitor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *monitor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Web::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:go.pkg.webserver.Web)
  GOOGLE_DCHECK_NE(&from, this);
  const Web* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Web>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:go.pkg.webserver.Web)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:go.pkg.webserver.Web)
    MergeFrom(*source);
  }
}

void Web::MergeFrom(const Web& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:go.pkg.webserver.Web)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bind_address()) {
    _internal_mutable_bind_address()->::go::pkg::webserver::Web_Net::MergeFrom(from._internal_bind_address());
  }
  if (from.has_grpc()) {
    _internal_mutable_grpc()->::go::pkg::webserver::Web_Grpc::MergeFrom(from._internal_grpc());
  }
  if (from.has_http()) {
    _internal_mutable_http()->::go::pkg::webserver::Web_Http::MergeFrom(from._internal_http());
  }
  if (from.has_debug()) {
    _internal_mutable_debug()->::go::pkg::webserver::Web_Debug::MergeFrom(from._internal_debug());
  }
  if (from.has_monitor()) {
    _internal_mutable_monitor()->::go::pkg::webserver::Web_Monitor::MergeFrom(from._internal_monitor());
  }
}

void Web::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:go.pkg.webserver.Web)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Web::CopyFrom(const Web& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:go.pkg.webserver.Web)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Web::IsInitialized() const {
  return true;
}

void Web::InternalSwap(Web* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Web, monitor_)
      + sizeof(Web::monitor_)
      - PROTOBUF_FIELD_OFFSET(Web, bind_address_)>(
          reinterpret_cast<char*>(&bind_address_),
          reinterpret_cast<char*>(&other->bind_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Web::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace webserver
}  // namespace pkg
}  // namespace go
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::WebConfig* Arena::CreateMaybeMessage< ::go::pkg::webserver::WebConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::WebConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::Web_Net* Arena::CreateMaybeMessage< ::go::pkg::webserver::Web_Net >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::Web_Net >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::Web_Grpc* Arena::CreateMaybeMessage< ::go::pkg::webserver::Web_Grpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::Web_Grpc >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::Web_Http* Arena::CreateMaybeMessage< ::go::pkg::webserver::Web_Http >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::Web_Http >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::Web_Debug_TestMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::Web_Debug* Arena::CreateMaybeMessage< ::go::pkg::webserver::Web_Debug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::Web_Debug >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::Web_Monitor_Prometheus* Arena::CreateMaybeMessage< ::go::pkg::webserver::Web_Monitor_Prometheus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::Web_Monitor_Prometheus >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::Web_Monitor* Arena::CreateMaybeMessage< ::go::pkg::webserver::Web_Monitor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::Web_Monitor >(arena);
}
template<> PROTOBUF_NOINLINE ::go::pkg::webserver::Web* Arena::CreateMaybeMessage< ::go::pkg::webserver::Web >(Arena* arena) {
  return Arena::CreateMessageInternal< ::go::pkg::webserver::Web >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
