// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/webserver/controller/date/api.proto

#include "pkg/webserver/controller/date/api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace sea {
namespace api {
namespace date {
class NowRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NowRequest>
      _instance;
} _NowRequest_default_instance_;
class NowResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NowResponse>
      _instance;
} _NowResponse_default_instance_;
class NowErrorRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NowErrorRequest>
      _instance;
} _NowErrorRequest_default_instance_;
class NowErrorResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NowErrorResponse>
      _instance;
} _NowErrorResponse_default_instance_;
}  // namespace date
}  // namespace api
}  // namespace sea
namespace protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto {
static void InitDefaultsNowRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sea::api::date::_NowRequest_default_instance_;
    new (ptr) ::sea::api::date::NowRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea::api::date::NowRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NowRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNowRequest}, {}};

static void InitDefaultsNowResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sea::api::date::_NowResponse_default_instance_;
    new (ptr) ::sea::api::date::NowResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea::api::date::NowResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NowResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNowResponse}, {}};

static void InitDefaultsNowErrorRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sea::api::date::_NowErrorRequest_default_instance_;
    new (ptr) ::sea::api::date::NowErrorRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea::api::date::NowErrorRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NowErrorRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNowErrorRequest}, {}};

static void InitDefaultsNowErrorResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sea::api::date::_NowErrorResponse_default_instance_;
    new (ptr) ::sea::api::date::NowErrorResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea::api::date::NowErrorResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NowErrorResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNowErrorResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NowRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NowResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NowErrorRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NowErrorResponse.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowRequest, request_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowResponse, date_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowErrorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowErrorRequest, request_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowErrorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowErrorResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sea::api::date::NowErrorResponse, date_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sea::api::date::NowRequest)},
  { 6, -1, sizeof(::sea::api::date::NowResponse)},
  { 13, -1, sizeof(::sea::api::date::NowErrorRequest)},
  { 19, -1, sizeof(::sea::api::date::NowErrorResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea::api::date::_NowRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea::api::date::_NowResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea::api::date::_NowErrorRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sea::api::date::_NowErrorResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "pkg/webserver/controller/date/api.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'pkg/webserver/controller/date/api.prot"
      "o\022\014sea.api.date\032 google/protobuf/descrip"
      "tor.proto\"+\n\nNowRequest\022\035\n\nrequest_id\030\001 "
      "\001(\tR\tRequestId\"@\n\013NowResponse\022\035\n\nrequest"
      "_id\030\001 \001(\tR\tRequestId\022\022\n\004date\030\002 \001(\tR\004Date"
      "\"0\n\017NowErrorRequest\022\035\n\nrequest_id\030\001 \001(\tR"
      "\tRequestId\"E\n\020NowErrorResponse\022\035\n\nreques"
      "t_id\030\001 \001(\tR\tRequestId\022\022\n\004date\030\002 \001(\tR\004Dat"
      "e2\230\001\n\013DateService\022<\n\003Now\022\030.sea.api.date."
      "NowRequest\032\031.sea.api.date.NowResponse\"\000\022"
      "K\n\010NowError\022\035.sea.api.date.NowErrorReque"
      "st\032\036.sea.api.date.NowErrorResponse\"\000B\003\200\001"
      "\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pkg/webserver/controller/date/api.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto
namespace sea {
namespace api {
namespace date {

// ===================================================================

void NowRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NowRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NowRequest::NowRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::scc_info_NowRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea.api.date.NowRequest)
}
NowRequest::NowRequest(const NowRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  // @@protoc_insertion_point(copy_constructor:sea.api.date.NowRequest)
}

void NowRequest::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NowRequest::~NowRequest() {
  // @@protoc_insertion_point(destructor:sea.api.date.NowRequest)
  SharedDtor();
}

void NowRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NowRequest::descriptor() {
  ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NowRequest& NowRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::scc_info_NowRequest.base);
  return *internal_default_instance();
}


void NowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.api.date.NowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NowRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea.api.date.NowRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1[json_name = "RequestId"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea.api.date.NowRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea.api.date.NowRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea.api.date.NowRequest)
  return false;
#undef DO_
}

void NowRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea.api.date.NowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea.api.date.NowRequest)
}

::google::protobuf::uint8* NowRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea.api.date.NowRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.api.date.NowRequest)
  return target;
}

size_t NowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.api.date.NowRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea.api.date.NowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NowRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NowRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea.api.date.NowRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea.api.date.NowRequest)
    MergeFrom(*source);
  }
}

void NowRequest::MergeFrom(const NowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.api.date.NowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
}

void NowRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea.api.date.NowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowRequest::CopyFrom(const NowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.api.date.NowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowRequest::IsInitialized() const {
  return true;
}

void NowRequest::Swap(NowRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NowRequest::InternalSwap(NowRequest* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NowRequest::GetMetadata() const {
  protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NowResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NowResponse::kRequestIdFieldNumber;
const int NowResponse::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NowResponse::NowResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::scc_info_NowResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea.api.date.NowResponse)
}
NowResponse::NowResponse(const NowResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  // @@protoc_insertion_point(copy_constructor:sea.api.date.NowResponse)
}

void NowResponse::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NowResponse::~NowResponse() {
  // @@protoc_insertion_point(destructor:sea.api.date.NowResponse)
  SharedDtor();
}

void NowResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NowResponse::descriptor() {
  ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NowResponse& NowResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::scc_info_NowResponse.base);
  return *internal_default_instance();
}


void NowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.api.date.NowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NowResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea.api.date.NowResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1[json_name = "RequestId"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea.api.date.NowResponse.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 2[json_name = "Date"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea.api.date.NowResponse.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea.api.date.NowResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea.api.date.NowResponse)
  return false;
#undef DO_
}

void NowResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea.api.date.NowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowResponse.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowResponse.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea.api.date.NowResponse)
}

::google::protobuf::uint8* NowResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea.api.date.NowResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowResponse.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowResponse.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.api.date.NowResponse)
  return target;
}

size_t NowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.api.date.NowResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea.api.date.NowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NowResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NowResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea.api.date.NowResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea.api.date.NowResponse)
    MergeFrom(*source);
  }
}

void NowResponse::MergeFrom(const NowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.api.date.NowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
}

void NowResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea.api.date.NowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowResponse::CopyFrom(const NowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.api.date.NowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowResponse::IsInitialized() const {
  return true;
}

void NowResponse::Swap(NowResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NowResponse::InternalSwap(NowResponse* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NowResponse::GetMetadata() const {
  protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NowErrorRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NowErrorRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NowErrorRequest::NowErrorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::scc_info_NowErrorRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea.api.date.NowErrorRequest)
}
NowErrorRequest::NowErrorRequest(const NowErrorRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  // @@protoc_insertion_point(copy_constructor:sea.api.date.NowErrorRequest)
}

void NowErrorRequest::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NowErrorRequest::~NowErrorRequest() {
  // @@protoc_insertion_point(destructor:sea.api.date.NowErrorRequest)
  SharedDtor();
}

void NowErrorRequest::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NowErrorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NowErrorRequest::descriptor() {
  ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NowErrorRequest& NowErrorRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::scc_info_NowErrorRequest.base);
  return *internal_default_instance();
}


void NowErrorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.api.date.NowErrorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NowErrorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea.api.date.NowErrorRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1[json_name = "RequestId"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea.api.date.NowErrorRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea.api.date.NowErrorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea.api.date.NowErrorRequest)
  return false;
#undef DO_
}

void NowErrorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea.api.date.NowErrorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorRequest.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea.api.date.NowErrorRequest)
}

::google::protobuf::uint8* NowErrorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea.api.date.NowErrorRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorRequest.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.api.date.NowErrorRequest)
  return target;
}

size_t NowErrorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.api.date.NowErrorRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowErrorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea.api.date.NowErrorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NowErrorRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NowErrorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea.api.date.NowErrorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea.api.date.NowErrorRequest)
    MergeFrom(*source);
  }
}

void NowErrorRequest::MergeFrom(const NowErrorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.api.date.NowErrorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
}

void NowErrorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea.api.date.NowErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowErrorRequest::CopyFrom(const NowErrorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.api.date.NowErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowErrorRequest::IsInitialized() const {
  return true;
}

void NowErrorRequest::Swap(NowErrorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NowErrorRequest::InternalSwap(NowErrorRequest* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NowErrorRequest::GetMetadata() const {
  protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NowErrorResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NowErrorResponse::kRequestIdFieldNumber;
const int NowErrorResponse::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NowErrorResponse::NowErrorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::scc_info_NowErrorResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sea.api.date.NowErrorResponse)
}
NowErrorResponse::NowErrorResponse(const NowErrorResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_id().size() > 0) {
    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  // @@protoc_insertion_point(copy_constructor:sea.api.date.NowErrorResponse)
}

void NowErrorResponse::SharedCtor() {
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NowErrorResponse::~NowErrorResponse() {
  // @@protoc_insertion_point(destructor:sea.api.date.NowErrorResponse)
  SharedDtor();
}

void NowErrorResponse::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NowErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NowErrorResponse::descriptor() {
  ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NowErrorResponse& NowErrorResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::scc_info_NowErrorResponse.base);
  return *internal_default_instance();
}


void NowErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.api.date.NowErrorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NowErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sea.api.date.NowErrorResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_id = 1[json_name = "RequestId"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), static_cast<int>(this->request_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea.api.date.NowErrorResponse.request_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 2[json_name = "Date"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sea.api.date.NowErrorResponse.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sea.api.date.NowErrorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sea.api.date.NowErrorResponse)
  return false;
#undef DO_
}

void NowErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sea.api.date.NowErrorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorResponse.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorResponse.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sea.api.date.NowErrorResponse)
}

::google::protobuf::uint8* NowErrorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sea.api.date.NowErrorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), static_cast<int>(this->request_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorResponse.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorResponse.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.api.date.NowErrorResponse)
  return target;
}

size_t NowErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.api.date.NowErrorResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowErrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea.api.date.NowErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NowErrorResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NowErrorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea.api.date.NowErrorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea.api.date.NowErrorResponse)
    MergeFrom(*source);
  }
}

void NowErrorResponse::MergeFrom(const NowErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.api.date.NowErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
}

void NowErrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea.api.date.NowErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowErrorResponse::CopyFrom(const NowErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.api.date.NowErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowErrorResponse::IsInitialized() const {
  return true;
}

void NowErrorResponse::Swap(NowErrorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NowErrorResponse::InternalSwap(NowErrorResponse* other) {
  using std::swap;
  request_id_.Swap(&other->request_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NowErrorResponse::GetMetadata() const {
  protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

DateService::~DateService() {}

const ::google::protobuf::ServiceDescriptor* DateService::descriptor() {
  protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* DateService::GetDescriptor() {
  return descriptor();
}

void DateService::Now(::google::protobuf::RpcController* controller,
                         const ::sea::api::date::NowRequest*,
                         ::sea::api::date::NowResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Now() not implemented.");
  done->Run();
}

void DateService::NowError(::google::protobuf::RpcController* controller,
                         const ::sea::api::date::NowErrorRequest*,
                         ::sea::api::date::NowErrorResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NowError() not implemented.");
  done->Run();
}

void DateService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      Now(controller,
             ::google::protobuf::down_cast<const ::sea::api::date::NowRequest*>(request),
             ::google::protobuf::down_cast< ::sea::api::date::NowResponse*>(response),
             done);
      break;
    case 1:
      NowError(controller,
             ::google::protobuf::down_cast<const ::sea::api::date::NowErrorRequest*>(request),
             ::google::protobuf::down_cast< ::sea::api::date::NowErrorResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DateService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sea::api::date::NowRequest::default_instance();
    case 1:
      return ::sea::api::date::NowErrorRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& DateService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sea::api::date::NowResponse::default_instance();
    case 1:
      return ::sea::api::date::NowErrorResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DateService_Stub::DateService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DateService_Stub::DateService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DateService_Stub::~DateService_Stub() {
  if (owns_channel_) delete channel_;
}

void DateService_Stub::Now(::google::protobuf::RpcController* controller,
                              const ::sea::api::date::NowRequest* request,
                              ::sea::api::date::NowResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DateService_Stub::NowError(::google::protobuf::RpcController* controller,
                              const ::sea::api::date::NowErrorRequest* request,
                              ::sea::api::date::NowErrorResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace date
}  // namespace api
}  // namespace sea
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea::api::date::NowRequest* Arena::CreateMaybeMessage< ::sea::api::date::NowRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea::api::date::NowRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea::api::date::NowResponse* Arena::CreateMaybeMessage< ::sea::api::date::NowResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sea::api::date::NowResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea::api::date::NowErrorRequest* Arena::CreateMaybeMessage< ::sea::api::date::NowErrorRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sea::api::date::NowErrorRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sea::api::date::NowErrorResponse* Arena::CreateMaybeMessage< ::sea::api::date::NowErrorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sea::api::date::NowErrorResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
