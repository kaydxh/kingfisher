// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/webserver/controller/date/api.proto

#include "pkg/webserver/controller/date/api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sea {
namespace api {
namespace date {
class NowRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NowRequest> _instance;
} _NowRequest_default_instance_;
class NowResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NowResponse> _instance;
} _NowResponse_default_instance_;
class NowErrorRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NowErrorRequest> _instance;
} _NowErrorRequest_default_instance_;
class NowErrorResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NowErrorResponse> _instance;
} _NowErrorResponse_default_instance_;
}  // namespace date
}  // namespace api
}  // namespace sea
static void InitDefaultsscc_info_NowErrorRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sea::api::date::_NowErrorRequest_default_instance_;
    new (ptr) ::sea::api::date::NowErrorRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea::api::date::NowErrorRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NowErrorRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NowErrorRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_NowErrorResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sea::api::date::_NowErrorResponse_default_instance_;
    new (ptr) ::sea::api::date::NowErrorResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea::api::date::NowErrorResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NowErrorResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NowErrorResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_NowRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sea::api::date::_NowRequest_default_instance_;
    new (ptr) ::sea::api::date::NowRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea::api::date::NowRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NowRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NowRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto}, {}};

static void InitDefaultsscc_info_NowResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sea::api::date::_NowResponse_default_instance_;
    new (ptr) ::sea::api::date::NowResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sea::api::date::NowResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NowResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NowResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowRequest, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowResponse, date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowErrorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowErrorRequest, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowErrorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowErrorResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::sea::api::date::NowErrorResponse, date_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sea::api::date::NowRequest)},
  { 6, -1, sizeof(::sea::api::date::NowResponse)},
  { 13, -1, sizeof(::sea::api::date::NowErrorRequest)},
  { 19, -1, sizeof(::sea::api::date::NowErrorResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::api::date::_NowRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::api::date::_NowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::api::date::_NowErrorRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sea::api::date::_NowErrorResponse_default_instance_),
};

const char descriptor_table_protodef_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'pkg/webserver/controller/date/api.prot"
  "o\022\014sea.api.date\032 google/protobuf/descrip"
  "tor.proto\"+\n\nNowRequest\022\035\n\nrequest_id\030\001 "
  "\001(\tR\tRequestId\"@\n\013NowResponse\022\035\n\nrequest"
  "_id\030\001 \001(\tR\tRequestId\022\022\n\004date\030\002 \001(\tR\004Date"
  "\"0\n\017NowErrorRequest\022\035\n\nrequest_id\030\001 \001(\tR"
  "\tRequestId\"E\n\020NowErrorResponse\022\035\n\nreques"
  "t_id\030\001 \001(\tR\tRequestId\022\022\n\004date\030\002 \001(\tR\004Dat"
  "e2\230\001\n\013DateService\022<\n\003Now\022\030.sea.api.date."
  "NowRequest\032\031.sea.api.date.NowResponse\"\000\022"
  "K\n\010NowError\022\035.sea.api.date.NowErrorReque"
  "st\032\036.sea.api.date.NowErrorResponse\"\000B\003\200\001"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto_sccs[4] = {
  &scc_info_NowErrorRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base,
  &scc_info_NowErrorResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base,
  &scc_info_NowRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base,
  &scc_info_NowResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto = {
  false, false, descriptor_table_protodef_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto, "pkg/webserver/controller/date/api.proto", 489,
  &descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto_once, descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto_sccs, descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto::offsets,
  file_level_metadata_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto, 4, file_level_enum_descriptors_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto, file_level_service_descriptors_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto)), true);
namespace sea {
namespace api {
namespace date {

// ===================================================================

void NowRequest::InitAsDefaultInstance() {
}
class NowRequest::_Internal {
 public:
};

NowRequest::NowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sea.api.date.NowRequest)
}
NowRequest::NowRequest(const NowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:sea.api.date.NowRequest)
}

void NowRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NowRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NowRequest::~NowRequest() {
  // @@protoc_insertion_point(destructor:sea.api.date.NowRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NowRequest::ArenaDtor(void* object) {
  NowRequest* _this = reinterpret_cast< NowRequest* >(object);
  (void)_this;
}
void NowRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NowRequest& NowRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NowRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base);
  return *internal_default_instance();
}


void NowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.api.date.NowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1[json_name = "RequestId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sea.api.date.NowRequest.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NowRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.api.date.NowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.api.date.NowRequest)
  return target;
}

size_t NowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.api.date.NowRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea.api.date.NowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NowRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NowRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea.api.date.NowRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea.api.date.NowRequest)
    MergeFrom(*source);
  }
}

void NowRequest::MergeFrom(const NowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.api.date.NowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
}

void NowRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea.api.date.NowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowRequest::CopyFrom(const NowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.api.date.NowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowRequest::IsInitialized() const {
  return true;
}

void NowRequest::InternalSwap(NowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NowRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NowResponse::InitAsDefaultInstance() {
}
class NowResponse::_Internal {
 public:
};

NowResponse::NowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sea.api.date.NowResponse)
}
NowResponse::NowResponse(const NowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:sea.api.date.NowResponse)
}

void NowResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NowResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NowResponse::~NowResponse() {
  // @@protoc_insertion_point(destructor:sea.api.date.NowResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NowResponse::ArenaDtor(void* object) {
  NowResponse* _this = reinterpret_cast< NowResponse* >(object);
  (void)_this;
}
void NowResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NowResponse& NowResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NowResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base);
  return *internal_default_instance();
}


void NowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.api.date.NowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1[json_name = "RequestId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sea.api.date.NowResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2[json_name = "Date"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sea.api.date.NowResponse.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.api.date.NowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowResponse.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.api.date.NowResponse)
  return target;
}

size_t NowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.api.date.NowResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea.api.date.NowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea.api.date.NowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea.api.date.NowResponse)
    MergeFrom(*source);
  }
}

void NowResponse::MergeFrom(const NowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.api.date.NowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
}

void NowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea.api.date.NowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowResponse::CopyFrom(const NowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.api.date.NowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowResponse::IsInitialized() const {
  return true;
}

void NowResponse::InternalSwap(NowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NowErrorRequest::InitAsDefaultInstance() {
}
class NowErrorRequest::_Internal {
 public:
};

NowErrorRequest::NowErrorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sea.api.date.NowErrorRequest)
}
NowErrorRequest::NowErrorRequest(const NowErrorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:sea.api.date.NowErrorRequest)
}

void NowErrorRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NowErrorRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NowErrorRequest::~NowErrorRequest() {
  // @@protoc_insertion_point(destructor:sea.api.date.NowErrorRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NowErrorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NowErrorRequest::ArenaDtor(void* object) {
  NowErrorRequest* _this = reinterpret_cast< NowErrorRequest* >(object);
  (void)_this;
}
void NowErrorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NowErrorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NowErrorRequest& NowErrorRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NowErrorRequest_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base);
  return *internal_default_instance();
}


void NowErrorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.api.date.NowErrorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NowErrorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1[json_name = "RequestId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sea.api.date.NowErrorRequest.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NowErrorRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.api.date.NowErrorRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.api.date.NowErrorRequest)
  return target;
}

size_t NowErrorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.api.date.NowErrorRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowErrorRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea.api.date.NowErrorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NowErrorRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NowErrorRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea.api.date.NowErrorRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea.api.date.NowErrorRequest)
    MergeFrom(*source);
  }
}

void NowErrorRequest::MergeFrom(const NowErrorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.api.date.NowErrorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
}

void NowErrorRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea.api.date.NowErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowErrorRequest::CopyFrom(const NowErrorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.api.date.NowErrorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowErrorRequest::IsInitialized() const {
  return true;
}

void NowErrorRequest::InternalSwap(NowErrorRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NowErrorRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NowErrorResponse::InitAsDefaultInstance() {
}
class NowErrorResponse::_Internal {
 public:
};

NowErrorResponse::NowErrorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sea.api.date.NowErrorResponse)
}
NowErrorResponse::NowErrorResponse(const NowErrorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_date().empty()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:sea.api.date.NowErrorResponse)
}

void NowErrorResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NowErrorResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NowErrorResponse::~NowErrorResponse() {
  // @@protoc_insertion_point(destructor:sea.api.date.NowErrorResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NowErrorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NowErrorResponse::ArenaDtor(void* object) {
  NowErrorResponse* _this = reinterpret_cast< NowErrorResponse* >(object);
  (void)_this;
}
void NowErrorResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NowErrorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NowErrorResponse& NowErrorResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NowErrorResponse_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto.base);
  return *internal_default_instance();
}


void NowErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sea.api.date.NowErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NowErrorResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1[json_name = "RequestId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sea.api.date.NowErrorResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 2[json_name = "Date"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sea.api.date.NowErrorResponse.date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NowErrorResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sea.api.date.NowErrorResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sea.api.date.NowErrorResponse.date");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sea.api.date.NowErrorResponse)
  return target;
}

size_t NowErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sea.api.date.NowErrorResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1[json_name = "RequestId"];
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string date = 2[json_name = "Date"];
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_date());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NowErrorResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sea.api.date.NowErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NowErrorResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NowErrorResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sea.api.date.NowErrorResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sea.api.date.NowErrorResponse)
    MergeFrom(*source);
  }
}

void NowErrorResponse::MergeFrom(const NowErrorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sea.api.date.NowErrorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.date().size() > 0) {
    _internal_set_date(from._internal_date());
  }
}

void NowErrorResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sea.api.date.NowErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NowErrorResponse::CopyFrom(const NowErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sea.api.date.NowErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NowErrorResponse::IsInitialized() const {
  return true;
}

void NowErrorResponse::InternalSwap(NowErrorResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NowErrorResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DateService::~DateService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DateService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto);
  return file_level_service_descriptors_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DateService::GetDescriptor() {
  return descriptor();
}

void DateService::Now(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sea::api::date::NowRequest*,
                         ::sea::api::date::NowResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Now() not implemented.");
  done->Run();
}

void DateService::NowError(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::sea::api::date::NowErrorRequest*,
                         ::sea::api::date::NowErrorResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NowError() not implemented.");
  done->Run();
}

void DateService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_pkg_2fwebserver_2fcontroller_2fdate_2fapi_2eproto[0]);
  switch(method->index()) {
    case 0:
      Now(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sea::api::date::NowRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sea::api::date::NowResponse*>(
                 response),
             done);
      break;
    case 1:
      NowError(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::sea::api::date::NowErrorRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::sea::api::date::NowErrorResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DateService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sea::api::date::NowRequest::default_instance();
    case 1:
      return ::sea::api::date::NowErrorRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DateService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sea::api::date::NowResponse::default_instance();
    case 1:
      return ::sea::api::date::NowErrorResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DateService_Stub::DateService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DateService_Stub::DateService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DateService_Stub::~DateService_Stub() {
  if (owns_channel_) delete channel_;
}

void DateService_Stub::Now(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sea::api::date::NowRequest* request,
                              ::sea::api::date::NowResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DateService_Stub::NowError(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::sea::api::date::NowErrorRequest* request,
                              ::sea::api::date::NowErrorResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace date
}  // namespace api
}  // namespace sea
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sea::api::date::NowRequest* Arena::CreateMaybeMessage< ::sea::api::date::NowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::api::date::NowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::api::date::NowResponse* Arena::CreateMaybeMessage< ::sea::api::date::NowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::api::date::NowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::api::date::NowErrorRequest* Arena::CreateMaybeMessage< ::sea::api::date::NowErrorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::api::date::NowErrorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sea::api::date::NowErrorResponse* Arena::CreateMaybeMessage< ::sea::api::date::NowErrorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sea::api::date::NowErrorResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
