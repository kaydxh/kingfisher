// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/cv/image/image.proto

#ifndef PROTOBUF_INCLUDED_pkg_2fcv_2fimage_2fimage_2eproto
#define PROTOBUF_INCLUDED_pkg_2fcv_2fimage_2fimage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pkg_2fcv_2fimage_2fimage_2eproto 

namespace protobuf_pkg_2fcv_2fimage_2fimage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pkg_2fcv_2fimage_2fimage_2eproto
namespace kingfisher {
namespace kcv {
class DecodeOptions;
class DecodeOptionsDefaultTypeInternal;
extern DecodeOptionsDefaultTypeInternal _DecodeOptions_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
}  // namespace kcv
}  // namespace kingfisher
namespace google {
namespace protobuf {
template<> ::kingfisher::kcv::DecodeOptions* Arena::CreateMaybeMessage<::kingfisher::kcv::DecodeOptions>(Arena*);
template<> ::kingfisher::kcv::Rect* Arena::CreateMaybeMessage<::kingfisher::kcv::Rect>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace kingfisher {
namespace kcv {

enum ColorSpace {
  UnknownColorSpace = 0,
  BGRColorSpace = 1,
  BGRAColorSpace = 2,
  GRAYColorSpace = 3,
  GRAYAColorSpace = 4,
  ColorSpace_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ColorSpace_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ColorSpace_IsValid(int value);
const ColorSpace ColorSpace_MIN = UnknownColorSpace;
const ColorSpace ColorSpace_MAX = GRAYAColorSpace;
const int ColorSpace_ARRAYSIZE = ColorSpace_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColorSpace_descriptor();
inline const ::std::string& ColorSpace_Name(ColorSpace value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColorSpace_descriptor(), value);
}
inline bool ColorSpace_Parse(
    const ::std::string& name, ColorSpace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColorSpace>(
    ColorSpace_descriptor(), name, value);
}
// ===================================================================

class DecodeOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kingfisher.kcv.DecodeOptions) */ {
 public:
  DecodeOptions();
  virtual ~DecodeOptions();

  DecodeOptions(const DecodeOptions& from);

  inline DecodeOptions& operator=(const DecodeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecodeOptions(DecodeOptions&& from) noexcept
    : DecodeOptions() {
    *this = ::std::move(from);
  }

  inline DecodeOptions& operator=(DecodeOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeOptions* internal_default_instance() {
    return reinterpret_cast<const DecodeOptions*>(
               &_DecodeOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DecodeOptions* other);
  friend void swap(DecodeOptions& a, DecodeOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecodeOptions* New() const final {
    return CreateMaybeMessage<DecodeOptions>(NULL);
  }

  DecodeOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DecodeOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DecodeOptions& from);
  void MergeFrom(const DecodeOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .kingfisher.kcv.ColorSpace targetColorSpace = 1;
  void clear_targetcolorspace();
  static const int kTargetColorSpaceFieldNumber = 1;
  ::kingfisher::kcv::ColorSpace targetcolorspace() const;
  void set_targetcolorspace(::kingfisher::kcv::ColorSpace value);

  // bool auto_orient = 2;
  void clear_auto_orient();
  static const int kAutoOrientFieldNumber = 2;
  bool auto_orient() const;
  void set_auto_orient(bool value);

  // @@protoc_insertion_point(class_scope:kingfisher.kcv.DecodeOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int targetcolorspace_;
  bool auto_orient_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pkg_2fcv_2fimage_2fimage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kingfisher.kcv.Rect) */ {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Rect* other);
  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(NULL);
  }

  Rect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kingfisher.kcv.Rect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pkg_2fcv_2fimage_2fimage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DecodeOptions

// .kingfisher.kcv.ColorSpace targetColorSpace = 1;
inline void DecodeOptions::clear_targetcolorspace() {
  targetcolorspace_ = 0;
}
inline ::kingfisher::kcv::ColorSpace DecodeOptions::targetcolorspace() const {
  // @@protoc_insertion_point(field_get:kingfisher.kcv.DecodeOptions.targetColorSpace)
  return static_cast< ::kingfisher::kcv::ColorSpace >(targetcolorspace_);
}
inline void DecodeOptions::set_targetcolorspace(::kingfisher::kcv::ColorSpace value) {
  
  targetcolorspace_ = value;
  // @@protoc_insertion_point(field_set:kingfisher.kcv.DecodeOptions.targetColorSpace)
}

// bool auto_orient = 2;
inline void DecodeOptions::clear_auto_orient() {
  auto_orient_ = false;
}
inline bool DecodeOptions::auto_orient() const {
  // @@protoc_insertion_point(field_get:kingfisher.kcv.DecodeOptions.auto_orient)
  return auto_orient_;
}
inline void DecodeOptions::set_auto_orient(bool value) {
  
  auto_orient_ = value;
  // @@protoc_insertion_point(field_set:kingfisher.kcv.DecodeOptions.auto_orient)
}

// -------------------------------------------------------------------

// Rect

// int32 x = 1;
inline void Rect::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:kingfisher.kcv.Rect.x)
  return x_;
}
inline void Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:kingfisher.kcv.Rect.x)
}

// int32 y = 2;
inline void Rect::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:kingfisher.kcv.Rect.y)
  return y_;
}
inline void Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:kingfisher.kcv.Rect.y)
}

// int32 height = 3;
inline void Rect::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Rect::height() const {
  // @@protoc_insertion_point(field_get:kingfisher.kcv.Rect.height)
  return height_;
}
inline void Rect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:kingfisher.kcv.Rect.height)
}

// int32 width = 4;
inline void Rect::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Rect::width() const {
  // @@protoc_insertion_point(field_get:kingfisher.kcv.Rect.width)
  return width_;
}
inline void Rect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:kingfisher.kcv.Rect.width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kcv
}  // namespace kingfisher

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kingfisher::kcv::ColorSpace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kingfisher::kcv::ColorSpace>() {
  return ::kingfisher::kcv::ColorSpace_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pkg_2fcv_2fimage_2fimage_2eproto
