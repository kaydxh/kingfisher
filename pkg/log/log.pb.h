// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/log/log.proto

#ifndef PROTOBUF_INCLUDED_pkg_2flog_2flog_2eproto
#define PROTOBUF_INCLUDED_pkg_2flog_2flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pkg_2flog_2flog_2eproto 

namespace protobuf_pkg_2flog_2flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pkg_2flog_2flog_2eproto
namespace api {
namespace v1 {
namespace viper {
namespace logs {
class Log;
class LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class LogConfig;
class LogConfigDefaultTypeInternal;
extern LogConfigDefaultTypeInternal _LogConfig_default_instance_;
}  // namespace logs
}  // namespace viper
}  // namespace v1
}  // namespace api
namespace google {
namespace protobuf {
template<> ::api::v1::viper::logs::Log* Arena::CreateMaybeMessage<::api::v1::viper::logs::Log>(Arena*);
template<> ::api::v1::viper::logs::LogConfig* Arena::CreateMaybeMessage<::api::v1::viper::logs::LogConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace api {
namespace v1 {
namespace viper {
namespace logs {

enum Log_Level {
  Log_Level_panic = 0,
  Log_Level_fatal = 1,
  Log_Level_error = 2,
  Log_Level_warn = 3,
  Log_Level_info = 4,
  Log_Level_debug = 5,
  Log_Level_trace = 6,
  Log_Level_Log_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Log_Level_Log_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Log_Level_IsValid(int value);
const Log_Level Log_Level_Level_MIN = Log_Level_panic;
const Log_Level Log_Level_Level_MAX = Log_Level_trace;
const int Log_Level_Level_ARRAYSIZE = Log_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* Log_Level_descriptor();
inline const ::std::string& Log_Level_Name(Log_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    Log_Level_descriptor(), value);
}
inline bool Log_Level_Parse(
    const ::std::string& name, Log_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Log_Level>(
    Log_Level_descriptor(), name, value);
}
enum Log_Formatter {
  Log_Formatter_text = 0,
  Log_Formatter_json = 1,
  Log_Formatter_glog = 2,
  Log_Formatter_Log_Formatter_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Log_Formatter_Log_Formatter_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Log_Formatter_IsValid(int value);
const Log_Formatter Log_Formatter_Formatter_MIN = Log_Formatter_text;
const Log_Formatter Log_Formatter_Formatter_MAX = Log_Formatter_glog;
const int Log_Formatter_Formatter_ARRAYSIZE = Log_Formatter_Formatter_MAX + 1;

const ::google::protobuf::EnumDescriptor* Log_Formatter_descriptor();
inline const ::std::string& Log_Formatter_Name(Log_Formatter value) {
  return ::google::protobuf::internal::NameOfEnum(
    Log_Formatter_descriptor(), value);
}
inline bool Log_Formatter_Parse(
    const ::std::string& name, Log_Formatter* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Log_Formatter>(
    Log_Formatter_descriptor(), name, value);
}
enum Log_Redirct {
  Log_Redirct_stdout = 0,
  Log_Redirct_file = 1,
  Log_Redirct_Log_Redirct_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Log_Redirct_Log_Redirct_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Log_Redirct_IsValid(int value);
const Log_Redirct Log_Redirct_Redirct_MIN = Log_Redirct_stdout;
const Log_Redirct Log_Redirct_Redirct_MAX = Log_Redirct_file;
const int Log_Redirct_Redirct_ARRAYSIZE = Log_Redirct_Redirct_MAX + 1;

const ::google::protobuf::EnumDescriptor* Log_Redirct_descriptor();
inline const ::std::string& Log_Redirct_Name(Log_Redirct value) {
  return ::google::protobuf::internal::NameOfEnum(
    Log_Redirct_descriptor(), value);
}
inline bool Log_Redirct_Parse(
    const ::std::string& name, Log_Redirct* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Log_Redirct>(
    Log_Redirct_descriptor(), name, value);
}
// ===================================================================

class LogConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.viper.logs.LogConfig) */ {
 public:
  LogConfig();
  virtual ~LogConfig();

  LogConfig(const LogConfig& from);

  inline LogConfig& operator=(const LogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogConfig(LogConfig&& from) noexcept
    : LogConfig() {
    *this = ::std::move(from);
  }

  inline LogConfig& operator=(LogConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogConfig* internal_default_instance() {
    return reinterpret_cast<const LogConfig*>(
               &_LogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogConfig* other);
  friend void swap(LogConfig& a, LogConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogConfig* New() const final {
    return CreateMaybeMessage<LogConfig>(NULL);
  }

  LogConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogConfig& from);
  void MergeFrom(const LogConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .api.v1.viper.logs.Log log = 1;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 1;
  private:
  const ::api::v1::viper::logs::Log& _internal_log() const;
  public:
  const ::api::v1::viper::logs::Log& log() const;
  ::api::v1::viper::logs::Log* release_log();
  ::api::v1::viper::logs::Log* mutable_log();
  void set_allocated_log(::api::v1::viper::logs::Log* log);

  // @@protoc_insertion_point(class_scope:api.v1.viper.logs.LogConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::api::v1::viper::logs::Log* log_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pkg_2flog_2flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Log : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.v1.viper.logs.Log) */ {
 public:
  Log();
  virtual ~Log();

  Log(const Log& from);

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(Log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Log* other);
  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Log* New() const final {
    return CreateMaybeMessage<Log>(NULL);
  }

  Log* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Log_Level Level;
  static const Level panic =
    Log_Level_panic;
  static const Level fatal =
    Log_Level_fatal;
  static const Level error =
    Log_Level_error;
  static const Level warn =
    Log_Level_warn;
  static const Level info =
    Log_Level_info;
  static const Level debug =
    Log_Level_debug;
  static const Level trace =
    Log_Level_trace;
  static inline bool Level_IsValid(int value) {
    return Log_Level_IsValid(value);
  }
  static const Level Level_MIN =
    Log_Level_Level_MIN;
  static const Level Level_MAX =
    Log_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    Log_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return Log_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return Log_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return Log_Level_Parse(name, value);
  }

  typedef Log_Formatter Formatter;
  static const Formatter text =
    Log_Formatter_text;
  static const Formatter json =
    Log_Formatter_json;
  static const Formatter glog =
    Log_Formatter_glog;
  static inline bool Formatter_IsValid(int value) {
    return Log_Formatter_IsValid(value);
  }
  static const Formatter Formatter_MIN =
    Log_Formatter_Formatter_MIN;
  static const Formatter Formatter_MAX =
    Log_Formatter_Formatter_MAX;
  static const int Formatter_ARRAYSIZE =
    Log_Formatter_Formatter_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Formatter_descriptor() {
    return Log_Formatter_descriptor();
  }
  static inline const ::std::string& Formatter_Name(Formatter value) {
    return Log_Formatter_Name(value);
  }
  static inline bool Formatter_Parse(const ::std::string& name,
      Formatter* value) {
    return Log_Formatter_Parse(name, value);
  }

  typedef Log_Redirct Redirct;
  static const Redirct stdout =
    Log_Redirct_stdout;
  static const Redirct file =
    Log_Redirct_file;
  static inline bool Redirct_IsValid(int value) {
    return Log_Redirct_IsValid(value);
  }
  static const Redirct Redirct_MIN =
    Log_Redirct_Redirct_MIN;
  static const Redirct Redirct_MAX =
    Log_Redirct_Redirct_MAX;
  static const int Redirct_ARRAYSIZE =
    Log_Redirct_Redirct_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Redirct_descriptor() {
    return Log_Redirct_descriptor();
  }
  static inline const ::std::string& Redirct_Name(Redirct value) {
    return Log_Redirct_Name(value);
  }
  static inline bool Redirct_Parse(const ::std::string& name,
      Redirct* value) {
    return Log_Redirct_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string filepath = 3;
  void clear_filepath();
  static const int kFilepathFieldNumber = 3;
  const ::std::string& filepath() const;
  void set_filepath(const ::std::string& value);
  #if LANG_CXX11
  void set_filepath(::std::string&& value);
  #endif
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  ::std::string* mutable_filepath();
  ::std::string* release_filepath();
  void set_allocated_filepath(::std::string* filepath);

  // .google.protobuf.Duration max_age = 4;
  bool has_max_age() const;
  void clear_max_age();
  static const int kMaxAgeFieldNumber = 4;
  private:
  const ::google::protobuf::Duration& _internal_max_age() const;
  public:
  const ::google::protobuf::Duration& max_age() const;
  ::google::protobuf::Duration* release_max_age();
  ::google::protobuf::Duration* mutable_max_age();
  void set_allocated_max_age(::google::protobuf::Duration* max_age);

  // .google.protobuf.Duration rotate_interval = 6;
  bool has_rotate_interval() const;
  void clear_rotate_interval();
  static const int kRotateIntervalFieldNumber = 6;
  private:
  const ::google::protobuf::Duration& _internal_rotate_interval() const;
  public:
  const ::google::protobuf::Duration& rotate_interval() const;
  ::google::protobuf::Duration* release_rotate_interval();
  ::google::protobuf::Duration* mutable_rotate_interval();
  void set_allocated_rotate_interval(::google::protobuf::Duration* rotate_interval);

  // .api.v1.viper.logs.Log.Level level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::api::v1::viper::logs::Log_Level level() const;
  void set_level(::api::v1::viper::logs::Log_Level value);

  // .api.v1.viper.logs.Log.Formatter formatter = 2;
  void clear_formatter();
  static const int kFormatterFieldNumber = 2;
  ::api::v1::viper::logs::Log_Formatter formatter() const;
  void set_formatter(::api::v1::viper::logs::Log_Formatter value);

  // int64 max_count = 5;
  void clear_max_count();
  static const int kMaxCountFieldNumber = 5;
  ::google::protobuf::int64 max_count() const;
  void set_max_count(::google::protobuf::int64 value);

  // int64 rotate_size = 7;
  void clear_rotate_size();
  static const int kRotateSizeFieldNumber = 7;
  ::google::protobuf::int64 rotate_size() const;
  void set_rotate_size(::google::protobuf::int64 value);

  // bool report_caller = 8;
  void clear_report_caller();
  static const int kReportCallerFieldNumber = 8;
  bool report_caller() const;
  void set_report_caller(bool value);

  // bool enable_goroutine_id = 9;
  void clear_enable_goroutine_id();
  static const int kEnableGoroutineIdFieldNumber = 9;
  bool enable_goroutine_id() const;
  void set_enable_goroutine_id(bool value);

  // .api.v1.viper.logs.Log.Redirct redirct = 10;
  void clear_redirct();
  static const int kRedirctFieldNumber = 10;
  ::api::v1::viper::logs::Log_Redirct redirct() const;
  void set_redirct(::api::v1::viper::logs::Log_Redirct value);

  // @@protoc_insertion_point(class_scope:api.v1.viper.logs.Log)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filepath_;
  ::google::protobuf::Duration* max_age_;
  ::google::protobuf::Duration* rotate_interval_;
  int level_;
  int formatter_;
  ::google::protobuf::int64 max_count_;
  ::google::protobuf::int64 rotate_size_;
  bool report_caller_;
  bool enable_goroutine_id_;
  int redirct_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pkg_2flog_2flog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogConfig

// .api.v1.viper.logs.Log log = 1;
inline bool LogConfig::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void LogConfig::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::api::v1::viper::logs::Log& LogConfig::_internal_log() const {
  return *log_;
}
inline const ::api::v1::viper::logs::Log& LogConfig::log() const {
  const ::api::v1::viper::logs::Log* p = log_;
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.LogConfig.log)
  return p != NULL ? *p : *reinterpret_cast<const ::api::v1::viper::logs::Log*>(
      &::api::v1::viper::logs::_Log_default_instance_);
}
inline ::api::v1::viper::logs::Log* LogConfig::release_log() {
  // @@protoc_insertion_point(field_release:api.v1.viper.logs.LogConfig.log)
  
  ::api::v1::viper::logs::Log* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::api::v1::viper::logs::Log* LogConfig::mutable_log() {
  
  if (log_ == NULL) {
    auto* p = CreateMaybeMessage<::api::v1::viper::logs::Log>(GetArenaNoVirtual());
    log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.v1.viper.logs.LogConfig.log)
  return log_;
}
inline void LogConfig::set_allocated_log(::api::v1::viper::logs::Log* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:api.v1.viper.logs.LogConfig.log)
}

// -------------------------------------------------------------------

// Log

// .api.v1.viper.logs.Log.Level level = 1;
inline void Log::clear_level() {
  level_ = 0;
}
inline ::api::v1::viper::logs::Log_Level Log::level() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.level)
  return static_cast< ::api::v1::viper::logs::Log_Level >(level_);
}
inline void Log::set_level(::api::v1::viper::logs::Log_Level value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.level)
}

// .api.v1.viper.logs.Log.Formatter formatter = 2;
inline void Log::clear_formatter() {
  formatter_ = 0;
}
inline ::api::v1::viper::logs::Log_Formatter Log::formatter() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.formatter)
  return static_cast< ::api::v1::viper::logs::Log_Formatter >(formatter_);
}
inline void Log::set_formatter(::api::v1::viper::logs::Log_Formatter value) {
  
  formatter_ = value;
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.formatter)
}

// string filepath = 3;
inline void Log::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Log::filepath() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.filepath)
  return filepath_.GetNoArena();
}
inline void Log::set_filepath(const ::std::string& value) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.filepath)
}
#if LANG_CXX11
inline void Log::set_filepath(::std::string&& value) {
  
  filepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:api.v1.viper.logs.Log.filepath)
}
#endif
inline void Log::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:api.v1.viper.logs.Log.filepath)
}
inline void Log::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:api.v1.viper.logs.Log.filepath)
}
inline ::std::string* Log::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:api.v1.viper.logs.Log.filepath)
  return filepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Log::release_filepath() {
  // @@protoc_insertion_point(field_release:api.v1.viper.logs.Log.filepath)
  
  return filepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Log::set_allocated_filepath(::std::string* filepath) {
  if (filepath != NULL) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:api.v1.viper.logs.Log.filepath)
}

// .google.protobuf.Duration max_age = 4;
inline bool Log::has_max_age() const {
  return this != internal_default_instance() && max_age_ != NULL;
}
inline const ::google::protobuf::Duration& Log::_internal_max_age() const {
  return *max_age_;
}
inline const ::google::protobuf::Duration& Log::max_age() const {
  const ::google::protobuf::Duration* p = max_age_;
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.max_age)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Log::release_max_age() {
  // @@protoc_insertion_point(field_release:api.v1.viper.logs.Log.max_age)
  
  ::google::protobuf::Duration* temp = max_age_;
  max_age_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Log::mutable_max_age() {
  
  if (max_age_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    max_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.v1.viper.logs.Log.max_age)
  return max_age_;
}
inline void Log::set_allocated_max_age(::google::protobuf::Duration* max_age) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(max_age_);
  }
  if (max_age) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(max_age)->GetArena();
    if (message_arena != submessage_arena) {
      max_age = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_age, submessage_arena);
    }
    
  } else {
    
  }
  max_age_ = max_age;
  // @@protoc_insertion_point(field_set_allocated:api.v1.viper.logs.Log.max_age)
}

// int64 max_count = 5;
inline void Log::clear_max_count() {
  max_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Log::max_count() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.max_count)
  return max_count_;
}
inline void Log::set_max_count(::google::protobuf::int64 value) {
  
  max_count_ = value;
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.max_count)
}

// .google.protobuf.Duration rotate_interval = 6;
inline bool Log::has_rotate_interval() const {
  return this != internal_default_instance() && rotate_interval_ != NULL;
}
inline const ::google::protobuf::Duration& Log::_internal_rotate_interval() const {
  return *rotate_interval_;
}
inline const ::google::protobuf::Duration& Log::rotate_interval() const {
  const ::google::protobuf::Duration* p = rotate_interval_;
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.rotate_interval)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Log::release_rotate_interval() {
  // @@protoc_insertion_point(field_release:api.v1.viper.logs.Log.rotate_interval)
  
  ::google::protobuf::Duration* temp = rotate_interval_;
  rotate_interval_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Log::mutable_rotate_interval() {
  
  if (rotate_interval_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    rotate_interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:api.v1.viper.logs.Log.rotate_interval)
  return rotate_interval_;
}
inline void Log::set_allocated_rotate_interval(::google::protobuf::Duration* rotate_interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(rotate_interval_);
  }
  if (rotate_interval) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(rotate_interval)->GetArena();
    if (message_arena != submessage_arena) {
      rotate_interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotate_interval, submessage_arena);
    }
    
  } else {
    
  }
  rotate_interval_ = rotate_interval;
  // @@protoc_insertion_point(field_set_allocated:api.v1.viper.logs.Log.rotate_interval)
}

// int64 rotate_size = 7;
inline void Log::clear_rotate_size() {
  rotate_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Log::rotate_size() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.rotate_size)
  return rotate_size_;
}
inline void Log::set_rotate_size(::google::protobuf::int64 value) {
  
  rotate_size_ = value;
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.rotate_size)
}

// bool report_caller = 8;
inline void Log::clear_report_caller() {
  report_caller_ = false;
}
inline bool Log::report_caller() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.report_caller)
  return report_caller_;
}
inline void Log::set_report_caller(bool value) {
  
  report_caller_ = value;
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.report_caller)
}

// bool enable_goroutine_id = 9;
inline void Log::clear_enable_goroutine_id() {
  enable_goroutine_id_ = false;
}
inline bool Log::enable_goroutine_id() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.enable_goroutine_id)
  return enable_goroutine_id_;
}
inline void Log::set_enable_goroutine_id(bool value) {
  
  enable_goroutine_id_ = value;
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.enable_goroutine_id)
}

// .api.v1.viper.logs.Log.Redirct redirct = 10;
inline void Log::clear_redirct() {
  redirct_ = 0;
}
inline ::api::v1::viper::logs::Log_Redirct Log::redirct() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.redirct)
  return static_cast< ::api::v1::viper::logs::Log_Redirct >(redirct_);
}
inline void Log::set_redirct(::api::v1::viper::logs::Log_Redirct value) {
  
  redirct_ = value;
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.redirct)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logs
}  // namespace viper
}  // namespace v1
}  // namespace api

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::api::v1::viper::logs::Log_Level> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::viper::logs::Log_Level>() {
  return ::api::v1::viper::logs::Log_Level_descriptor();
}
template <> struct is_proto_enum< ::api::v1::viper::logs::Log_Formatter> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::viper::logs::Log_Formatter>() {
  return ::api::v1::viper::logs::Log_Formatter_descriptor();
}
template <> struct is_proto_enum< ::api::v1::viper::logs::Log_Redirct> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::viper::logs::Log_Redirct>() {
  return ::api::v1::viper::logs::Log_Redirct_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pkg_2flog_2flog_2eproto
