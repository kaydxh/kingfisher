// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/log/log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pkg_2flog_2flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pkg_2flog_2flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pkg_2flog_2flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pkg_2flog_2flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2flog_2flog_2eproto;
namespace api {
namespace v1 {
namespace viper {
namespace logs {
class Log;
class LogDefaultTypeInternal;
extern LogDefaultTypeInternal _Log_default_instance_;
class LogConfig;
class LogConfigDefaultTypeInternal;
extern LogConfigDefaultTypeInternal _LogConfig_default_instance_;
}  // namespace logs
}  // namespace viper
}  // namespace v1
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> ::api::v1::viper::logs::Log* Arena::CreateMaybeMessage<::api::v1::viper::logs::Log>(Arena*);
template<> ::api::v1::viper::logs::LogConfig* Arena::CreateMaybeMessage<::api::v1::viper::logs::LogConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api {
namespace v1 {
namespace viper {
namespace logs {

enum Log_Level : int {
  Log_Level_panic = 0,
  Log_Level_fatal = 1,
  Log_Level_error = 2,
  Log_Level_warn = 3,
  Log_Level_info = 4,
  Log_Level_debug = 5,
  Log_Level_trace = 6,
  Log_Level_Log_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Log_Level_Log_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Log_Level_IsValid(int value);
constexpr Log_Level Log_Level_Level_MIN = Log_Level_panic;
constexpr Log_Level Log_Level_Level_MAX = Log_Level_trace;
constexpr int Log_Level_Level_ARRAYSIZE = Log_Level_Level_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Log_Level_descriptor();
template<typename T>
inline const std::string& Log_Level_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Log_Level>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Log_Level_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Log_Level_descriptor(), enum_t_value);
}
inline bool Log_Level_Parse(
    const std::string& name, Log_Level* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Log_Level>(
    Log_Level_descriptor(), name, value);
}
enum Log_Formatter : int {
  Log_Formatter_text = 0,
  Log_Formatter_json = 1,
  Log_Formatter_glog = 2,
  Log_Formatter_Log_Formatter_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Log_Formatter_Log_Formatter_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Log_Formatter_IsValid(int value);
constexpr Log_Formatter Log_Formatter_Formatter_MIN = Log_Formatter_text;
constexpr Log_Formatter Log_Formatter_Formatter_MAX = Log_Formatter_glog;
constexpr int Log_Formatter_Formatter_ARRAYSIZE = Log_Formatter_Formatter_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Log_Formatter_descriptor();
template<typename T>
inline const std::string& Log_Formatter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Log_Formatter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Log_Formatter_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Log_Formatter_descriptor(), enum_t_value);
}
inline bool Log_Formatter_Parse(
    const std::string& name, Log_Formatter* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Log_Formatter>(
    Log_Formatter_descriptor(), name, value);
}
enum Log_Redirct : int {
  Log_Redirct_stdout = 0,
  Log_Redirct_file = 1,
  Log_Redirct_Log_Redirct_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Log_Redirct_Log_Redirct_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Log_Redirct_IsValid(int value);
constexpr Log_Redirct Log_Redirct_Redirct_MIN = Log_Redirct_stdout;
constexpr Log_Redirct Log_Redirct_Redirct_MAX = Log_Redirct_file;
constexpr int Log_Redirct_Redirct_ARRAYSIZE = Log_Redirct_Redirct_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Log_Redirct_descriptor();
template<typename T>
inline const std::string& Log_Redirct_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Log_Redirct>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Log_Redirct_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Log_Redirct_descriptor(), enum_t_value);
}
inline bool Log_Redirct_Parse(
    const std::string& name, Log_Redirct* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Log_Redirct>(
    Log_Redirct_descriptor(), name, value);
}
// ===================================================================

class LogConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.viper.logs.LogConfig) */ {
 public:
  inline LogConfig() : LogConfig(nullptr) {};
  virtual ~LogConfig();

  LogConfig(const LogConfig& from);
  LogConfig(LogConfig&& from) noexcept
    : LogConfig() {
    *this = ::std::move(from);
  }

  inline LogConfig& operator=(const LogConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogConfig& operator=(LogConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogConfig* internal_default_instance() {
    return reinterpret_cast<const LogConfig*>(
               &_LogConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogConfig& a, LogConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LogConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogConfig* New() const final {
    return CreateMaybeMessage<LogConfig>(nullptr);
  }

  LogConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogConfig& from);
  void MergeFrom(const LogConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.viper.logs.LogConfig";
  }
  protected:
  explicit LogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pkg_2flog_2flog_2eproto);
    return ::descriptor_table_pkg_2flog_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 1,
  };
  // .api.v1.viper.logs.Log log = 1;
  bool has_log() const;
  private:
  bool _internal_has_log() const;
  public:
  void clear_log();
  const ::api::v1::viper::logs::Log& log() const;
  ::api::v1::viper::logs::Log* release_log();
  ::api::v1::viper::logs::Log* mutable_log();
  void set_allocated_log(::api::v1::viper::logs::Log* log);
  private:
  const ::api::v1::viper::logs::Log& _internal_log() const;
  ::api::v1::viper::logs::Log* _internal_mutable_log();
  public:
  void unsafe_arena_set_allocated_log(
      ::api::v1::viper::logs::Log* log);
  ::api::v1::viper::logs::Log* unsafe_arena_release_log();

  // @@protoc_insertion_point(class_scope:api.v1.viper.logs.LogConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api::v1::viper::logs::Log* log_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2flog_2flog_2eproto;
};
// -------------------------------------------------------------------

class Log PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.v1.viper.logs.Log) */ {
 public:
  inline Log() : Log(nullptr) {};
  virtual ~Log();

  Log(const Log& from);
  Log(Log&& from) noexcept
    : Log() {
    *this = ::std::move(from);
  }

  inline Log& operator=(const Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline Log& operator=(Log&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Log* internal_default_instance() {
    return reinterpret_cast<const Log*>(
               &_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Log& a, Log& b) {
    a.Swap(&b);
  }
  inline void Swap(Log* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Log* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Log* New() const final {
    return CreateMaybeMessage<Log>(nullptr);
  }

  Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Log>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Log& from);
  void MergeFrom(const Log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Log* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.v1.viper.logs.Log";
  }
  protected:
  explicit Log(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pkg_2flog_2flog_2eproto);
    return ::descriptor_table_pkg_2flog_2flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Log_Level Level;
  static constexpr Level panic =
    Log_Level_panic;
  static constexpr Level fatal =
    Log_Level_fatal;
  static constexpr Level error =
    Log_Level_error;
  static constexpr Level warn =
    Log_Level_warn;
  static constexpr Level info =
    Log_Level_info;
  static constexpr Level debug =
    Log_Level_debug;
  static constexpr Level trace =
    Log_Level_trace;
  static inline bool Level_IsValid(int value) {
    return Log_Level_IsValid(value);
  }
  static constexpr Level Level_MIN =
    Log_Level_Level_MIN;
  static constexpr Level Level_MAX =
    Log_Level_Level_MAX;
  static constexpr int Level_ARRAYSIZE =
    Log_Level_Level_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Level_descriptor() {
    return Log_Level_descriptor();
  }
  template<typename T>
  static inline const std::string& Level_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Level>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Level_Name.");
    return Log_Level_Name(enum_t_value);
  }
  static inline bool Level_Parse(const std::string& name,
      Level* value) {
    return Log_Level_Parse(name, value);
  }

  typedef Log_Formatter Formatter;
  static constexpr Formatter text =
    Log_Formatter_text;
  static constexpr Formatter json =
    Log_Formatter_json;
  static constexpr Formatter glog =
    Log_Formatter_glog;
  static inline bool Formatter_IsValid(int value) {
    return Log_Formatter_IsValid(value);
  }
  static constexpr Formatter Formatter_MIN =
    Log_Formatter_Formatter_MIN;
  static constexpr Formatter Formatter_MAX =
    Log_Formatter_Formatter_MAX;
  static constexpr int Formatter_ARRAYSIZE =
    Log_Formatter_Formatter_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Formatter_descriptor() {
    return Log_Formatter_descriptor();
  }
  template<typename T>
  static inline const std::string& Formatter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Formatter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Formatter_Name.");
    return Log_Formatter_Name(enum_t_value);
  }
  static inline bool Formatter_Parse(const std::string& name,
      Formatter* value) {
    return Log_Formatter_Parse(name, value);
  }

  typedef Log_Redirct Redirct;
  static constexpr Redirct stdout =
    Log_Redirct_stdout;
  static constexpr Redirct file =
    Log_Redirct_file;
  static inline bool Redirct_IsValid(int value) {
    return Log_Redirct_IsValid(value);
  }
  static constexpr Redirct Redirct_MIN =
    Log_Redirct_Redirct_MIN;
  static constexpr Redirct Redirct_MAX =
    Log_Redirct_Redirct_MAX;
  static constexpr int Redirct_ARRAYSIZE =
    Log_Redirct_Redirct_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Redirct_descriptor() {
    return Log_Redirct_descriptor();
  }
  template<typename T>
  static inline const std::string& Redirct_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Redirct>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Redirct_Name.");
    return Log_Redirct_Name(enum_t_value);
  }
  static inline bool Redirct_Parse(const std::string& name,
      Redirct* value) {
    return Log_Redirct_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilepathFieldNumber = 3,
    kRotateIntervalFieldNumber = 6,
    kLevelFieldNumber = 1,
    kFormatterFieldNumber = 2,
    kMaxAgeFieldNumber = 4,
    kMaxCountFieldNumber = 5,
    kRotateSizeFieldNumber = 7,
    kReportCallerFieldNumber = 8,
    kEnableGoroutineIdFieldNumber = 9,
    kRedirctFieldNumber = 10,
  };
  // string filepath = 3;
  void clear_filepath();
  const std::string& filepath() const;
  void set_filepath(const std::string& value);
  void set_filepath(std::string&& value);
  void set_filepath(const char* value);
  void set_filepath(const char* value, size_t size);
  std::string* mutable_filepath();
  std::string* release_filepath();
  void set_allocated_filepath(std::string* filepath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filepath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filepath(
      std::string* filepath);
  private:
  const std::string& _internal_filepath() const;
  void _internal_set_filepath(const std::string& value);
  std::string* _internal_mutable_filepath();
  public:

  // .google.protobuf.Duration rotate_interval = 6;
  bool has_rotate_interval() const;
  private:
  bool _internal_has_rotate_interval() const;
  public:
  void clear_rotate_interval();
  const PROTOBUF_NAMESPACE_ID::Duration& rotate_interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_rotate_interval();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_rotate_interval();
  void set_allocated_rotate_interval(PROTOBUF_NAMESPACE_ID::Duration* rotate_interval);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_rotate_interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_rotate_interval();
  public:
  void unsafe_arena_set_allocated_rotate_interval(
      PROTOBUF_NAMESPACE_ID::Duration* rotate_interval);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_rotate_interval();

  // .api.v1.viper.logs.Log.Level level = 1;
  void clear_level();
  ::api::v1::viper::logs::Log_Level level() const;
  void set_level(::api::v1::viper::logs::Log_Level value);
  private:
  ::api::v1::viper::logs::Log_Level _internal_level() const;
  void _internal_set_level(::api::v1::viper::logs::Log_Level value);
  public:

  // .api.v1.viper.logs.Log.Formatter formatter = 2;
  void clear_formatter();
  ::api::v1::viper::logs::Log_Formatter formatter() const;
  void set_formatter(::api::v1::viper::logs::Log_Formatter value);
  private:
  ::api::v1::viper::logs::Log_Formatter _internal_formatter() const;
  void _internal_set_formatter(::api::v1::viper::logs::Log_Formatter value);
  public:

  // int64 max_age = 4;
  void clear_max_age();
  ::PROTOBUF_NAMESPACE_ID::int64 max_age() const;
  void set_max_age(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_age() const;
  void _internal_set_max_age(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_count = 5;
  void clear_max_count();
  ::PROTOBUF_NAMESPACE_ID::int64 max_count() const;
  void set_max_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_count() const;
  void _internal_set_max_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rotate_size = 7;
  void clear_rotate_size();
  ::PROTOBUF_NAMESPACE_ID::int64 rotate_size() const;
  void set_rotate_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rotate_size() const;
  void _internal_set_rotate_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool report_caller = 8;
  void clear_report_caller();
  bool report_caller() const;
  void set_report_caller(bool value);
  private:
  bool _internal_report_caller() const;
  void _internal_set_report_caller(bool value);
  public:

  // bool enable_goroutine_id = 9;
  void clear_enable_goroutine_id();
  bool enable_goroutine_id() const;
  void set_enable_goroutine_id(bool value);
  private:
  bool _internal_enable_goroutine_id() const;
  void _internal_set_enable_goroutine_id(bool value);
  public:

  // .api.v1.viper.logs.Log.Redirct redirct = 10;
  void clear_redirct();
  ::api::v1::viper::logs::Log_Redirct redirct() const;
  void set_redirct(::api::v1::viper::logs::Log_Redirct value);
  private:
  ::api::v1::viper::logs::Log_Redirct _internal_redirct() const;
  void _internal_set_redirct(::api::v1::viper::logs::Log_Redirct value);
  public:

  // @@protoc_insertion_point(class_scope:api.v1.viper.logs.Log)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filepath_;
  PROTOBUF_NAMESPACE_ID::Duration* rotate_interval_;
  int level_;
  int formatter_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 rotate_size_;
  bool report_caller_;
  bool enable_goroutine_id_;
  int redirct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2flog_2flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogConfig

// .api.v1.viper.logs.Log log = 1;
inline bool LogConfig::_internal_has_log() const {
  return this != internal_default_instance() && log_ != nullptr;
}
inline bool LogConfig::has_log() const {
  return _internal_has_log();
}
inline void LogConfig::clear_log() {
  if (GetArena() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
}
inline const ::api::v1::viper::logs::Log& LogConfig::_internal_log() const {
  const ::api::v1::viper::logs::Log* p = log_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::v1::viper::logs::Log*>(
      &::api::v1::viper::logs::_Log_default_instance_);
}
inline const ::api::v1::viper::logs::Log& LogConfig::log() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.LogConfig.log)
  return _internal_log();
}
inline void LogConfig::unsafe_arena_set_allocated_log(
    ::api::v1::viper::logs::Log* log) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(log_);
  }
  log_ = log;
  if (log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.viper.logs.LogConfig.log)
}
inline ::api::v1::viper::logs::Log* LogConfig::release_log() {
  auto temp = unsafe_arena_release_log();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::v1::viper::logs::Log* LogConfig::unsafe_arena_release_log() {
  // @@protoc_insertion_point(field_release:api.v1.viper.logs.LogConfig.log)
  
  ::api::v1::viper::logs::Log* temp = log_;
  log_ = nullptr;
  return temp;
}
inline ::api::v1::viper::logs::Log* LogConfig::_internal_mutable_log() {
  
  if (log_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::v1::viper::logs::Log>(GetArena());
    log_ = p;
  }
  return log_;
}
inline ::api::v1::viper::logs::Log* LogConfig::mutable_log() {
  // @@protoc_insertion_point(field_mutable:api.v1.viper.logs.LogConfig.log)
  return _internal_mutable_log();
}
inline void LogConfig::set_allocated_log(::api::v1::viper::logs::Log* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete log_;
  }
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:api.v1.viper.logs.LogConfig.log)
}

// -------------------------------------------------------------------

// Log

// .api.v1.viper.logs.Log.Level level = 1;
inline void Log::clear_level() {
  level_ = 0;
}
inline ::api::v1::viper::logs::Log_Level Log::_internal_level() const {
  return static_cast< ::api::v1::viper::logs::Log_Level >(level_);
}
inline ::api::v1::viper::logs::Log_Level Log::level() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.level)
  return _internal_level();
}
inline void Log::_internal_set_level(::api::v1::viper::logs::Log_Level value) {
  
  level_ = value;
}
inline void Log::set_level(::api::v1::viper::logs::Log_Level value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.level)
}

// .api.v1.viper.logs.Log.Formatter formatter = 2;
inline void Log::clear_formatter() {
  formatter_ = 0;
}
inline ::api::v1::viper::logs::Log_Formatter Log::_internal_formatter() const {
  return static_cast< ::api::v1::viper::logs::Log_Formatter >(formatter_);
}
inline ::api::v1::viper::logs::Log_Formatter Log::formatter() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.formatter)
  return _internal_formatter();
}
inline void Log::_internal_set_formatter(::api::v1::viper::logs::Log_Formatter value) {
  
  formatter_ = value;
}
inline void Log::set_formatter(::api::v1::viper::logs::Log_Formatter value) {
  _internal_set_formatter(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.formatter)
}

// string filepath = 3;
inline void Log::clear_filepath() {
  filepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Log::filepath() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.filepath)
  return _internal_filepath();
}
inline void Log::set_filepath(const std::string& value) {
  _internal_set_filepath(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.filepath)
}
inline std::string* Log::mutable_filepath() {
  // @@protoc_insertion_point(field_mutable:api.v1.viper.logs.Log.filepath)
  return _internal_mutable_filepath();
}
inline const std::string& Log::_internal_filepath() const {
  return filepath_.Get();
}
inline void Log::_internal_set_filepath(const std::string& value) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Log::set_filepath(std::string&& value) {
  
  filepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.v1.viper.logs.Log.filepath)
}
inline void Log::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.v1.viper.logs.Log.filepath)
}
inline void Log::set_filepath(const char* value,
    size_t size) {
  
  filepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.v1.viper.logs.Log.filepath)
}
inline std::string* Log::_internal_mutable_filepath() {
  
  return filepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Log::release_filepath() {
  // @@protoc_insertion_point(field_release:api.v1.viper.logs.Log.filepath)
  return filepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Log::set_allocated_filepath(std::string* filepath) {
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.v1.viper.logs.Log.filepath)
}
inline std::string* Log::unsafe_arena_release_filepath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.v1.viper.logs.Log.filepath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filepath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Log::unsafe_arena_set_allocated_filepath(
    std::string* filepath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filepath != nullptr) {
    
  } else {
    
  }
  filepath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filepath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.viper.logs.Log.filepath)
}

// int64 max_age = 4;
inline void Log::clear_max_age() {
  max_age_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_max_age() const {
  return max_age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::max_age() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.max_age)
  return _internal_max_age();
}
inline void Log::_internal_set_max_age(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_age_ = value;
}
inline void Log::set_max_age(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_age(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.max_age)
}

// int64 max_count = 5;
inline void Log::clear_max_count() {
  max_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_max_count() const {
  return max_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::max_count() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.max_count)
  return _internal_max_count();
}
inline void Log::_internal_set_max_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_count_ = value;
}
inline void Log::set_max_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_count(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.max_count)
}

// .google.protobuf.Duration rotate_interval = 6;
inline bool Log::_internal_has_rotate_interval() const {
  return this != internal_default_instance() && rotate_interval_ != nullptr;
}
inline bool Log::has_rotate_interval() const {
  return _internal_has_rotate_interval();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Log::_internal_rotate_interval() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = rotate_interval_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Log::rotate_interval() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.rotate_interval)
  return _internal_rotate_interval();
}
inline void Log::unsafe_arena_set_allocated_rotate_interval(
    PROTOBUF_NAMESPACE_ID::Duration* rotate_interval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotate_interval_);
  }
  rotate_interval_ = rotate_interval;
  if (rotate_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.v1.viper.logs.Log.rotate_interval)
}
inline PROTOBUF_NAMESPACE_ID::Duration* Log::release_rotate_interval() {
  auto temp = unsafe_arena_release_rotate_interval();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Log::unsafe_arena_release_rotate_interval() {
  // @@protoc_insertion_point(field_release:api.v1.viper.logs.Log.rotate_interval)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = rotate_interval_;
  rotate_interval_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Log::_internal_mutable_rotate_interval() {
  
  if (rotate_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    rotate_interval_ = p;
  }
  return rotate_interval_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Log::mutable_rotate_interval() {
  // @@protoc_insertion_point(field_mutable:api.v1.viper.logs.Log.rotate_interval)
  return _internal_mutable_rotate_interval();
}
inline void Log::set_allocated_rotate_interval(PROTOBUF_NAMESPACE_ID::Duration* rotate_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotate_interval_);
  }
  if (rotate_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotate_interval)->GetArena();
    if (message_arena != submessage_arena) {
      rotate_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotate_interval, submessage_arena);
    }
    
  } else {
    
  }
  rotate_interval_ = rotate_interval;
  // @@protoc_insertion_point(field_set_allocated:api.v1.viper.logs.Log.rotate_interval)
}

// int64 rotate_size = 7;
inline void Log::clear_rotate_size() {
  rotate_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::_internal_rotate_size() const {
  return rotate_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Log::rotate_size() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.rotate_size)
  return _internal_rotate_size();
}
inline void Log::_internal_set_rotate_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rotate_size_ = value;
}
inline void Log::set_rotate_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rotate_size(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.rotate_size)
}

// bool report_caller = 8;
inline void Log::clear_report_caller() {
  report_caller_ = false;
}
inline bool Log::_internal_report_caller() const {
  return report_caller_;
}
inline bool Log::report_caller() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.report_caller)
  return _internal_report_caller();
}
inline void Log::_internal_set_report_caller(bool value) {
  
  report_caller_ = value;
}
inline void Log::set_report_caller(bool value) {
  _internal_set_report_caller(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.report_caller)
}

// bool enable_goroutine_id = 9;
inline void Log::clear_enable_goroutine_id() {
  enable_goroutine_id_ = false;
}
inline bool Log::_internal_enable_goroutine_id() const {
  return enable_goroutine_id_;
}
inline bool Log::enable_goroutine_id() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.enable_goroutine_id)
  return _internal_enable_goroutine_id();
}
inline void Log::_internal_set_enable_goroutine_id(bool value) {
  
  enable_goroutine_id_ = value;
}
inline void Log::set_enable_goroutine_id(bool value) {
  _internal_set_enable_goroutine_id(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.enable_goroutine_id)
}

// .api.v1.viper.logs.Log.Redirct redirct = 10;
inline void Log::clear_redirct() {
  redirct_ = 0;
}
inline ::api::v1::viper::logs::Log_Redirct Log::_internal_redirct() const {
  return static_cast< ::api::v1::viper::logs::Log_Redirct >(redirct_);
}
inline ::api::v1::viper::logs::Log_Redirct Log::redirct() const {
  // @@protoc_insertion_point(field_get:api.v1.viper.logs.Log.redirct)
  return _internal_redirct();
}
inline void Log::_internal_set_redirct(::api::v1::viper::logs::Log_Redirct value) {
  
  redirct_ = value;
}
inline void Log::set_redirct(::api::v1::viper::logs::Log_Redirct value) {
  _internal_set_redirct(value);
  // @@protoc_insertion_point(field_set:api.v1.viper.logs.Log.redirct)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logs
}  // namespace viper
}  // namespace v1
}  // namespace api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::api::v1::viper::logs::Log_Level> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::viper::logs::Log_Level>() {
  return ::api::v1::viper::logs::Log_Level_descriptor();
}
template <> struct is_proto_enum< ::api::v1::viper::logs::Log_Formatter> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::viper::logs::Log_Formatter>() {
  return ::api::v1::viper::logs::Log_Formatter_descriptor();
}
template <> struct is_proto_enum< ::api::v1::viper::logs::Log_Redirct> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::v1::viper::logs::Log_Redirct>() {
  return ::api::v1::viper::logs::Log_Redirct_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pkg_2flog_2flog_2eproto
